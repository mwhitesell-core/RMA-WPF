
#region "Screen Comments"

// #> PROGRAM         U122B.QTS
// ((C)) Dyad Infosys LTD 
// PURPOSE: SUB-PROCESS WITHIN  EARNINGS GENERATION  PROCESS.
// Purpose:
// This pgm calculates the TITHE1/2/3 amounts for EP and
// updates stuff.
// Logic
// Get  TOTITE/D  record in f119/f110 just generated by u130/ and originally u115b but now u015a_0. This
// record has total of this EP`s titheable income. 
// GET  TOTITE/D  potentially existing in f119 ( D ) of previous
// YTD total titheable income.  Adding these 2 amounts together
// to get potential TITHE1/2/3 amounts.
// Access f119 for potentially existing TITHE1/2/3 ( A ) records to
// see what has previously been changed and determine for
// each TITHE1/2/3 what should be charge this EP.
// Create TITHE1/2/3 records in f110 with these amounts and 
// update TITHE1/2/3 records in f119 with YTD amounts
// MODIFICATION HISTORY
// DATE    SAF #  WHO      DESCRIPTION
// 2008/jun/10 M.C.      - original  
// 2008/aug/19 M.C. - generate  for TITHD1/2/3 or TITHE1/2/3
// depending on payroll-flag            
// 2008/oct/21 M.C. - create a new request to either create/update f119-doctor-ytd with rec-type `D`
// add amt-net to amt-mtd and amt-ytd in f119-doctor-ytd
// 2008/oct/21 brad1     - consider that incoming transactions can have ytd values so use those amounts
// 2008/oct/22 brad2     - use net amounts not gross since gross figures reduced by factor to get net and that`s values neeeded
// 2008/oct/24 brad3     - don`t output prim doctor is prim doct nbr is blank (happends if all docs are terminate)
// 2008/oct/27 brad4     - use gross figures to update 97 screen  D  records
// 2008/nov/04 brad5     - correct tithing mtd calculation
// 2008/nov/04 brad6     - TITHE1/2/3 mtd set to 0 if no new monthly amount
// 2008/nov/05 brad7 - for YTD get existing value and add new MTD
// 2008/nov/05 brad8 - changed TITHE1/2/3 calc to get mtd amount and then add previous ytd to get new ytd
// 2008/nov/05 brad9 - added additional tithe2 situation to handle (A4)
// 2008/nov/11 M.C. - change from 1 = 2 to 1=1 when output f119
// - remove if condition when output to brad* subfiles
// - include comp-code = `TOTIT` in the select statement of the last request
// 2008/nov/11 brad10    - 1st request changed to process only TOTITD/E summary records (doc = 000) to get the correct new YTD values
// as the other records already have the YTD updated by previous pgms (u115a_0/1??) so don`t need to
// process again
// 2009/feb/24 MC1 - modify the definition for amt-tithe2/3-actual-mtd
// 2010/Jul/08 MC2 - Change the amount range accordingly for July 1, 2010
// 2.5% up to $75,000 billings
// 5.0% from $ 75,001 - $150,000
// 7.5% from$ 150,001 - $448,333.35   
// 2016/Aug/04 MC3 - still consider doctor is active even though there is term date and as long as the term date
// is after the run date of this program


#endregion

using Core.ExceptionManagement;
using Core.Framework;
using Core.Framework.Core.Framework;
using Core.Windows.UI.Core.Windows;
using System;
using System.Data.SqlClient;
using System.IO;
using System.Text;

public class U122B : BaseClassControl
{
    private U122B m_U122B;

    public U122B(string Name, int Level)
        : base(Name, Level)
    {
        this.ScreenType = ScreenTypes.QTP;
        TOTEXP_CODE = new CoreCharacter("TOTEXP_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTEXP_SEQ = new CoreDecimal("TOTEXP_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TOTEXP_TYPE = new CoreCharacter("TOTEXP_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTEXP_GROUP = new CoreCharacter("TOTEXP_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        INCEXP_CODE = new CoreCharacter("INCEXP_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        INCEXP_SEQ = new CoreDecimal("INCEXP_SEQ", 2, this, ResetTypes.ResetAtStartup);
        INCEXP_TYPE = new CoreCharacter("INCEXP_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        INCEXP_GROUP = new CoreCharacter("INCEXP_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE1_CODE = new CoreCharacter("TITHE1_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE1_SEQ = new CoreDecimal("TITHE1_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHE1_TYPE = new CoreCharacter("TITHE1_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE1_GROUP = new CoreCharacter("TITHE1_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE1_FACTOR = new CoreDecimal("TITHE1_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHE2_CODE = new CoreCharacter("TITHE2_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE2_SEQ = new CoreDecimal("TITHE2_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHE2_TYPE = new CoreCharacter("TITHE2_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE2_GROUP = new CoreCharacter("TITHE2_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE2_FACTOR = new CoreDecimal("TITHE2_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHE3_CODE = new CoreCharacter("TITHE3_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE3_SEQ = new CoreDecimal("TITHE3_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHE3_TYPE = new CoreCharacter("TITHE3_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE3_GROUP = new CoreCharacter("TITHE3_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE3_FACTOR = new CoreDecimal("TITHE3_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHD1_CODE = new CoreCharacter("TITHD1_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD1_SEQ = new CoreDecimal("TITHD1_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHD1_TYPE = new CoreCharacter("TITHD1_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD1_GROUP = new CoreCharacter("TITHD1_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD1_FACTOR = new CoreDecimal("TITHD1_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHD2_CODE = new CoreCharacter("TITHD2_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD2_SEQ = new CoreDecimal("TITHD2_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHD2_TYPE = new CoreCharacter("TITHD2_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD2_GROUP = new CoreCharacter("TITHD2_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD2_FACTOR = new CoreDecimal("TITHD2_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHD3_CODE = new CoreCharacter("TITHD3_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD3_SEQ = new CoreDecimal("TITHD3_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHD3_TYPE = new CoreCharacter("TITHD3_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD3_GROUP = new CoreCharacter("TITHD3_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD3_FACTOR = new CoreDecimal("TITHD3_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TOTITE_CODE = new CoreCharacter("TOTITE_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITE_SEQ = new CoreDecimal("TOTITE_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TOTITE_TYPE = new CoreCharacter("TOTITE_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITE_GROUP = new CoreCharacter("TOTITE_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITE_FACTOR = new CoreDecimal("TOTITE_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TOTITD_CODE = new CoreCharacter("TOTITD_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITD_SEQ = new CoreDecimal("TOTITD_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TOTITD_TYPE = new CoreCharacter("TOTITD_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITD_GROUP = new CoreCharacter("TOTITD_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITD_FACTOR = new CoreDecimal("TOTITD_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        PAYROLL_FLAG = new CoreCharacter("PAYROLL_FLAG", 1, this, ResetTypes.ResetAtStartup, Prompt(1).ToString());
        X_COMP_CODE1 = new CoreCharacter("X_COMP_CODE1", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        X_COMP_CODE2 = new CoreCharacter("X_COMP_CODE2", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        X_COMP_CODE3 = new CoreCharacter("X_COMP_CODE3", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
    }

    public U122B(string Name, int Level, bool Request)
        : base(Name, Level, Request)
    {
        this.ScreenType = ScreenTypes.QTP;
        TOTEXP_CODE = new CoreCharacter("TOTEXP_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTEXP_SEQ = new CoreDecimal("TOTEXP_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TOTEXP_TYPE = new CoreCharacter("TOTEXP_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTEXP_GROUP = new CoreCharacter("TOTEXP_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        INCEXP_CODE = new CoreCharacter("INCEXP_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        INCEXP_SEQ = new CoreDecimal("INCEXP_SEQ", 2, this, ResetTypes.ResetAtStartup);
        INCEXP_TYPE = new CoreCharacter("INCEXP_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        INCEXP_GROUP = new CoreCharacter("INCEXP_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE1_CODE = new CoreCharacter("TITHE1_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE1_SEQ = new CoreDecimal("TITHE1_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHE1_TYPE = new CoreCharacter("TITHE1_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE1_GROUP = new CoreCharacter("TITHE1_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE1_FACTOR = new CoreDecimal("TITHE1_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHE2_CODE = new CoreCharacter("TITHE2_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE2_SEQ = new CoreDecimal("TITHE2_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHE2_TYPE = new CoreCharacter("TITHE2_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE2_GROUP = new CoreCharacter("TITHE2_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE2_FACTOR = new CoreDecimal("TITHE2_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHE3_CODE = new CoreCharacter("TITHE3_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE3_SEQ = new CoreDecimal("TITHE3_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHE3_TYPE = new CoreCharacter("TITHE3_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE3_GROUP = new CoreCharacter("TITHE3_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHE3_FACTOR = new CoreDecimal("TITHE3_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHD1_CODE = new CoreCharacter("TITHD1_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD1_SEQ = new CoreDecimal("TITHD1_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHD1_TYPE = new CoreCharacter("TITHD1_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD1_GROUP = new CoreCharacter("TITHD1_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD1_FACTOR = new CoreDecimal("TITHD1_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHD2_CODE = new CoreCharacter("TITHD2_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD2_SEQ = new CoreDecimal("TITHD2_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHD2_TYPE = new CoreCharacter("TITHD2_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD2_GROUP = new CoreCharacter("TITHD2_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD2_FACTOR = new CoreDecimal("TITHD2_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TITHD3_CODE = new CoreCharacter("TITHD3_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD3_SEQ = new CoreDecimal("TITHD3_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TITHD3_TYPE = new CoreCharacter("TITHD3_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD3_GROUP = new CoreCharacter("TITHD3_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TITHD3_FACTOR = new CoreDecimal("TITHD3_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TOTITE_CODE = new CoreCharacter("TOTITE_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITE_SEQ = new CoreDecimal("TOTITE_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TOTITE_TYPE = new CoreCharacter("TOTITE_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITE_GROUP = new CoreCharacter("TOTITE_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITE_FACTOR = new CoreDecimal("TOTITE_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        TOTITD_CODE = new CoreCharacter("TOTITD_CODE", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITD_SEQ = new CoreDecimal("TOTITD_SEQ", 2, this, ResetTypes.ResetAtStartup);
        TOTITD_TYPE = new CoreCharacter("TOTITD_TYPE", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITD_GROUP = new CoreCharacter("TOTITD_GROUP", 1, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        TOTITD_FACTOR = new CoreDecimal("TOTITD_FACTOR", 6, this, ResetTypes.ResetAtStartup);
        PAYROLL_FLAG = new CoreCharacter("PAYROLL_FLAG", 1, this, ResetTypes.ResetAtStartup, Prompt(1).ToString());
        X_COMP_CODE1 = new CoreCharacter("X_COMP_CODE1", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        X_COMP_CODE2 = new CoreCharacter("X_COMP_CODE2", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
        X_COMP_CODE3 = new CoreCharacter("X_COMP_CODE3", 6, this, ResetTypes.ResetAtStartup, Common.cEmptyString);
    }

    public override void Dispose()
    {
        if ((m_U122B != null))
        {
            m_U122B.CloseTransactionObjects();
            m_U122B = null;
        }
    }

    public U122B GetU122B(int Level)
    {
        if (m_U122B == null)
        {
            m_U122B = new U122B("U122B", Level);
        }
        else
        {
            m_U122B.ResetValues();
        }
        return m_U122B;
    }

    #region "Renaissance Architect Migration Services Default Regions"

    #region "Declarations (Variables, Files and Transactions)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.
    protected CoreCharacter TOTEXP_CODE;
    protected CoreDecimal TOTEXP_SEQ;
    protected CoreCharacter TOTEXP_TYPE;
    protected CoreCharacter TOTEXP_GROUP;
    protected CoreCharacter INCEXP_CODE;
    protected CoreDecimal INCEXP_SEQ;
    protected CoreCharacter INCEXP_TYPE;
    protected CoreCharacter INCEXP_GROUP;
    protected CoreCharacter TITHE1_CODE;
    protected CoreDecimal TITHE1_SEQ;
    protected CoreCharacter TITHE1_TYPE;
    protected CoreCharacter TITHE1_GROUP;
    protected CoreDecimal TITHE1_FACTOR;
    protected CoreCharacter TITHE2_CODE;
    protected CoreDecimal TITHE2_SEQ;
    protected CoreCharacter TITHE2_TYPE;
    protected CoreCharacter TITHE2_GROUP;
    protected CoreDecimal TITHE2_FACTOR;
    protected CoreCharacter TITHE3_CODE;
    protected CoreDecimal TITHE3_SEQ;
    protected CoreCharacter TITHE3_TYPE;
    protected CoreCharacter TITHE3_GROUP;
    protected CoreDecimal TITHE3_FACTOR;
    protected CoreCharacter TITHD1_CODE;
    protected CoreDecimal TITHD1_SEQ;
    protected CoreCharacter TITHD1_TYPE;
    protected CoreCharacter TITHD1_GROUP;
    protected CoreDecimal TITHD1_FACTOR;
    protected CoreCharacter TITHD2_CODE;
    protected CoreDecimal TITHD2_SEQ;
    protected CoreCharacter TITHD2_TYPE;
    protected CoreCharacter TITHD2_GROUP;
    protected CoreDecimal TITHD2_FACTOR;
    protected CoreCharacter TITHD3_CODE;
    protected CoreDecimal TITHD3_SEQ;
    protected CoreCharacter TITHD3_TYPE;
    protected CoreCharacter TITHD3_GROUP;
    protected CoreDecimal TITHD3_FACTOR;
    protected CoreCharacter TOTITE_CODE;
    protected CoreDecimal TOTITE_SEQ;
    protected CoreCharacter TOTITE_TYPE;
    protected CoreCharacter TOTITE_GROUP;
    protected CoreDecimal TOTITE_FACTOR;
    protected CoreCharacter TOTITD_CODE;
    protected CoreDecimal TOTITD_SEQ;
    protected CoreCharacter TOTITD_TYPE;
    protected CoreCharacter TOTITD_GROUP;
    protected CoreDecimal TOTITD_FACTOR;
    protected CoreCharacter PAYROLL_FLAG;
    protected CoreCharacter X_COMP_CODE1;
    protected CoreCharacter X_COMP_CODE2;

    protected CoreCharacter X_COMP_CODE3;

    protected SqlConnection m_cnnQUERY = new SqlConnection();
    protected SqlConnection m_cnnTRANS_UPDATE = new SqlConnection();

    protected SqlTransaction m_trnTRANS_UPDATE;

    #endregion

    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)"

    public override bool RunQTP()
    {
        try
        {
            U122B_GET_TOTEXP_1 GET_TOTEXP_1 = new U122B_GET_TOTEXP_1(Name, Level);
            GET_TOTEXP_1.Run();
            GET_TOTEXP_1.Dispose();
            GET_TOTEXP_1 = null;

            U122B_GET_INCEXP_2 GET_INCEXP_2 = new U122B_GET_INCEXP_2(Name, Level);
            GET_INCEXP_2.Run();
            GET_INCEXP_2.Dispose();
            GET_INCEXP_2 = null;

            U122B_GET_TITHE1_3 GET_TITHE1_3 = new U122B_GET_TITHE1_3(Name, Level);
            GET_TITHE1_3.Run();
            GET_TITHE1_3.Dispose();
            GET_TITHE1_3 = null;

            U122B_GET_TITHD1_4 GET_TITHD1_4 = new U122B_GET_TITHD1_4(Name, Level);
            GET_TITHD1_4.Run();
            GET_TITHD1_4.Dispose();
            GET_TITHD1_4 = null;

            U122B_GET_TITHE2_5 GET_TITHE2_5 = new U122B_GET_TITHE2_5(Name, Level);
            GET_TITHE2_5.Run();
            GET_TITHE2_5.Dispose();
            GET_TITHE2_5 = null;

            U122B_GET_TITHD2_6 GET_TITHD2_6 = new U122B_GET_TITHD2_6(Name, Level);
            GET_TITHD2_6.Run();
            GET_TITHD2_6.Dispose();
            GET_TITHD2_6 = null;

            U122B_GET_TITHE3_7 GET_TITHE3_7 = new U122B_GET_TITHE3_7(Name, Level);
            GET_TITHE3_7.Run();
            GET_TITHE3_7.Dispose();
            GET_TITHE3_7 = null;

            U122B_GET_TITHD3_8 GET_TITHD3_8 = new U122B_GET_TITHD3_8(Name, Level);
            GET_TITHD3_8.Run();
            GET_TITHD3_8.Dispose();
            GET_TITHD3_8 = null;

            U122B_GET_TOTITE_9 GET_TOTITE_9 = new U122B_GET_TOTITE_9(Name, Level);
            GET_TOTITE_9.Run();
            GET_TOTITE_9.Dispose();
            GET_TOTITE_9 = null;

            U122B_GET_TOTITD_10 GET_TOTITD_10 = new U122B_GET_TOTITD_10(Name, Level);
            GET_TOTITD_10.Run();
            GET_TOTITD_10.Dispose();
            GET_TOTITD_10 = null;

            U122B_CREATE_UPDATE_F119_REC_TYPE_D_11 CREATE_UPDATE_F119_REC_TYPE_D_11 = new U122B_CREATE_UPDATE_F119_REC_TYPE_D_11(Name, Level);
            CREATE_UPDATE_F119_REC_TYPE_D_11.Run();
            CREATE_UPDATE_F119_REC_TYPE_D_11.Dispose();
            CREATE_UPDATE_F119_REC_TYPE_D_11 = null;

            U122B_SEARCH_PRIMARY_DOCTOR_12 SEARCH_PRIMARY_DOCTOR_12 = new U122B_SEARCH_PRIMARY_DOCTOR_12(Name, Level);
            SEARCH_PRIMARY_DOCTOR_12.Run();
            SEARCH_PRIMARY_DOCTOR_12.Dispose();
            SEARCH_PRIMARY_DOCTOR_12 = null;

            U122B_SWAP_DOC_NBR_WITH_PRIMARY_13 SWAP_DOC_NBR_WITH_PRIMARY_13 = new U122B_SWAP_DOC_NBR_WITH_PRIMARY_13(Name, Level);
            SWAP_DOC_NBR_WITH_PRIMARY_13.Run();
            SWAP_DOC_NBR_WITH_PRIMARY_13.Dispose();
            SWAP_DOC_NBR_WITH_PRIMARY_13 = null;

            U122B_CALC_TITHE_1_2_3_14 CALC_TITHE_1_2_3_14 = new U122B_CALC_TITHE_1_2_3_14(Name, Level);
            CALC_TITHE_1_2_3_14.Run();
            CALC_TITHE_1_2_3_14.Dispose();
            CALC_TITHE_1_2_3_14 = null;

            U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15 ADD_SUMMARY_DOCTOR_RECS_TO_F119_15 = new U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15(Name, Level);
            ADD_SUMMARY_DOCTOR_RECS_TO_F119_15.Run();
            ADD_SUMMARY_DOCTOR_RECS_TO_F119_15.Dispose();
            ADD_SUMMARY_DOCTOR_RECS_TO_F119_15 = null;

            return true;
        }

        catch (CustomApplicationException ex)
        {
            WriteError(ex);
            return false;
        }

        catch (Exception ex)
        {
            WriteError(ex);
            return false;
        }
    }

    #endregion

    #endregion
}

public class U122B_GET_TOTEXP_1 : U122B
{
    public U122B_GET_TOTEXP_1(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;
    }

    #region "Declarations (Variables, Files and Transactions)(U122B_GET_TOTEXP_1)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {
        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("TOTEXP"));

            ChooseClause = strSQL.ToString();
        }

        catch (CustomApplicationException ex)
        {
            WriteError(ex);
        }

        catch (Exception ex)
        {
            WriteError(ex);
        }
    }

    #endregion

    #region "Standard Generated Procedures(U122B_GET_TOTEXP_1)"

    #region "Automatic Item Initialization(U122B_GET_TOTEXP_1)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion

    #region "Transaction Management Procedures(U122B_GET_TOTEXP_1)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:57 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {
        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());
        }

        catch (CustomApplicationException ex)
        {
            throw ex;
        }

        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;
        }
    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {
        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();
        }

        catch (CustomApplicationException ex)
        {
            throw ex;
        }

        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;
        }
    }

    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();
    }

    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;
    }

    #endregion

    #region "FILE Management Procedures(U122B_GET_TOTEXP_1)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:57 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {
        try
        {
            Initialize_TRANS_UPDATE();
        }

        catch (CustomApplicationException ex)
        {
            throw ex;
        }

        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;
        }
    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {
        try
        {
            fleF190_COMP_CODES.Dispose();
        }

        catch (CustomApplicationException ex)
        {
            throw ex;
        }

        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;
        }
    }

    #endregion

    #endregion

    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_TOTEXP_1)"

    public void Run()
    {
        try
        {
            Request("GET_TOTEXP_1");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    TOTEXP_CODE.Value = "TOTEXP";
                    TOTEXP_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    TOTEXP_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");
                }
            }
        }

        catch (CustomApplicationException ex)
        {
            WriteError(ex);
        }

        catch (Exception ex)
        {
            WriteError(ex);
        }

        finally
        {
            EndRequest("GET_TOTEXP_1");
        }
    }

    #endregion
}
//GET_TOTEXP_1



public class U122B_GET_INCEXP_2 : U122B
{

    public U122B_GET_INCEXP_2(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_GET_INCEXP_2)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("INCEXP"));


            ChooseClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }




    #endregion


    #region "Standard Generated Procedures(U122B_GET_INCEXP_2)"


    #region "Automatic Item Initialization(U122B_GET_INCEXP_2)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_GET_INCEXP_2)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:57 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_GET_INCEXP_2)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:57 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF190_COMP_CODES.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_INCEXP_2)"


    public void Run()
    {

        try
        {
            Request("GET_INCEXP_2");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    INCEXP_CODE.Value = "INCEXP";
                    INCEXP_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    INCEXP_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("GET_INCEXP_2");

        }

    }







    #endregion


}
//GET_INCEXP_2



public class U122B_GET_TITHE1_3 : U122B
{

    public U122B_GET_TITHE1_3(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_GET_TITHE1_3)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("TITHE1"));


            ChooseClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }




    #endregion


    #region "Standard Generated Procedures(U122B_GET_TITHE1_3)"


    #region "Automatic Item Initialization(U122B_GET_TITHE1_3)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_GET_TITHE1_3)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:58 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_GET_TITHE1_3)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:58 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF190_COMP_CODES.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_TITHE1_3)"


    public void Run()
    {

        try
        {
            Request("GET_TITHE1_3");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    TITHE1_CODE.Value = "TITHE1";
                    TITHE1_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    TITHE1_TYPE.Value = fleF190_COMP_CODES.GetStringValue("COMP_TYPE");
                    TITHE1_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");
                    TITHE1_FACTOR.Value = fleF190_COMP_CODES.GetDecimalValue("FACTOR");

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("GET_TITHE1_3");

        }

    }







    #endregion


}
//GET_TITHE1_3



public class U122B_GET_TITHD1_4 : U122B
{

    public U122B_GET_TITHD1_4(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_GET_TITHD1_4)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("TITHD1"));


            ChooseClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }




    #endregion


    #region "Standard Generated Procedures(U122B_GET_TITHD1_4)"


    #region "Automatic Item Initialization(U122B_GET_TITHD1_4)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_GET_TITHD1_4)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:58 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_GET_TITHD1_4)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:58 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF190_COMP_CODES.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_TITHD1_4)"


    public void Run()
    {

        try
        {
            Request("GET_TITHD1_4");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    TITHD1_CODE.Value = "TITHD1";
                    TITHD1_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    TITHD1_TYPE.Value = fleF190_COMP_CODES.GetStringValue("COMP_TYPE");
                    TITHE1_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");
                    TITHE1_FACTOR.Value = fleF190_COMP_CODES.GetDecimalValue("FACTOR");

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("GET_TITHD1_4");

        }

    }







    #endregion


}
//GET_TITHD1_4



public class U122B_GET_TITHE2_5 : U122B
{

    public U122B_GET_TITHE2_5(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_GET_TITHE2_5)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("TITHE2"));


            ChooseClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }




    #endregion


    #region "Standard Generated Procedures(U122B_GET_TITHE2_5)"


    #region "Automatic Item Initialization(U122B_GET_TITHE2_5)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_GET_TITHE2_5)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:58 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_GET_TITHE2_5)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:59 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF190_COMP_CODES.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_TITHE2_5)"


    public void Run()
    {

        try
        {
            Request("GET_TITHE2_5");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    TITHE2_CODE.Value = "TITHE2";
                    TITHE2_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    TITHE2_TYPE.Value = fleF190_COMP_CODES.GetStringValue("COMP_TYPE");
                    TITHE2_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");
                    TITHE2_FACTOR.Value = fleF190_COMP_CODES.GetDecimalValue("FACTOR");

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("GET_TITHE2_5");

        }

    }







    #endregion


}
//GET_TITHE2_5



public class U122B_GET_TITHD2_6 : U122B
{

    public U122B_GET_TITHD2_6(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_GET_TITHD2_6)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("TITHD2"));


            ChooseClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }




    #endregion


    #region "Standard Generated Procedures(U122B_GET_TITHD2_6)"


    #region "Automatic Item Initialization(U122B_GET_TITHD2_6)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_GET_TITHD2_6)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:59 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_GET_TITHD2_6)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:11:59 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF190_COMP_CODES.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_TITHD2_6)"


    public void Run()
    {

        try
        {
            Request("GET_TITHD2_6");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    TITHD2_CODE.Value = "TITHD2";
                    TITHD2_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    TITHD2_TYPE.Value = fleF190_COMP_CODES.GetStringValue("COMP_TYPE");
                    TITHE2_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");
                    TITHE2_FACTOR.Value = fleF190_COMP_CODES.GetDecimalValue("FACTOR");

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("GET_TITHD2_6");

        }

    }







    #endregion


}
//GET_TITHD2_6



public class U122B_GET_TITHE3_7 : U122B
{

    public U122B_GET_TITHE3_7(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_GET_TITHE3_7)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("TITHE3"));


            ChooseClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }




    #endregion


    #region "Standard Generated Procedures(U122B_GET_TITHE3_7)"


    #region "Automatic Item Initialization(U122B_GET_TITHE3_7)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_GET_TITHE3_7)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:00 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_GET_TITHE3_7)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:00 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF190_COMP_CODES.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_TITHE3_7)"


    public void Run()
    {

        try
        {
            Request("GET_TITHE3_7");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    TITHE3_CODE.Value = "TITHE3";
                    TITHE3_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    TITHE3_TYPE.Value = fleF190_COMP_CODES.GetStringValue("COMP_TYPE");
                    TITHE3_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");
                    TITHE3_FACTOR.Value = fleF190_COMP_CODES.GetDecimalValue("FACTOR");

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("GET_TITHE3_7");

        }

    }







    #endregion


}
//GET_TITHE3_7



public class U122B_GET_TITHD3_8 : U122B
{

    public U122B_GET_TITHD3_8(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_GET_TITHD3_8)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("TITHD3"));


            ChooseClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }




    #endregion


    #region "Standard Generated Procedures(U122B_GET_TITHD3_8)"


    #region "Automatic Item Initialization(U122B_GET_TITHD3_8)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_GET_TITHD3_8)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:00 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_GET_TITHD3_8)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:01 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF190_COMP_CODES.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_TITHD3_8)"


    public void Run()
    {

        try
        {
            Request("GET_TITHD3_8");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    TITHD3_CODE.Value = "TITHD3";
                    TITHD3_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    TITHD3_TYPE.Value = fleF190_COMP_CODES.GetStringValue("COMP_TYPE");
                    TITHD3_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");
                    TITHE3_FACTOR.Value = fleF190_COMP_CODES.GetDecimalValue("FACTOR");

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("GET_TITHD3_8");

        }

    }







    #endregion


}
//GET_TITHD3_8



public class U122B_GET_TOTITE_9 : U122B
{

    public U122B_GET_TOTITE_9(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_GET_TOTITE_9)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("TOTITE"));


            ChooseClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }




    #endregion


    #region "Standard Generated Procedures(U122B_GET_TOTITE_9)"


    #region "Automatic Item Initialization(U122B_GET_TOTITE_9)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_GET_TOTITE_9)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:01 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_GET_TOTITE_9)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:01 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF190_COMP_CODES.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_TOTITE_9)"


    public void Run()
    {

        try
        {
            Request("GET_TOTITE_9");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    TOTITE_CODE.Value = "TOTITE";
                    TOTITE_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    TOTITE_TYPE.Value = fleF190_COMP_CODES.GetStringValue("COMP_TYPE");
                    TOTITE_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");
                    TOTITE_FACTOR.Value = fleF190_COMP_CODES.GetDecimalValue("FACTOR");

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("GET_TOTITE_9");

        }

    }







    #endregion


}
//GET_TOTITE_9



public class U122B_GET_TOTITD_10 : U122B
{

    public U122B_GET_TOTITD_10(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF190_COMP_CODES.Choose += fleF190_COMP_CODES_Choose;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_GET_TOTITD_10)"

    private SqlFileObject fleF190_COMP_CODES;

    private void fleF190_COMP_CODES_Choose(ref string ChooseClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
            strSQL.Append(Common.StringToField("TOTITD"));


            ChooseClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }




    #endregion


    #region "Standard Generated Procedures(U122B_GET_TOTITD_10)"


    #region "Automatic Item Initialization(U122B_GET_TOTITD_10)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_GET_TOTITD_10)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:01 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_GET_TOTITD_10)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:02 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF190_COMP_CODES.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_GET_TOTITD_10)"


    public void Run()
    {

        try
        {
            Request("GET_TOTITD_10");

            while (fleF190_COMP_CODES.QTPForMissing())
            {
                // --> GET F190_COMP_CODES <--

                fleF190_COMP_CODES.GetData();
                // --> End GET F190_COMP_CODES <--

                if (Transaction())
                {
                    TOTITD_CODE.Value = "TOTITD";
                    TOTITD_SEQ.Value = fleF190_COMP_CODES.GetDecimalValue("REPORTING_SEQ");
                    TOTITD_TYPE.Value = fleF190_COMP_CODES.GetStringValue("COMP_TYPE");
                    TOTITD_GROUP.Value = fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP");
                    TOTITD_FACTOR.Value = fleF190_COMP_CODES.GetDecimalValue("FACTOR");
                    if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
                    {
                        X_COMP_CODE1.Value = QDesign.NULL(TITHE1_CODE.Value);
                    }
                    else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
                    {
                        X_COMP_CODE1.Value = QDesign.NULL(TITHD1_CODE.Value);
                    }
                    if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
                    {
                        X_COMP_CODE2.Value = QDesign.NULL(TITHE2_CODE.Value);
                    }
                    else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
                    {
                        X_COMP_CODE2.Value = QDesign.NULL(TITHD2_CODE.Value);
                    }
                    if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
                    {
                        X_COMP_CODE3.Value = QDesign.NULL(TITHE3_CODE.Value);
                    }
                    else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
                    {
                        X_COMP_CODE3.Value = QDesign.NULL(TITHD3_CODE.Value);
                    }

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("GET_TOTITD_10");

        }

    }







    #endregion


}
//GET_TOTITD_10



public class U122B_CREATE_UPDATE_F119_REC_TYPE_D_11 : U122B
{

    public U122B_CREATE_UPDATE_F119_REC_TYPE_D_11(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "F119_TITHE_ONE_COMP_CODE_PER_DOC_NBR", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF119_DOCTOR_YTD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleBRAD = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "BRAD", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF119_ADD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_ADD", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF119_DOCTOR_YTD.SetItemFinals += fleF119_DOCTOR_YTD_SetItemFinals;
        NEW_AMT_YTD.GetValue += NEW_AMT_YTD_GetValue;
        fleF119_ADD.SetItemFinals += fleF119_ADD_SetItemFinals;
        fleF119_ADD.InitializeItems += fleF119_ADD_AutomaticItemInitialization;
        BRAD_AMT_GROSS.GetValue += BRAD_AMT_GROSS_GetValue;
    }


    #region "Declarations (Variables, Files and Transactions)(U122B_CREATE_UPDATE_F119_REC_TYPE_D_11)"

    private SqlFileObject fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR;
    private SqlFileObject fleF119_DOCTOR_YTD;

    private void fleF119_DOCTOR_YTD_SetItemFinals()
    {

        try
        {
            fleF119_DOCTOR_YTD.set_SetValue("AMT_MTD", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS"));
            fleF119_DOCTOR_YTD.set_SetValue("AMT_YTD", NEW_AMT_YTD.Value);
            fleF119_DOCTOR_YTD.set_SetValue("LAST_MOD_DATE", QDesign.SysDate(ref m_cnnQUERY));
            fleF119_DOCTOR_YTD.set_SetValue("LAST_MOD_TIME", QDesign.SysTime(ref m_cnnQUERY) / 10000);
            fleF119_DOCTOR_YTD.set_SetValue("LAST_MOD_USER_ID", "U122B");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }


    public override bool SelectIf()
    {


        try
        {
            if (QDesign.NULL(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("DOC_NBR")) != "000" & (QDesign.NULL(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE")) == "TOTITD" | QDesign.NULL(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE")) == "TOTITE"))
            {
                return true;
            }

            return false;


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);
            return false;


        }
        catch (Exception ex)
        {
            WriteError(ex);
            return false;

        }

    }

    private DDecimal BRAD_AMT_GROSS = new DDecimal("BRAD_AMT_GROSS", 10);
    private void BRAD_AMT_GROSS_GetValue(ref decimal Value)
    {

        try
        {
            Value = fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }

    private DDecimal NEW_AMT_YTD = new DDecimal("NEW_AMT_YTD", 9);
    private void NEW_AMT_YTD_GetValue(ref decimal Value)
    {

        try
        {
            Value = fleF119_DOCTOR_YTD.GetDecimalValue("AMT_YTD") + fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }

    private SqlFileObject fleBRAD;
    private SqlFileObject fleF119_ADD;

    private void fleF119_ADD_SetItemFinals()
    {

        try
        {
            fleF119_ADD.set_SetValue("DOC_OHIP_NBR", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_ADD.set_SetValue("DOC_NBR", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("DOC_NBR"));
            fleF119_ADD.set_SetValue("COMP_CODE", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE"));
            fleF119_ADD.set_SetValue("COMP_CODE_GROUP", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE_GROUP"));
            fleF119_ADD.set_SetValue("PROCESS_SEQ", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("REPORTING_SEQ"));
            fleF119_ADD.set_SetValue("REC_TYPE", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("REC_TYPE_D"));
            fleF119_ADD.set_SetValue("AMT_MTD", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS"));
            fleF119_ADD.set_SetValue("AMT_YTD", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS"));
            fleF119_ADD.set_SetValue("LAST_MOD_DATE", QDesign.SysDate(ref m_cnnQUERY));
            fleF119_ADD.set_SetValue("LAST_MOD_TIME", QDesign.SysTime(ref m_cnnQUERY) / 10000);
            fleF119_ADD.set_SetValue("LAST_MOD_USER_ID", "U122B");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }


    #endregion


    #region "Standard Generated Procedures(U122B_CREATE_UPDATE_F119_REC_TYPE_D_11)"


    #region "Automatic Item Initialization(U122B_CREATE_UPDATE_F119_REC_TYPE_D_11)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:10 PM

    //#-----------------------------------------
    //# fleF119_ADD_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:12:09 PM
    //#-----------------------------------------
    private void fleF119_ADD_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF119_ADD.set_SetValue("DOC_NBR", !Fixed, fleF119_DOCTOR_YTD.GetStringValue("DOC_NBR"));
            fleF119_ADD.set_SetValue("DOC_OHIP_NBR", !Fixed, fleF119_DOCTOR_YTD.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_ADD.set_SetValue("COMP_CODE", !Fixed, fleF119_DOCTOR_YTD.GetStringValue("COMP_CODE"));
            fleF119_ADD.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_DOCTOR_YTD.GetDecimalValue("PROCESS_SEQ"));
            fleF119_ADD.set_SetValue("COMP_CODE_GROUP", !Fixed, fleF119_DOCTOR_YTD.GetStringValue("COMP_CODE_GROUP"));
            fleF119_ADD.set_SetValue("REC_TYPE", !Fixed, fleF119_DOCTOR_YTD.GetStringValue("REC_TYPE"));
            fleF119_ADD.set_SetValue("REC_1", !Fixed, fleF119_DOCTOR_YTD.GetStringValue("REC_1"));
            fleF119_ADD.set_SetValue("AMT_MTD", !Fixed, fleF119_DOCTOR_YTD.GetDecimalValue("AMT_MTD"));
            fleF119_ADD.set_SetValue("AMT_YTD", !Fixed, fleF119_DOCTOR_YTD.GetDecimalValue("AMT_YTD"));
            fleF119_ADD.set_SetValue("FILLER", !Fixed, fleF119_DOCTOR_YTD.GetStringValue("FILLER"));
            fleF119_ADD.set_SetValue("TEXT", !Fixed, fleF119_DOCTOR_YTD.GetStringValue("TEXT"));
            fleF119_ADD.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_DOCTOR_YTD.GetDecimalValue("LAST_MOD_DATE"));
            fleF119_ADD.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_DOCTOR_YTD.GetDecimalValue("LAST_MOD_TIME"));
            fleF119_ADD.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_DOCTOR_YTD.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion


    #region "Transaction Management Procedures(U122B_CREATE_UPDATE_F119_REC_TYPE_D_11)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:03 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.Transaction = m_trnTRANS_UPDATE;
        fleF119_DOCTOR_YTD.Transaction = m_trnTRANS_UPDATE;
        fleBRAD.Transaction = m_trnTRANS_UPDATE;
        fleF119_ADD.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_CREATE_UPDATE_F119_REC_TYPE_D_11)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:03 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.Dispose();
            fleF119_DOCTOR_YTD.Dispose();
            fleBRAD.Dispose();
            fleF119_ADD.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_CREATE_UPDATE_F119_REC_TYPE_D_11)"


    public void Run()
    {


        try
        {
            Request("CREATE_UPDATE_F119_REC_TYPE_D_11");

            while (fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.QTPForMissing())
            {
                // --> GET F119_TITHE_ONE_COMP_CODE_PER_DOC_NBR <--

                fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetData();
                // --> End GET F119_TITHE_ONE_COMP_CODE_PER_DOC_NBR <--

                while (fleF119_DOCTOR_YTD.QTPForMissing("1"))
                {
                    // --> GET F119_DOCTOR_YTD <--
                    m_strWhere = new StringBuilder(" WHERE ");
                    m_strWhere.Append(" ").Append(fleF119_DOCTOR_YTD.ElementOwner("DOC_OHIP_NBR")).Append(" = ");
                    m_strWhere.Append((fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("DOC_OHIP_NBR")));
                    m_strWhere.Append(" And ").Append(fleF119_DOCTOR_YTD.ElementOwner("DOC_NBR")).Append(" = ");
                    m_strWhere.Append(Common.StringToField(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("DOC_NBR")));
                    m_strWhere.Append(" And ").Append(fleF119_DOCTOR_YTD.ElementOwner("COMP_CODE")).Append(" = ");
                    m_strWhere.Append(Common.StringToField(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE")));
                    m_strWhere.Append(" And ").Append(fleF119_DOCTOR_YTD.ElementOwner("REC_TYPE")).Append(" = ");
                    m_strWhere.Append(Common.StringToField(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("REC_TYPE_D")));

                    fleF119_DOCTOR_YTD.GetData(m_strWhere.ToString(), GetDataOptions.IsOptional);
                    // --> End GET F119_DOCTOR_YTD <--

                    if (Transaction())
                    {

                        if (Select_If())
                        {



                            SubFile(ref m_trnTRANS_UPDATE, ref fleBRAD, SubFileType.Keep, fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR, "COMP_CODE", "DOC_NBR", fleF119_DOCTOR_YTD, "AMT_YTD", 
                            BRAD_AMT_GROSS, NEW_AMT_YTD);



                            fleF119_DOCTOR_YTD.OutPut(OutPutType.Update, null, 1 == 1 & fleF119_DOCTOR_YTD.Exists());




                            fleF119_ADD.OutPut(OutPutType.Add, null, 1 == 1 & !fleF119_DOCTOR_YTD.Exists());


                        }

                    }

                }

            }


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("CREATE_UPDATE_F119_REC_TYPE_D_11");

        }

    }




    #endregion


}
//CREATE_UPDATE_F119_REC_TYPE_D_11



public class U122B_SEARCH_PRIMARY_DOCTOR_12 : U122B
{

    public U122B_SEARCH_PRIMARY_DOCTOR_12(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "F119_TITHE_ONE_COMP_CODE_PER_DOC_NBR", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF020_DOCTOR_MSTR = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F020_DOCTOR_MSTR", "", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF020_DOCTOR_EXTRA = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F020_DOCTOR_EXTRA", "", false, false, false, 0, "m_trnTRANS_UPDATE");
        X_AMT_GROSS_SUMMARY_DOC = new CoreDecimal("X_AMT_GROSS_SUMMARY_DOC", 9, this);
        X_PRIMARY_DOC_NBR = new CoreCharacter("X_PRIMARY_DOC_NBR", 3, this, Common.cEmptyString);
        fleU122B_PRIM_DOC_TEMP = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "U122B_PRIM_DOC_TEMP", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);

        fleF020_DOCTOR_EXTRA.InitializeItems += fleF020_DOCTOR_EXTRA_AutomaticItemInitialization;

        fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.SelectIf += fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR_SelectIf;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_SEARCH_PRIMARY_DOCTOR_12)"

    private SqlFileObject fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR;


    private void fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR_SelectIf(ref string SelectIfClause)
    {

        try
        {
            StringBuilder strSQL = new StringBuilder("");

            strSQL.Append(" ( (    ").Append(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.ElementOwner("COMP_CODE")).Append(" =  ").Append(Common.StringToField(TOTITE_CODE.Value)).Append("  AND ");
            strSQL.Append("   ").Append(Common.StringToField(PAYROLL_FLAG.Value)).Append("  =  'A' ) OR ");
            strSQL.Append(" (    ").Append(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.ElementOwner("COMP_CODE")).Append(" =  ").Append(Common.StringToField(TOTITD_CODE.Value)).Append("  AND ");
            strSQL.Append("   ").Append(Common.StringToField(PAYROLL_FLAG.Value)).Append("  =  'C' ))");


            SelectIfClause = strSQL.ToString();


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }

    private SqlFileObject fleF020_DOCTOR_MSTR;
    private SqlFileObject fleF020_DOCTOR_EXTRA;
    private CoreDecimal X_AMT_GROSS_SUMMARY_DOC;

    private CoreCharacter X_PRIMARY_DOC_NBR;
    private SqlFileObject fleU122B_PRIM_DOC_TEMP;


    #endregion


    #region "Standard Generated Procedures(U122B_SEARCH_PRIMARY_DOCTOR_12)"


    #region "Automatic Item Initialization(U122B_SEARCH_PRIMARY_DOCTOR_12)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:12 PM

    //#-----------------------------------------
    //# fleF020_DOCTOR_EXTRA_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:12:11 PM
    //#-----------------------------------------
    private void fleF020_DOCTOR_EXTRA_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF020_DOCTOR_EXTRA.set_SetValue("DOC_NBR", !Fixed, fleF020_DOCTOR_MSTR.GetStringValue("DOC_NBR"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion


    #region "Transaction Management Procedures(U122B_SEARCH_PRIMARY_DOCTOR_12)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:03 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.Transaction = m_trnTRANS_UPDATE;
        fleF020_DOCTOR_MSTR.Transaction = m_trnTRANS_UPDATE;
        fleF020_DOCTOR_EXTRA.Transaction = m_trnTRANS_UPDATE;
        fleU122B_PRIM_DOC_TEMP.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_SEARCH_PRIMARY_DOCTOR_12)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:03 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.Dispose();
            fleF020_DOCTOR_MSTR.Dispose();
            fleF020_DOCTOR_EXTRA.Dispose();
            fleU122B_PRIM_DOC_TEMP.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_SEARCH_PRIMARY_DOCTOR_12)"


    public void Run()
    {

        try
        {
            Request("SEARCH_PRIMARY_DOCTOR_12");

            while (fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.QTPForMissing())
            {
                // --> GET F119_TITHE_ONE_COMP_CODE_PER_DOC_NBR <--

                fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetData();
                // --> End GET F119_TITHE_ONE_COMP_CODE_PER_DOC_NBR <--

                while (fleF020_DOCTOR_MSTR.QTPForMissing("1"))
                {
                    // --> GET F020_DOCTOR_MSTR <--
                    m_strWhere = new StringBuilder(" WHERE ");
                    m_strWhere.Append(" ").Append(fleF020_DOCTOR_MSTR.ElementOwner("DOC_OHIP_NBR")).Append(" = ");
                    m_strWhere.Append((fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("DOC_OHIP_NBR")));

                    fleF020_DOCTOR_MSTR.GetData(m_strWhere.ToString(), GetDataOptions.IsOptional);
                    // --> End GET F020_DOCTOR_MSTR <--

                    while (fleF020_DOCTOR_EXTRA.QTPForMissing("2"))
                    {
                        // --> GET F020_DOCTOR_EXTRA <--
                        m_strWhere = new StringBuilder(" WHERE ");
                        m_strWhere.Append(" ").Append(fleF020_DOCTOR_EXTRA.ElementOwner("DOC_NBR")).Append(" = ");
                        m_strWhere.Append(Common.StringToField(fleF020_DOCTOR_MSTR.GetStringValue("DOC_NBR")));

                        fleF020_DOCTOR_EXTRA.GetData(m_strWhere.ToString(), GetDataOptions.IsOptional);
                        // --> End GET F020_DOCTOR_EXTRA <--


                        if (Transaction())
                        {

                            Sort(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetSortValue("DOC_OHIP_NBR"), fleF020_DOCTOR_EXTRA.GetSortValue("DOC_FLAG_PRIMARY"), fleF020_DOCTOR_MSTR.GetSortValue("DOC_DATE_FAC_TERM_YY", SortType.Descending), fleF020_DOCTOR_MSTR.GetSortValue("DOC_DATE_FAC_TERM_MM", SortType.Descending), fleF020_DOCTOR_MSTR.GetSortValue("DOC_DATE_FAC_TERM_DD", SortType.Descending));



                        }

                    }

                }

            }

            while (Sort(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR, fleF020_DOCTOR_MSTR, fleF020_DOCTOR_EXTRA))
            {

                if (QDesign.NULL(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("DOC_NBR")) == "000")
                {
                    X_AMT_GROSS_SUMMARY_DOC.Value = fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS");
                }
                if (QDesign.NULL(fleF020_DOCTOR_EXTRA.GetStringValue("DOC_FLAG_PRIMARY")) == "Y")
                {
                    X_PRIMARY_DOC_NBR.Value = fleF020_DOCTOR_MSTR.GetStringValue("DOC_NBR");
                }


                SubFile(ref m_trnTRANS_UPDATE, ref fleU122B_PRIM_DOC_TEMP, fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.At("DOC_OHIP_NBR"), SubFileType.Keep, X_PRIMARY_DOC_NBR, X_AMT_GROSS_SUMMARY_DOC, fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR);



                Reset(ref X_AMT_GROSS_SUMMARY_DOC, fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.At("DOC_OHIP_NBR"));
                Reset(ref X_PRIMARY_DOC_NBR, fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.At("DOC_OHIP_NBR"));

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("SEARCH_PRIMARY_DOCTOR_12");

        }

    }




    #endregion


}
//SEARCH_PRIMARY_DOCTOR_12



public class U122B_SWAP_DOC_NBR_WITH_PRIMARY_13 : U122B
{

    public U122B_SWAP_DOC_NBR_WITH_PRIMARY_13(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleU122B_PRIM_DOC_TEMP = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "U122B_PRIM_DOC_TEMP", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF020_DOCTOR_MSTR = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F020_DOCTOR_MSTR", "", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleU122B_PRIM_DOC = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "U122B_PRIM_DOC", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);

        fleU122B_PRIM_DOC.SetItemFinals += FleU122B_PRIM_DOC_SetItemFinals;

    }




    #region "Declarations (Variables, Files and Transactions)(U122B_SWAP_DOC_NBR_WITH_PRIMARY_13)"

    private SqlFileObject fleU122B_PRIM_DOC_TEMP;
    private SqlFileObject fleF020_DOCTOR_MSTR;
    private SqlFileObject fleU122B_PRIM_DOC;


    private void FleU122B_PRIM_DOC_SetItemFinals()
    {
        try
        {
            fleU122B_PRIM_DOC.set_SetValue("DOC_NBR", fleU122B_PRIM_DOC.GetStringValue("X_PRIMARY_DOC_NBR"));



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }
    }

    #endregion


    #region "Standard Generated Procedures(U122B_SWAP_DOC_NBR_WITH_PRIMARY_13)"


    #region "Automatic Item Initialization(U122B_SWAP_DOC_NBR_WITH_PRIMARY_13)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.

    #endregion


    #region "Transaction Management Procedures(U122B_SWAP_DOC_NBR_WITH_PRIMARY_13)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:04 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleU122B_PRIM_DOC_TEMP.Transaction = m_trnTRANS_UPDATE;
        fleF020_DOCTOR_MSTR.Transaction = m_trnTRANS_UPDATE;
        fleU122B_PRIM_DOC.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_SWAP_DOC_NBR_WITH_PRIMARY_13)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:04 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleU122B_PRIM_DOC_TEMP.Dispose();
            fleF020_DOCTOR_MSTR.Dispose();
            fleU122B_PRIM_DOC.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_SWAP_DOC_NBR_WITH_PRIMARY_13)"


    public void Run()
    {



        try
        {
            Request("SWAP_DOC_NBR_WITH_PRIMARY_13");

            while (fleU122B_PRIM_DOC_TEMP.QTPForMissing())
            {
                // --> GET U122B_PRIM_DOC_TEMP <--

                fleU122B_PRIM_DOC_TEMP.GetData();
                // --> End GET U122B_PRIM_DOC_TEMP <--

                while (fleF020_DOCTOR_MSTR.QTPForMissing("1"))
                {
                    // --> GET F020_DOCTOR_MSTR <--
                    m_strWhere = new StringBuilder(" WHERE ");
                    m_strWhere.Append(" ").Append(fleF020_DOCTOR_MSTR.ElementOwner("DOC_NBR")).Append(" = ");
                    m_strWhere.Append(Common.StringToField(fleU122B_PRIM_DOC_TEMP.GetStringValue("X_PRIMARY_DOC_NBR")));

                    fleF020_DOCTOR_MSTR.GetData(m_strWhere.ToString());
                    // --> End GET F020_DOCTOR_MSTR <--



                    if (Transaction())
                    {

                        SubFile(ref m_trnTRANS_UPDATE, ref fleU122B_PRIM_DOC, (fleF020_DOCTOR_MSTR.GetNumericDateValue("DOC_DATE_FAC_TERM_YY") + fleF020_DOCTOR_MSTR.GetNumericDateValue("DOC_DATE_FAC_TERM_MM") + fleF020_DOCTOR_MSTR.GetNumericDateValue("DOC_DATE_FAC_TERM_DD")) == 0
                            || (Convert.ToInt32(fleF020_DOCTOR_MSTR.GetStringValue("DOC_DATE_FAC_TERM_YY").Trim().PadLeft(4, '0') + fleF020_DOCTOR_MSTR.GetStringValue("DOC_DATE_FAC_TERM_MM").Trim().PadLeft(2, '0') + fleF020_DOCTOR_MSTR.GetStringValue("DOC_DATE_FAC_TERM_DD").Trim().PadLeft(2, '0')) > QDesign.SysDate(ref m_cnnQUERY))
                            , SubFileType.Keep, fleU122B_PRIM_DOC_TEMP);



                    }

                }

            }






        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("SWAP_DOC_NBR_WITH_PRIMARY_13");

        }

    }




    #endregion


}
//SWAP_DOC_NBR_WITH_PRIMARY_13



public class U122B_CALC_TITHE_1_2_3_14 : U122B
{

    public U122B_CALC_TITHE_1_2_3_14(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleU122B_PRIM_DOC = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "U122B_PRIM_DOC", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleCONSTANTS_MSTR_REC_6 = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "CONSTANTS_MSTR_REC_6", "", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF119_TOTITE = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_TOTITE", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF119_TITHE1 = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_TITHE1", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF119_TITHE2 = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_TITHE2", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF119_TITHE3 = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_TITHE3", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleBRAD_TITHE1 = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "BRAD_TITHE1", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleBRAD_TITHE2 = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "BRAD_TITHE2", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleBRAD_TITHE3 = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "BRAD_TITHE3", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF119_TITHE_1_2_3_TRANS = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "F119_TITHE_1_2_3_TRANS", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF119TITHE2 = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "F119_TITHE_1_2_3_TRANS", "F119TITHE2", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF119TITHE3 = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "F119_TITHE_1_2_3_TRANS", "F119TITHE3", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF110_TOTITE_ADD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F110_COMPENSATION", "F110_TOTITE_ADD", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF110_TITHE1_ADD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F110_COMPENSATION", "F110_TITHE1_ADD", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF110_TITHE2_ADD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F110_COMPENSATION", "F110_TITHE2_ADD", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF110_TITHE3_ADD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F110_COMPENSATION", "F110_TITHE3_ADD", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF119_TITHE1_ADD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_TITHE1_ADD", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF119_TITHE2_ADD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_TITHE2_ADD", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF119_TITHE3_ADD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_TITHE3_ADD", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF119_TITHE1.SetItemFinals += fleF119_TITHE1_SetItemFinals;
        fleF119_TITHE2.SetItemFinals += fleF119_TITHE2_SetItemFinals;
        fleF119_TITHE3.SetItemFinals += fleF119_TITHE3_SetItemFinals;
        TITHE1_YTD.GetValue += TITHE1_YTD_GetValue;
        TITHE2_YTD.GetValue += TITHE2_YTD_GetValue;
        TITHE3_YTD.GetValue += TITHE3_YTD_GetValue;
        NEW_TOTITE_MTD.GetValue += NEW_TOTITE_MTD_GetValue;
        NEW_TOTITE_YTD.GetValue += NEW_TOTITE_YTD_GetValue;
        X_CURRENT_EP_NBR.GetValue += X_CURRENT_EP_NBR_GetValue;
        OLD_TOTITE_YTD.GetValue += OLD_TOTITE_YTD_GetValue;
        TOT1.GetValue += TOT1_GetValue;
        TOT2.GetValue += TOT2_GetValue;
        TOT3.GetValue += TOT3_GetValue;
        AMT_TITHE1_ACTUAL_MTD.GetValue += AMT_TITHE1_ACTUAL_MTD_GetValue;
        AMT_TITHE2_ACTUAL_MTD.GetValue += AMT_TITHE2_ACTUAL_MTD_GetValue;
        AMT_TITHE3_ACTUAL_MTD.GetValue += AMT_TITHE3_ACTUAL_MTD_GetValue;
        AMT_TITHE1_ACTUAL_YTD.GetValue += AMT_TITHE1_ACTUAL_YTD_GetValue;
        AMT_TITHE2_ACTUAL_YTD.GetValue += AMT_TITHE2_ACTUAL_YTD_GetValue;
        AMT_TITHE3_ACTUAL_YTD.GetValue += AMT_TITHE3_ACTUAL_YTD_GetValue;
        X_REC_TYPE.GetValue += X_REC_TYPE_GetValue;
        COMP_CODE1.GetValue += COMP_CODE1_GetValue;
        COMP_SEQ1.GetValue += COMP_SEQ1_GetValue;
        COMP_GROUP1.GetValue += COMP_GROUP1_GetValue;
        COMP_CODE2.GetValue += COMP_CODE2_GetValue;
        COMP_SEQ2.GetValue += COMP_SEQ2_GetValue;
        COMP_GROUP2.GetValue += COMP_GROUP2_GetValue;
        COMP_CODE3.GetValue += COMP_CODE3_GetValue;
        COMP_SEQ3.GetValue += COMP_SEQ3_GetValue;
        COMP_GROUP3.GetValue += COMP_GROUP3_GetValue;
        fleF119_TITHE1_ADD.SetItemFinals += fleF119_TITHE1_ADD_SetItemFinals;
        fleF119_TITHE2_ADD.SetItemFinals += fleF119_TITHE2_ADD_SetItemFinals;
        fleF119_TITHE3_ADD.SetItemFinals += fleF119_TITHE3_ADD_SetItemFinals;
        fleF119_TITHE1.InitializeItems += fleF119_TITHE1_AutomaticItemInitialization;
        fleF119_TITHE2.InitializeItems += fleF119_TITHE2_AutomaticItemInitialization;
        fleF119_TITHE3.InitializeItems += fleF119_TITHE3_AutomaticItemInitialization;
        fleF110_TOTITE_ADD.InitializeItems += fleF110_TOTITE_ADD_AutomaticItemInitialization;
        fleF110_TITHE1_ADD.InitializeItems += fleF110_TITHE1_ADD_AutomaticItemInitialization;
        fleF110_TITHE2_ADD.InitializeItems += fleF110_TITHE2_ADD_AutomaticItemInitialization;
        fleF110_TITHE3_ADD.InitializeItems += fleF110_TITHE3_ADD_AutomaticItemInitialization;
        fleF119_TITHE1_ADD.InitializeItems += fleF119_TITHE1_ADD_AutomaticItemInitialization;
        fleF119_TITHE2_ADD.InitializeItems += fleF119_TITHE2_ADD_AutomaticItemInitialization;
        fleF119_TITHE3_ADD.InitializeItems += fleF119_TITHE3_ADD_AutomaticItemInitialization;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_CALC_TITHE_1_2_3_14)"

    private SqlFileObject fleU122B_PRIM_DOC;
    private SqlFileObject fleCONSTANTS_MSTR_REC_6;
    private SqlFileObject fleF119_TOTITE;
    private SqlFileObject fleF119_TITHE1;

    private void fleF119_TITHE1_SetItemFinals()
    {

        try
        {
            fleF119_TITHE1.set_SetValue("AMT_MTD", AMT_TITHE1_ACTUAL_MTD.Value);
            fleF119_TITHE1.set_SetValue("AMT_YTD", AMT_TITHE1_ACTUAL_YTD.Value);


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }

    private SqlFileObject fleF119_TITHE2;

    private void fleF119_TITHE2_SetItemFinals()
    {

        try
        {
            fleF119_TITHE2.set_SetValue("AMT_MTD", AMT_TITHE2_ACTUAL_MTD.Value);
            fleF119_TITHE2.set_SetValue("AMT_YTD", AMT_TITHE2_ACTUAL_YTD.Value);


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }

    private SqlFileObject fleF119_TITHE3;

    private void fleF119_TITHE3_SetItemFinals()
    {

        try
        {
            fleF119_TITHE3.set_SetValue("AMT_MTD", AMT_TITHE3_ACTUAL_MTD.Value);
            fleF119_TITHE3.set_SetValue("AMT_YTD", AMT_TITHE3_ACTUAL_YTD.Value);


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }

    private DDecimal TITHE1_YTD = new DDecimal("TITHE1_YTD", 10);
    private void TITHE1_YTD_GetValue(ref decimal Value)
    {

        try
        {
            Value = fleF119_TITHE1.GetDecimalValue("AMT_YTD");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal TITHE2_YTD = new DDecimal("TITHE2_YTD", 10);
    private void TITHE2_YTD_GetValue(ref decimal Value)
    {

        try
        {
            Value = fleF119_TITHE2.GetDecimalValue("AMT_YTD");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal TITHE3_YTD = new DDecimal("TITHE3_YTD", 10);
    private void TITHE3_YTD_GetValue(ref decimal Value)
    {

        try
        {

            Value = fleF119_TITHE3.GetDecimalValue("AMT_YTD");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal NEW_TOTITE_MTD = new DDecimal("NEW_TOTITE_MTD", 10);
    private void NEW_TOTITE_MTD_GetValue(ref decimal Value)
    {

        try
        {
            Value = fleU122B_PRIM_DOC.GetDecimalValue("X_AMT_GROSS_SUMMARY_DOC");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal NEW_TOTITE_YTD = new DDecimal("NEW_TOTITE_YTD", 10);
    private void NEW_TOTITE_YTD_GetValue(ref decimal Value)
    {

        try
        {
            Value = fleF119_TOTITE.GetDecimalValue("AMT_YTD") + fleU122B_PRIM_DOC.GetDecimalValue("X_AMT_GROSS_SUMMARY_DOC");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal X_CURRENT_EP_NBR = new DDecimal("X_CURRENT_EP_NBR", 6);
    private void X_CURRENT_EP_NBR_GetValue(ref decimal Value)
    {

        try
        {
            Value = fleCONSTANTS_MSTR_REC_6.GetDecimalValue("CURRENT_EP_NBR");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal OLD_TOTITE_YTD = new DDecimal("OLD_TOTITE_YTD", 10);
    private void OLD_TOTITE_YTD_GetValue(ref decimal Value)
    {

        try
        {
            Value = fleF119_TOTITE.GetDecimalValue("AMT_YTD");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal TOT1 = new DDecimal("TOT1", 10);
    private void TOT1_GetValue(ref decimal Value)
    {

        try
        {
            Value = NEW_TOTITE_YTD.Value - fleF119_TOTITE.GetDecimalValue("AMT_YTD");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal TOT2 = new DDecimal("TOT2", 10);
    private void TOT2_GetValue(ref decimal Value)
    {

        try
        {
            Value = 7500000 - fleF119_TOTITE.GetDecimalValue("AMT_YTD");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal TOT3 = new DDecimal("TOT3", 10);
    private void TOT3_GetValue(ref decimal Value)
    {

        try
        {
            Value = 15000000 - fleF119_TOTITE.GetDecimalValue("AMT_YTD");


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal AMT_TITHE1_ACTUAL_MTD = new DDecimal("AMT_TITHE1_ACTUAL_MTD", 10);
    private void AMT_TITHE1_ACTUAL_MTD_GetValue(ref decimal Value)
    {

        try
        {
            decimal CurrentValue = 0m;

            // TODO: Expression may need to be checked for DIVISION by 0.  Manual steps may be required:

            if (NEW_TOTITE_YTD.Value <= 7500000)
            {
                CurrentValue = QDesign.Round(((NEW_TOTITE_YTD.Value - OLD_TOTITE_YTD.Value) * TITHE1_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
                CurrentValue = QDesign.Round(((NEW_TOTITE_YTD.Value - OLD_TOTITE_YTD.Value) * TITHE1_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }
            else if (OLD_TOTITE_YTD.Value <= 7500000 & QDesign.NULL(NEW_TOTITE_YTD.Value) > 7500000)
            {
                CurrentValue = QDesign.Round(((7500000 - OLD_TOTITE_YTD.Value) * TITHE1_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal AMT_TITHE2_ACTUAL_MTD = new DDecimal("AMT_TITHE2_ACTUAL_MTD", 10);
    private void AMT_TITHE2_ACTUAL_MTD_GetValue(ref decimal Value)
    {

        try
        {
            decimal CurrentValue = 0m;

            // TODO: Expression may need to be checked for DIVISION by 0.  Manual steps may be required:

            if (QDesign.NULL(OLD_TOTITE_YTD.Value) > 7500000 & OLD_TOTITE_YTD.Value <= 15000000 & QDesign.NULL(NEW_TOTITE_YTD.Value) > 7500000 & NEW_TOTITE_YTD.Value <= 15000000)
            {
                CurrentValue = QDesign.Round(((NEW_TOTITE_YTD.Value - OLD_TOTITE_YTD.Value) * TITHE2_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
                CurrentValue = QDesign.Round(((NEW_TOTITE_YTD.Value - OLD_TOTITE_YTD.Value) * TITHE2_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }
            else if (OLD_TOTITE_YTD.Value <= 7500000 & QDesign.NULL(NEW_TOTITE_YTD.Value) > 7500000 & NEW_TOTITE_YTD.Value <= 15000000)
            {
                CurrentValue = QDesign.Round(((NEW_TOTITE_YTD.Value - 7500000) * TITHE2_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }
            else if (OLD_TOTITE_YTD.Value <= 7500000 & QDesign.NULL(NEW_TOTITE_YTD.Value) > 15000000)
            {
                CurrentValue = QDesign.Round(((7500000) * TITHE2_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }
            else if (QDesign.NULL(OLD_TOTITE_YTD.Value) > 7500000 & OLD_TOTITE_YTD.Value <= 15000000 & QDesign.NULL(NEW_TOTITE_YTD.Value) > 15000000 & NEW_TOTITE_YTD.Value <= 44833335)
            {
                CurrentValue = QDesign.Round(((15000000 - OLD_TOTITE_YTD.Value) * TITHE2_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal AMT_TITHE3_ACTUAL_MTD = new DDecimal("AMT_TITHE3_ACTUAL_MTD", 10);
    private void AMT_TITHE3_ACTUAL_MTD_GetValue(ref decimal Value)
    {

        try
        {
            decimal CurrentValue = 0m;

            // TODO: Expression may need to be checked for DIVISION by 0.  Manual steps may be required:

            if (QDesign.NULL(OLD_TOTITE_YTD.Value) > 15000000 & OLD_TOTITE_YTD.Value <= 44833335 & QDesign.NULL(NEW_TOTITE_YTD.Value) > 15000000 & NEW_TOTITE_YTD.Value <= 44833335)
            {
                CurrentValue = QDesign.Round(((NEW_TOTITE_YTD.Value - OLD_TOTITE_YTD.Value) * TITHE3_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
                CurrentValue = QDesign.Round(((NEW_TOTITE_YTD.Value - OLD_TOTITE_YTD.Value) * TITHE3_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }
            else if (QDesign.NULL(OLD_TOTITE_YTD.Value) < 15000000 & QDesign.NULL(NEW_TOTITE_YTD.Value) > 15000000 & NEW_TOTITE_YTD.Value <= 44833335)
            {
                CurrentValue = QDesign.Round(((NEW_TOTITE_YTD.Value - 15000000) * TITHE3_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }
            else if (OLD_TOTITE_YTD.Value <= 15000000 & QDesign.NULL(NEW_TOTITE_YTD.Value) > 44833335)
            {
                CurrentValue = QDesign.Round(((29833335) * TITHE3_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }
            else if (QDesign.NULL(OLD_TOTITE_YTD.Value) > 15000000 & OLD_TOTITE_YTD.Value <= 44833335 & QDesign.NULL(NEW_TOTITE_YTD.Value) > 44833335)
            {
                CurrentValue = QDesign.Round(((44833335 - OLD_TOTITE_YTD.Value) * TITHE3_FACTOR.Value) / 10000, 0, RoundOptionTypes.Near);
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal AMT_TITHE1_ACTUAL_YTD = new DDecimal("AMT_TITHE1_ACTUAL_YTD", 10);
    private void AMT_TITHE1_ACTUAL_YTD_GetValue(ref decimal Value)
    {

        try
        {
            decimal CurrentValue = 0m;
            if (QDesign.NULL(AMT_TITHE1_ACTUAL_MTD.Value) > 0)
            {
                CurrentValue = AMT_TITHE1_ACTUAL_MTD.Value + TITHE1_YTD.Value;
                CurrentValue = AMT_TITHE1_ACTUAL_MTD.Value + TITHE1_YTD.Value;
            }
            else
            {
                CurrentValue = TITHE1_YTD.Value;
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal AMT_TITHE2_ACTUAL_YTD = new DDecimal("AMT_TITHE2_ACTUAL_YTD", 10);
    private void AMT_TITHE2_ACTUAL_YTD_GetValue(ref decimal Value)
    {

        try
        {
            decimal CurrentValue = 0m;
            if (QDesign.NULL(AMT_TITHE2_ACTUAL_MTD.Value) > 0)
            {
                CurrentValue = AMT_TITHE2_ACTUAL_MTD.Value + TITHE2_YTD.Value;
                CurrentValue = AMT_TITHE2_ACTUAL_MTD.Value + TITHE2_YTD.Value;
            }
            else
            {
                CurrentValue = TITHE2_YTD.Value;
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal AMT_TITHE3_ACTUAL_YTD = new DDecimal("AMT_TITHE3_ACTUAL_YTD", 10);
    private void AMT_TITHE3_ACTUAL_YTD_GetValue(ref decimal Value)
    {

        try
        {
            decimal CurrentValue = 0m;
            if (QDesign.NULL(AMT_TITHE3_ACTUAL_MTD.Value) > 0)
            {
                CurrentValue = AMT_TITHE3_ACTUAL_MTD.Value + TITHE3_YTD.Value;
                CurrentValue = AMT_TITHE3_ACTUAL_MTD.Value + TITHE3_YTD.Value;
            }
            else
            {
                CurrentValue = TITHE3_YTD.Value;
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }

    private SqlFileObject fleBRAD_TITHE1;

    private SqlFileObject fleBRAD_TITHE2;

    private SqlFileObject fleBRAD_TITHE3;
    private DCharacter X_REC_TYPE = new DCharacter("X_REC_TYPE", 1);
    private void X_REC_TYPE_GetValue(ref string Value)
    {

        try
        {
            Value = "A";


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DCharacter COMP_CODE1 = new DCharacter("COMP_CODE1", 6);
    private void COMP_CODE1_GetValue(ref string Value)
    {

        try
        {
            string CurrentValue = string.Empty;
            if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
            {
                CurrentValue = QDesign.NULL(TITHE1_CODE.Value);
            }
            else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
            {
                CurrentValue = QDesign.NULL(TITHD1_CODE.Value);
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal COMP_SEQ1 = new DDecimal("COMP_SEQ1", 2);
    private void COMP_SEQ1_GetValue(ref decimal Value)
    {

        try
        {
            decimal CurrentValue = 0m;
            if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
            {
                CurrentValue = TITHE1_SEQ.Value;
                CurrentValue = TITHE1_SEQ.Value;
            }
            else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
            {
                CurrentValue = TITHD1_SEQ.Value;
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DCharacter COMP_GROUP1 = new DCharacter("COMP_GROUP1", 1);
    private void COMP_GROUP1_GetValue(ref string Value)
    {

        try
        {
            string CurrentValue = string.Empty;
            if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
            {
                CurrentValue = QDesign.NULL(TITHE1_GROUP.Value);
                CurrentValue = QDesign.NULL(TITHE1_GROUP.Value);
            }
            else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
            {
                CurrentValue = QDesign.NULL(TITHD1_GROUP.Value);
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }

    private SqlFileObject fleF119_TITHE_1_2_3_TRANS;
    private DCharacter COMP_CODE2 = new DCharacter("COMP_CODE2", 6);
    private void COMP_CODE2_GetValue(ref string Value)
    {

        try
        {
            string CurrentValue = string.Empty;
            if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
            {
                CurrentValue = QDesign.NULL(TITHE2_CODE.Value);
                CurrentValue = QDesign.NULL(TITHE2_CODE.Value);
            }
            else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
            {
                CurrentValue = QDesign.NULL(TITHD2_CODE.Value);
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal COMP_SEQ2 = new DDecimal("COMP_SEQ2", 2);
    private void COMP_SEQ2_GetValue(ref decimal Value)
    {

        try
        {
            decimal CurrentValue = 0m;
            if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
            {
                CurrentValue = TITHE2_SEQ.Value;
                CurrentValue = TITHE2_SEQ.Value;
            }
            else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
            {
                CurrentValue = TITHD2_SEQ.Value;
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DCharacter COMP_GROUP2 = new DCharacter("COMP_GROUP2", 1);
    private void COMP_GROUP2_GetValue(ref string Value)
    {

        try
        {
            string CurrentValue = string.Empty;
            if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
            {
                CurrentValue = QDesign.NULL(TITHE2_GROUP.Value);
                CurrentValue = QDesign.NULL(TITHE2_GROUP.Value);
            }
            else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
            {
                CurrentValue = QDesign.NULL(TITHD2_GROUP.Value);
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }

    private SqlFileObject fleF119TITHE2;
    private DCharacter COMP_CODE3 = new DCharacter("COMP_CODE3", 6);
    private void COMP_CODE3_GetValue(ref string Value)
    {

        try
        {
            string CurrentValue = string.Empty;
            if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
            {
                CurrentValue = QDesign.NULL(TITHE3_CODE.Value);
                CurrentValue = QDesign.NULL(TITHE3_CODE.Value);
            }
            else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
            {
                CurrentValue = QDesign.NULL(TITHD3_CODE.Value);
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DDecimal COMP_SEQ3 = new DDecimal("COMP_SEQ3", 2);
    private void COMP_SEQ3_GetValue(ref decimal Value)
    {

        try
        {
            decimal CurrentValue = 0m;
            if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
            {
                CurrentValue = TITHE3_SEQ.Value;
                CurrentValue = TITHE3_SEQ.Value;
            }
            else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
            {
                CurrentValue = TITHD3_SEQ.Value;
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }
    private DCharacter COMP_GROUP3 = new DCharacter("COMP_GROUP3", 1);
    private void COMP_GROUP3_GetValue(ref string Value)
    {

        try
        {
            string CurrentValue = string.Empty;
            if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
            {
                CurrentValue = QDesign.NULL(TITHE3_GROUP.Value);
                CurrentValue = QDesign.NULL(TITHE3_GROUP.Value);
            }
            else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
            {
                CurrentValue = QDesign.NULL(TITHD3_GROUP.Value);
            }

            Value = CurrentValue;

        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }



    }

    private SqlFileObject fleF119TITHE3;
    private SqlFileObject fleF110_TOTITE_ADD;
    private SqlFileObject fleF110_TITHE1_ADD;
    private SqlFileObject fleF110_TITHE2_ADD;
    private SqlFileObject fleF110_TITHE3_ADD;
    private SqlFileObject fleF119_TITHE1_ADD;

    private void fleF119_TITHE1_ADD_SetItemFinals()
    {

        try
        {
            fleF119_TITHE1_ADD.set_SetValue("DOC_OHIP_NBR", fleU122B_PRIM_DOC.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_TITHE1_ADD.set_SetValue("DOC_NBR", "000");
            fleF119_TITHE1_ADD.set_SetValue("REC_TYPE", "D");
            fleF119_TITHE1_ADD.set_SetValue("COMP_CODE", COMP_CODE1.Value);
            fleF119_TITHE1_ADD.set_SetValue("PROCESS_SEQ", COMP_SEQ1.Value);
            fleF119_TITHE1_ADD.set_SetValue("COMP_CODE_GROUP", COMP_GROUP1.Value);
            fleF119_TITHE1_ADD.set_SetValue("AMT_MTD", AMT_TITHE1_ACTUAL_MTD.Value);
            fleF119_TITHE1_ADD.set_SetValue("AMT_YTD", AMT_TITHE1_ACTUAL_YTD.Value);


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }



    private SqlFileObject fleF119_TITHE2_ADD;

    private void fleF119_TITHE2_ADD_SetItemFinals()
    {

        try
        {
            fleF119_TITHE2_ADD.set_SetValue("DOC_OHIP_NBR", fleU122B_PRIM_DOC.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_TITHE2_ADD.set_SetValue("DOC_NBR", "000");
            fleF119_TITHE2_ADD.set_SetValue("REC_TYPE", "D");
            fleF119_TITHE2_ADD.set_SetValue("COMP_CODE", COMP_CODE2.Value);
            fleF119_TITHE2_ADD.set_SetValue("PROCESS_SEQ", COMP_SEQ2.Value);
            fleF119_TITHE2_ADD.set_SetValue("COMP_CODE_GROUP", COMP_GROUP2.Value);
            fleF119_TITHE2_ADD.set_SetValue("AMT_MTD", AMT_TITHE2_ACTUAL_MTD.Value);
            fleF119_TITHE2_ADD.set_SetValue("AMT_YTD", AMT_TITHE2_ACTUAL_YTD.Value);


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }



    private SqlFileObject fleF119_TITHE3_ADD;

    private void fleF119_TITHE3_ADD_SetItemFinals()
    {

        try
        {
            fleF119_TITHE3_ADD.set_SetValue("DOC_OHIP_NBR", fleU122B_PRIM_DOC.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_TITHE3_ADD.set_SetValue("DOC_NBR", "000");
            fleF119_TITHE3_ADD.set_SetValue("REC_TYPE", "D");
            fleF119_TITHE3_ADD.set_SetValue("COMP_CODE", COMP_CODE3.Value);
            fleF119_TITHE3_ADD.set_SetValue("PROCESS_SEQ", COMP_SEQ3.Value);
            fleF119_TITHE3_ADD.set_SetValue("COMP_CODE_GROUP", COMP_GROUP3.Value);
            fleF119_TITHE3_ADD.set_SetValue("AMT_MTD", AMT_TITHE3_ACTUAL_MTD.Value);
            fleF119_TITHE3_ADD.set_SetValue("AMT_YTD", AMT_TITHE3_ACTUAL_YTD.Value);


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }


    #endregion


    #region "Standard Generated Procedures(U122B_CALC_TITHE_1_2_3_14)"


    #region "Automatic Item Initialization(U122B_CALC_TITHE_1_2_3_14)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:13:09 PM

    //#-----------------------------------------
    //# fleF119_TITHE1_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:12:16 PM
    //#-----------------------------------------
    private void fleF119_TITHE1_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.

            // CORE Commented out. Not required
            //fleF119_TITHE1.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            //fleF119_TITHE1.set_SetValue("DOC_OHIP_NBR", !Fixed, fleF119_TOTITE.GetDecimalValue("DOC_OHIP_NBR"));
            //fleF119_TITHE1.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            //fleF119_TITHE1.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            //fleF119_TITHE1.set_SetValue("COMP_CODE_GROUP", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE_GROUP"));
            //fleF119_TITHE1.set_SetValue("REC_TYPE", !Fixed, fleF119_TOTITE.GetStringValue("REC_TYPE"));
            //fleF119_TITHE1.set_SetValue("REC_1", !Fixed, fleF119_TOTITE.GetStringValue("REC_1"));
            //fleF119_TITHE1.set_SetValue("AMT_MTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_MTD"));
            //fleF119_TITHE1.set_SetValue("AMT_YTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_YTD"));
            //fleF119_TITHE1.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            //fleF119_TITHE1.set_SetValue("TEXT", !Fixed, fleF119_TOTITE.GetStringValue("TEXT"));
            //fleF119_TITHE1.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            //fleF119_TITHE1.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            //fleF119_TITHE1.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF119_TITHE2_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:12:16 PM
    //#-----------------------------------------
    private void fleF119_TITHE2_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.

            // CORE Commented out. Not required

            //fleF119_TITHE2.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            //fleF119_TITHE2.set_SetValue("DOC_OHIP_NBR", !Fixed, fleF119_TOTITE.GetDecimalValue("DOC_OHIP_NBR"));
            //fleF119_TITHE2.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            //fleF119_TITHE2.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            //fleF119_TITHE2.set_SetValue("COMP_CODE_GROUP", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE_GROUP"));
            //fleF119_TITHE2.set_SetValue("REC_TYPE", !Fixed, fleF119_TOTITE.GetStringValue("REC_TYPE"));
            //fleF119_TITHE2.set_SetValue("REC_1", !Fixed, fleF119_TOTITE.GetStringValue("REC_1"));
            //fleF119_TITHE2.set_SetValue("AMT_MTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_MTD"));
            //fleF119_TITHE2.set_SetValue("AMT_YTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_YTD"));
            //fleF119_TITHE2.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            //fleF119_TITHE2.set_SetValue("TEXT", !Fixed, fleF119_TOTITE.GetStringValue("TEXT"));
            //fleF119_TITHE2.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            //fleF119_TITHE2.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            //fleF119_TITHE2.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF119_TITHE3_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:12:17 PM
    //#-----------------------------------------
    private void fleF119_TITHE3_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            //fleF119_TITHE3.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            //fleF119_TITHE3.set_SetValue("DOC_OHIP_NBR", !Fixed, fleF119_TOTITE.GetDecimalValue("DOC_OHIP_NBR"));
            //fleF119_TITHE3.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            //fleF119_TITHE3.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            //fleF119_TITHE3.set_SetValue("COMP_CODE_GROUP", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE_GROUP"));
            //fleF119_TITHE3.set_SetValue("REC_TYPE", !Fixed, fleF119_TOTITE.GetStringValue("REC_TYPE"));
            //fleF119_TITHE3.set_SetValue("REC_1", !Fixed, fleF119_TOTITE.GetStringValue("REC_1"));
            //fleF119_TITHE3.set_SetValue("AMT_MTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_MTD"));
            //fleF119_TITHE3.set_SetValue("AMT_YTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_YTD"));
            //fleF119_TITHE3.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            //fleF119_TITHE3.set_SetValue("TEXT", !Fixed, fleF119_TOTITE.GetStringValue("TEXT"));
            //fleF119_TITHE3.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            //fleF119_TITHE3.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            //fleF119_TITHE3.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF110_TOTITE_ADD_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:12:47 PM
    //#-----------------------------------------
    private void fleF110_TOTITE_ADD_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF110_TOTITE_ADD.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            fleF110_TOTITE_ADD.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            fleF110_TOTITE_ADD.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            fleF110_TOTITE_ADD.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            fleF110_TOTITE_ADD.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            fleF110_TOTITE_ADD.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            fleF110_TOTITE_ADD.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF110_TITHE1_ADD_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:12:50 PM
    //#-----------------------------------------
    private void fleF110_TITHE1_ADD_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF110_TITHE1_ADD.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            fleF110_TITHE1_ADD.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            fleF110_TITHE1_ADD.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            fleF110_TITHE1_ADD.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            fleF110_TITHE1_ADD.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            fleF110_TITHE1_ADD.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            fleF110_TITHE1_ADD.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));
            //TODO: Manual steps may be required.
            fleF110_TITHE1_ADD.set_SetValue("EP_NBR", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("EP_NBR"));
            fleF110_TITHE1_ADD.set_SetValue("COMP_TYPE", !Fixed, fleF110_TOTITE_ADD.GetStringValue("COMP_TYPE"));
            fleF110_TITHE1_ADD.set_SetValue("FACTOR", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("FACTOR"));
            fleF110_TITHE1_ADD.set_SetValue("FACTOR_OVERRIDE", !Fixed, fleF110_TOTITE_ADD.GetStringValue("FACTOR_OVERRIDE"));
            fleF110_TITHE1_ADD.set_SetValue("COMP_UNITS", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("COMP_UNITS"));
            fleF110_TITHE1_ADD.set_SetValue("AMT_GROSS", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("AMT_GROSS"));
            fleF110_TITHE1_ADD.set_SetValue("AMT_NET", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("AMT_NET"));
            fleF110_TITHE1_ADD.set_SetValue("EP_NBR_ENTRY", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("EP_NBR_ENTRY"));
            fleF110_TITHE1_ADD.set_SetValue("COMPENSATION_STATUS", !Fixed, fleF110_TOTITE_ADD.GetStringValue("COMPENSATION_STATUS"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF110_TITHE2_ADD_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:12:54 PM
    //#-----------------------------------------
    private void fleF110_TITHE2_ADD_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF110_TITHE2_ADD.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            fleF110_TITHE2_ADD.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            fleF110_TITHE2_ADD.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            fleF110_TITHE2_ADD.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            fleF110_TITHE2_ADD.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            fleF110_TITHE2_ADD.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            fleF110_TITHE2_ADD.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));
            //TODO: Manual steps may be required.
            fleF110_TITHE2_ADD.set_SetValue("EP_NBR", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("EP_NBR"));
            fleF110_TITHE2_ADD.set_SetValue("COMP_TYPE", !Fixed, fleF110_TOTITE_ADD.GetStringValue("COMP_TYPE"));
            fleF110_TITHE2_ADD.set_SetValue("FACTOR", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("FACTOR"));
            fleF110_TITHE2_ADD.set_SetValue("FACTOR_OVERRIDE", !Fixed, fleF110_TOTITE_ADD.GetStringValue("FACTOR_OVERRIDE"));
            fleF110_TITHE2_ADD.set_SetValue("COMP_UNITS", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("COMP_UNITS"));
            fleF110_TITHE2_ADD.set_SetValue("AMT_GROSS", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("AMT_GROSS"));
            fleF110_TITHE2_ADD.set_SetValue("AMT_NET", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("AMT_NET"));
            fleF110_TITHE2_ADD.set_SetValue("EP_NBR_ENTRY", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("EP_NBR_ENTRY"));
            fleF110_TITHE2_ADD.set_SetValue("COMPENSATION_STATUS", !Fixed, fleF110_TOTITE_ADD.GetStringValue("COMPENSATION_STATUS"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF110_TITHE3_ADD_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:12:58 PM
    //#-----------------------------------------
    private void fleF110_TITHE3_ADD_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF110_TITHE3_ADD.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            fleF110_TITHE3_ADD.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            fleF110_TITHE3_ADD.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            fleF110_TITHE3_ADD.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            fleF110_TITHE3_ADD.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            fleF110_TITHE3_ADD.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            fleF110_TITHE3_ADD.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));
            //TODO: Manual steps may be required.
            fleF110_TITHE3_ADD.set_SetValue("EP_NBR", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("EP_NBR"));
            fleF110_TITHE3_ADD.set_SetValue("COMP_TYPE", !Fixed, fleF110_TOTITE_ADD.GetStringValue("COMP_TYPE"));
            fleF110_TITHE3_ADD.set_SetValue("FACTOR", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("FACTOR"));
            fleF110_TITHE3_ADD.set_SetValue("FACTOR_OVERRIDE", !Fixed, fleF110_TOTITE_ADD.GetStringValue("FACTOR_OVERRIDE"));
            fleF110_TITHE3_ADD.set_SetValue("COMP_UNITS", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("COMP_UNITS"));
            fleF110_TITHE3_ADD.set_SetValue("AMT_GROSS", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("AMT_GROSS"));
            fleF110_TITHE3_ADD.set_SetValue("AMT_NET", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("AMT_NET"));
            fleF110_TITHE3_ADD.set_SetValue("EP_NBR_ENTRY", !Fixed, fleF110_TOTITE_ADD.GetDecimalValue("EP_NBR_ENTRY"));
            fleF110_TITHE3_ADD.set_SetValue("COMPENSATION_STATUS", !Fixed, fleF110_TOTITE_ADD.GetStringValue("COMPENSATION_STATUS"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF119_TITHE1_ADD_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:13:01 PM
    //#-----------------------------------------
    private void fleF119_TITHE1_ADD_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF119_TITHE1_ADD.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            fleF119_TITHE1_ADD.set_SetValue("DOC_OHIP_NBR", !Fixed, fleF119_TOTITE.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_TITHE1_ADD.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            fleF119_TITHE1_ADD.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            fleF119_TITHE1_ADD.set_SetValue("COMP_CODE_GROUP", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE_GROUP"));
            fleF119_TITHE1_ADD.set_SetValue("REC_TYPE", !Fixed, fleF119_TOTITE.GetStringValue("REC_TYPE"));
            fleF119_TITHE1_ADD.set_SetValue("REC_1", !Fixed, fleF119_TOTITE.GetStringValue("REC_1"));
            fleF119_TITHE1_ADD.set_SetValue("AMT_MTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_MTD"));
            fleF119_TITHE1_ADD.set_SetValue("AMT_YTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_YTD"));
            fleF119_TITHE1_ADD.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            fleF119_TITHE1_ADD.set_SetValue("TEXT", !Fixed, fleF119_TOTITE.GetStringValue("TEXT"));
            fleF119_TITHE1_ADD.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            fleF119_TITHE1_ADD.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            fleF119_TITHE1_ADD.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF119_TITHE2_ADD_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:13:05 PM
    //#-----------------------------------------
    private void fleF119_TITHE2_ADD_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF119_TITHE2_ADD.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            fleF119_TITHE2_ADD.set_SetValue("DOC_OHIP_NBR", !Fixed, fleF119_TOTITE.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_TITHE2_ADD.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            fleF119_TITHE2_ADD.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            fleF119_TITHE2_ADD.set_SetValue("COMP_CODE_GROUP", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE_GROUP"));
            fleF119_TITHE2_ADD.set_SetValue("REC_TYPE", !Fixed, fleF119_TOTITE.GetStringValue("REC_TYPE"));
            fleF119_TITHE2_ADD.set_SetValue("REC_1", !Fixed, fleF119_TOTITE.GetStringValue("REC_1"));
            fleF119_TITHE2_ADD.set_SetValue("AMT_MTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_MTD"));
            fleF119_TITHE2_ADD.set_SetValue("AMT_YTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_YTD"));
            fleF119_TITHE2_ADD.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            fleF119_TITHE2_ADD.set_SetValue("TEXT", !Fixed, fleF119_TOTITE.GetStringValue("TEXT"));
            fleF119_TITHE2_ADD.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            fleF119_TITHE2_ADD.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            fleF119_TITHE2_ADD.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF119_TITHE3_ADD_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:13:09 PM
    //#-----------------------------------------
    private void fleF119_TITHE3_ADD_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF119_TITHE3_ADD.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            fleF119_TITHE3_ADD.set_SetValue("DOC_OHIP_NBR", !Fixed, fleF119_TOTITE.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_TITHE3_ADD.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            fleF119_TITHE3_ADD.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            fleF119_TITHE3_ADD.set_SetValue("COMP_CODE_GROUP", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE_GROUP"));
            fleF119_TITHE3_ADD.set_SetValue("REC_TYPE", !Fixed, fleF119_TOTITE.GetStringValue("REC_TYPE"));
            fleF119_TITHE3_ADD.set_SetValue("REC_1", !Fixed, fleF119_TOTITE.GetStringValue("REC_1"));
            fleF119_TITHE3_ADD.set_SetValue("AMT_MTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_MTD"));
            fleF119_TITHE3_ADD.set_SetValue("AMT_YTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_YTD"));
            fleF119_TITHE3_ADD.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            fleF119_TITHE3_ADD.set_SetValue("TEXT", !Fixed, fleF119_TOTITE.GetStringValue("TEXT"));
            fleF119_TITHE3_ADD.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            fleF119_TITHE3_ADD.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            fleF119_TITHE3_ADD.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion


    #region "Transaction Management Procedures(U122B_CALC_TITHE_1_2_3_14)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:04 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleU122B_PRIM_DOC.Transaction = m_trnTRANS_UPDATE;
        fleCONSTANTS_MSTR_REC_6.Transaction = m_trnTRANS_UPDATE;
        fleF119_TOTITE.Transaction = m_trnTRANS_UPDATE;
        fleF119_TITHE1.Transaction = m_trnTRANS_UPDATE;
        fleF119_TITHE2.Transaction = m_trnTRANS_UPDATE;
        fleF119_TITHE3.Transaction = m_trnTRANS_UPDATE;
        fleBRAD_TITHE1.Transaction = m_trnTRANS_UPDATE;
        fleBRAD_TITHE2.Transaction = m_trnTRANS_UPDATE;
        fleBRAD_TITHE3.Transaction = m_trnTRANS_UPDATE;
        fleF119_TITHE_1_2_3_TRANS.Transaction = m_trnTRANS_UPDATE;
        fleF119TITHE2.Transaction = m_trnTRANS_UPDATE;
        fleF119TITHE3.Transaction = m_trnTRANS_UPDATE;
        fleF110_TOTITE_ADD.Transaction = m_trnTRANS_UPDATE;
        fleF110_TITHE1_ADD.Transaction = m_trnTRANS_UPDATE;
        fleF110_TITHE2_ADD.Transaction = m_trnTRANS_UPDATE;
        fleF110_TITHE3_ADD.Transaction = m_trnTRANS_UPDATE;
        fleF119_TITHE1_ADD.Transaction = m_trnTRANS_UPDATE;
        fleF119_TITHE2_ADD.Transaction = m_trnTRANS_UPDATE;
        fleF119_TITHE3_ADD.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_CALC_TITHE_1_2_3_14)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:05 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleU122B_PRIM_DOC.Dispose();
            fleCONSTANTS_MSTR_REC_6.Dispose();
            fleF119_TOTITE.Dispose();
            fleF119_TITHE1.Dispose();
            fleF119_TITHE2.Dispose();
            fleF119_TITHE3.Dispose();
            fleBRAD_TITHE1.Dispose();
            fleBRAD_TITHE2.Dispose();
            fleBRAD_TITHE3.Dispose();
            fleF119_TITHE_1_2_3_TRANS.Dispose();
            fleF119TITHE2.Dispose();
            fleF119TITHE3.Dispose();
            fleF110_TOTITE_ADD.Dispose();
            fleF110_TITHE1_ADD.Dispose();
            fleF110_TITHE2_ADD.Dispose();
            fleF110_TITHE3_ADD.Dispose();
            fleF119_TITHE1_ADD.Dispose();
            fleF119_TITHE2_ADD.Dispose();
            fleF119_TITHE3_ADD.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_CALC_TITHE_1_2_3_14)"


    public void Run()
    {
        try
        {
            Request("CALC_TITHE_1_2_3_14");

            while (fleU122B_PRIM_DOC.QTPForMissing())
            {
                // --> GET U122B_PRIM_DOC <--

                fleU122B_PRIM_DOC.GetData();
                // --> End GET U122B_PRIM_DOC <--


                if (fleU122B_PRIM_DOC.GetStringValue("DOC_NBR") == "10B")
                {
                    Console.WriteLine("Here");
                }

                while (fleCONSTANTS_MSTR_REC_6.QTPForMissing("1"))
                {
                    // --> GET CONSTANTS_MSTR_REC_6 <--
                    m_strWhere = new StringBuilder(" WHERE ");
                    m_strWhere.Append(" ").Append(fleCONSTANTS_MSTR_REC_6.ElementOwner("CONST_REC_NBR")).Append(" = ");
                    m_strWhere.Append((6));

                    fleCONSTANTS_MSTR_REC_6.GetData(m_strWhere.ToString());
                    // --> End GET CONSTANTS_MSTR_REC_6 <--

                    while (fleF119_TOTITE.QTPForMissing("2"))
                    {
                        // --> GET F119_TOTITE <--
                        m_strWhere = new StringBuilder(" WHERE ");
                        m_strWhere.Append(" ").Append(fleF119_TOTITE.ElementOwner("DOC_OHIP_NBR")).Append(" = ");
                        m_strWhere.Append((fleU122B_PRIM_DOC.GetDecimalValue("DOC_OHIP_NBR")));
                        m_strWhere.Append(" And ").Append(fleF119_TOTITE.ElementOwner("DOC_NBR")).Append(" = ");
                        m_strWhere.Append(Common.StringToField("000"));
                        m_strWhere.Append(" And ").Append(fleF119_TOTITE.ElementOwner("COMP_CODE")).Append(" = ");
                        m_strWhere.Append(Common.StringToField(fleU122B_PRIM_DOC.GetStringValue("COMP_CODE")));
                        m_strWhere.Append(" And ").Append(fleF119_TOTITE.ElementOwner("REC_TYPE")).Append(" = ");
                        m_strWhere.Append(Common.StringToField("D"));

                        fleF119_TOTITE.GetData(m_strWhere.ToString(), GetDataOptions.IsOptional);
                        // --> End GET F119_TOTITE <--

                        while (fleF119_TITHE1.QTPForMissing("3"))
                        {
                            // --> GET F119_TITHE1 <--
                            m_strWhere = new StringBuilder(" WHERE ");
                            m_strWhere.Append(" ").Append(fleF119_TITHE1.ElementOwner("DOC_OHIP_NBR")).Append(" = ");
                            m_strWhere.Append((fleU122B_PRIM_DOC.GetDecimalValue("DOC_OHIP_NBR")));
                            m_strWhere.Append(" And ").Append(fleF119_TITHE1.ElementOwner("DOC_NBR")).Append(" = ");
                            m_strWhere.Append(Common.StringToField("000"));
                            m_strWhere.Append(" And ").Append(fleF119_TITHE1.ElementOwner("COMP_CODE")).Append(" = ");
                            m_strWhere.Append(Common.StringToField(QDesign.NULL(X_COMP_CODE1.Value)));
                            m_strWhere.Append(" And ").Append(fleF119_TITHE1.ElementOwner("REC_TYPE")).Append(" = ");
                            m_strWhere.Append(Common.StringToField("D"));

                            fleF119_TITHE1.GetData(m_strWhere.ToString(), GetDataOptions.IsOptional);
                            // --> End GET F119_TITHE1 <--

                            while (fleF119_TITHE2.QTPForMissing("4"))
                            {
                                // --> GET F119_TITHE2 <--
                                m_strWhere = new StringBuilder(" WHERE ");
                                m_strWhere.Append(" ").Append(fleF119_TITHE2.ElementOwner("DOC_OHIP_NBR")).Append(" = ");
                                m_strWhere.Append((fleU122B_PRIM_DOC.GetDecimalValue("DOC_OHIP_NBR")));
                                m_strWhere.Append(" And ").Append(fleF119_TITHE2.ElementOwner("DOC_NBR")).Append(" = ");
                                m_strWhere.Append(Common.StringToField("000"));
                                m_strWhere.Append(" And ").Append(fleF119_TITHE2.ElementOwner("COMP_CODE")).Append(" = ");
                                m_strWhere.Append(Common.StringToField(QDesign.NULL(X_COMP_CODE2.Value)));
                                m_strWhere.Append(" And ").Append(fleF119_TITHE2.ElementOwner("REC_TYPE")).Append(" = ");
                                m_strWhere.Append(Common.StringToField("D"));

                                fleF119_TITHE2.GetData(m_strWhere.ToString(), GetDataOptions.IsOptional);
                                // --> End GET F119_TITHE2 <--

                                while (fleF119_TITHE3.QTPForMissing("5"))
                                {
                                    // --> GET F119_TITHE3 <--
                                    m_strWhere = new StringBuilder(" WHERE ");
                                    m_strWhere.Append(" ").Append(fleF119_TITHE3.ElementOwner("DOC_OHIP_NBR")).Append(" = ");
                                    m_strWhere.Append((fleU122B_PRIM_DOC.GetDecimalValue("DOC_OHIP_NBR")));
                                    m_strWhere.Append(" And ").Append(fleF119_TITHE3.ElementOwner("DOC_NBR")).Append(" = ");
                                    m_strWhere.Append(Common.StringToField("000"));
                                    m_strWhere.Append(" And ").Append(fleF119_TITHE3.ElementOwner("COMP_CODE")).Append(" = ");
                                    m_strWhere.Append(Common.StringToField(QDesign.NULL(X_COMP_CODE3.Value)));
                                    m_strWhere.Append(" And ").Append(fleF119_TITHE3.ElementOwner("REC_TYPE")).Append(" = ");
                                    m_strWhere.Append(Common.StringToField("D"));

                                    fleF119_TITHE3.GetData(m_strWhere.ToString(), GetDataOptions.IsOptional);
                                    // --> End GET F119_TITHE3 <--


                                    if (Transaction())
                                    {


                                        SubFile(ref m_trnTRANS_UPDATE, ref fleBRAD_TITHE1, SubFileType.Keep, fleU122B_PRIM_DOC, "DOC_NBR", "X_PRIMARY_DOC_NBR", "X_AMT_GROSS_SUMMARY_DOC", "DOC_OHIP_NBR", 
                                        fleF119_TOTITE, "AMT_YTD", fleU122B_PRIM_DOC, "X_AMT_NET", OLD_TOTITE_YTD, NEW_TOTITE_YTD, TOT1, TOT2, TOT3, AMT_TITHE1_ACTUAL_MTD,
                                        AMT_TITHE1_ACTUAL_YTD);



                                        SubFile(ref m_trnTRANS_UPDATE, ref fleBRAD_TITHE2, SubFileType.Keep, fleU122B_PRIM_DOC, "DOC_NBR", "X_PRIMARY_DOC_NBR", "X_AMT_GROSS_SUMMARY_DOC", "DOC_OHIP_NBR", 
                                        fleF119_TOTITE, "AMT_YTD", fleU122B_PRIM_DOC, "X_AMT_NET", OLD_TOTITE_YTD, NEW_TOTITE_YTD, TOT1, TOT2, TOT3, AMT_TITHE2_ACTUAL_MTD,
                                        AMT_TITHE2_ACTUAL_YTD);



                                        SubFile(ref m_trnTRANS_UPDATE, ref fleBRAD_TITHE3, SubFileType.Keep, fleU122B_PRIM_DOC, "DOC_NBR", "X_PRIMARY_DOC_NBR", "X_AMT_GROSS_SUMMARY_DOC", "DOC_OHIP_NBR", 
                                        fleF119_TOTITE, "AMT_YTD", fleU122B_PRIM_DOC, "X_AMT_NET", OLD_TOTITE_YTD, NEW_TOTITE_YTD, TOT1, TOT2, TOT3, AMT_TITHE3_ACTUAL_MTD,
                                        AMT_TITHE3_ACTUAL_YTD);



                                        SubFile(ref m_trnTRANS_UPDATE, ref fleF119_TITHE_1_2_3_TRANS, QDesign.NULL(AMT_TITHE1_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE1_ACTUAL_YTD.Value) != 0, SubFileType.Keep, fleU122B_PRIM_DOC, "DOC_OHIP_NBR", "X_PRIMARY_DOC_NBR", COMP_CODE1, COMP_SEQ1,
                                        COMP_GROUP1, X_REC_TYPE, AMT_TITHE1_ACTUAL_MTD, AMT_TITHE1_ACTUAL_YTD);



                                        SubFile(ref m_trnTRANS_UPDATE, ref fleF119TITHE2, QDesign.NULL(AMT_TITHE2_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE2_ACTUAL_YTD.Value) != 0, SubFileType.Keep, fleU122B_PRIM_DOC, "DOC_OHIP_NBR", "X_PRIMARY_DOC_NBR", COMP_CODE2, COMP_SEQ2,
                                        COMP_GROUP2, X_REC_TYPE, AMT_TITHE2_ACTUAL_MTD, AMT_TITHE2_ACTUAL_YTD);



                                        SubFile(ref m_trnTRANS_UPDATE, ref fleF119TITHE3, QDesign.NULL(AMT_TITHE3_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE3_ACTUAL_YTD.Value) != 0, SubFileType.Keep, fleU122B_PRIM_DOC, "DOC_OHIP_NBR", "X_PRIMARY_DOC_NBR", COMP_CODE3, COMP_SEQ3,
                                        COMP_GROUP3, X_REC_TYPE, AMT_TITHE3_ACTUAL_MTD, AMT_TITHE3_ACTUAL_YTD);



                                        fleF110_TOTITE_ADD.set_SetValue("DOC_NBR", fleU122B_PRIM_DOC.GetStringValue("DOC_NBR"));


                                        fleF110_TOTITE_ADD.set_SetValue("EP_NBR", fleCONSTANTS_MSTR_REC_6.GetDecimalValue("CURRENT_EP_NBR"));


                                        fleF110_TOTITE_ADD.set_SetValue("EP_NBR_ENTRY", fleCONSTANTS_MSTR_REC_6.GetDecimalValue("CURRENT_EP_NBR"));


                                        fleF110_TOTITE_ADD.set_SetValue("COMP_CODE", fleU122B_PRIM_DOC.GetStringValue("COMP_CODE"));

                                        if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
                                        {
                                            fleF110_TOTITE_ADD.set_SetValue("COMP_TYPE", QDesign.NULL(TOTITE_TYPE.Value));

                                        }
                                        else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
                                        {
                                            fleF110_TOTITE_ADD.set_SetValue("COMP_TYPE", QDesign.NULL(TOTITD_TYPE.Value));

                                        }

                                        if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
                                        {
                                            fleF110_TOTITE_ADD.set_SetValue("PROCESS_SEQ", TOTITE_SEQ.Value);

                                        }
                                        else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
                                        {
                                            fleF110_TOTITE_ADD.set_SetValue("PROCESS_SEQ", TOTITD_SEQ.Value);

                                        }


                                        fleF110_TOTITE_ADD.set_SetValue("FACTOR", 10000);


                                        fleF110_TOTITE_ADD.set_SetValue("FACTOR_OVERRIDE", " ");


                                        fleF110_TOTITE_ADD.set_SetValue("COMP_UNITS", 0);


                                        fleF110_TOTITE_ADD.set_SetValue("AMT_GROSS", NEW_TOTITE_MTD.Value);


                                        fleF110_TOTITE_ADD.set_SetValue("AMT_NET", NEW_TOTITE_YTD.Value);


                                        fleF110_TOTITE_ADD.set_SetValue("COMPENSATION_STATUS", " ");


                                        fleF110_TOTITE_ADD.set_SetValue("LAST_MOD_DATE", QDesign.SysDate(ref m_cnnQUERY));


                                        fleF110_TOTITE_ADD.OutPut(OutPutType.Add, null, 1 == 1);


                                        fleF110_TITHE1_ADD.set_SetValue("DOC_NBR", fleU122B_PRIM_DOC.GetStringValue("DOC_NBR"));


                                        fleF110_TITHE1_ADD.set_SetValue("EP_NBR", fleCONSTANTS_MSTR_REC_6.GetDecimalValue("CURRENT_EP_NBR"));


                                        fleF110_TITHE1_ADD.set_SetValue("EP_NBR_ENTRY", fleCONSTANTS_MSTR_REC_6.GetDecimalValue("CURRENT_EP_NBR"));


                                        fleF110_TITHE1_ADD.set_SetValue("COMP_CODE", COMP_CODE1.Value);

                                        if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
                                        {
                                            fleF110_TITHE1_ADD.set_SetValue("COMP_TYPE", QDesign.NULL(TITHE1_TYPE.Value));

                                        }
                                        else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
                                        {
                                            fleF110_TITHE1_ADD.set_SetValue("COMP_TYPE", QDesign.NULL(TITHD1_TYPE.Value));

                                        }


                                        fleF110_TITHE1_ADD.set_SetValue("PROCESS_SEQ", COMP_SEQ1.Value);


                                        fleF110_TITHE1_ADD.set_SetValue("FACTOR", 10000);


                                        fleF110_TITHE1_ADD.set_SetValue("FACTOR_OVERRIDE", " ");


                                        fleF110_TITHE1_ADD.set_SetValue("COMP_UNITS", 0);


                                        fleF110_TITHE1_ADD.set_SetValue("AMT_NET", AMT_TITHE1_ACTUAL_MTD.Value);


                                        fleF110_TITHE1_ADD.set_SetValue("AMT_GROSS", AMT_TITHE1_ACTUAL_YTD.Value);


                                        fleF110_TITHE1_ADD.set_SetValue("COMPENSATION_STATUS", " ");


                                        fleF110_TITHE1_ADD.set_SetValue("LAST_MOD_DATE", QDesign.SysDate(ref m_cnnQUERY));


                                        //fleF110_TITHE1_ADD.OutPut(OutPutType.Add, 1 == 1);
                                        fleF110_TITHE1_ADD.OutPut(OutPutType.Add, null, QDesign.NULL(AMT_TITHE1_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE1_ACTUAL_YTD.Value) != 0 & 1 == 1);




                                        fleF110_TITHE2_ADD.set_SetValue("DOC_NBR", fleU122B_PRIM_DOC.GetStringValue("DOC_NBR"));


                                        fleF110_TITHE2_ADD.set_SetValue("EP_NBR", fleCONSTANTS_MSTR_REC_6.GetDecimalValue("CURRENT_EP_NBR"));


                                        fleF110_TITHE2_ADD.set_SetValue("EP_NBR_ENTRY", fleCONSTANTS_MSTR_REC_6.GetDecimalValue("CURRENT_EP_NBR"));


                                        fleF110_TITHE2_ADD.set_SetValue("COMP_CODE", COMP_CODE2.Value);

                                        if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
                                        {
                                            fleF110_TITHE2_ADD.set_SetValue("COMP_TYPE", QDesign.NULL(TITHE2_TYPE.Value));

                                        }
                                        else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
                                        {
                                            fleF110_TITHE2_ADD.set_SetValue("COMP_TYPE", QDesign.NULL(TITHD2_TYPE.Value));

                                        }


                                        fleF110_TITHE2_ADD.set_SetValue("PROCESS_SEQ", COMP_SEQ2.Value);


                                        fleF110_TITHE2_ADD.set_SetValue("FACTOR", 10000);


                                        fleF110_TITHE2_ADD.set_SetValue("FACTOR_OVERRIDE", " ");


                                        fleF110_TITHE2_ADD.set_SetValue("COMP_UNITS", 0);


                                        fleF110_TITHE2_ADD.set_SetValue("AMT_NET", AMT_TITHE2_ACTUAL_MTD.Value);


                                        fleF110_TITHE2_ADD.set_SetValue("AMT_GROSS", AMT_TITHE2_ACTUAL_YTD.Value);


                                        fleF110_TITHE2_ADD.set_SetValue("COMPENSATION_STATUS", " ");


                                        fleF110_TITHE2_ADD.set_SetValue("LAST_MOD_DATE", QDesign.SysDate(ref m_cnnQUERY));


                                        fleF110_TITHE2_ADD.OutPut(OutPutType.Add, null, QDesign.NULL(AMT_TITHE2_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE2_ACTUAL_YTD.Value) != 0 & 1 == 1);




                                        fleF110_TITHE3_ADD.set_SetValue("DOC_NBR", fleU122B_PRIM_DOC.GetStringValue("DOC_NBR"));


                                        fleF110_TITHE3_ADD.set_SetValue("EP_NBR", fleCONSTANTS_MSTR_REC_6.GetDecimalValue("CURRENT_EP_NBR"));


                                        fleF110_TITHE3_ADD.set_SetValue("EP_NBR_ENTRY", fleCONSTANTS_MSTR_REC_6.GetDecimalValue("CURRENT_EP_NBR"));


                                        fleF110_TITHE3_ADD.set_SetValue("COMP_CODE", COMP_CODE3.Value);

                                        if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "A")
                                        {
                                            fleF110_TITHE3_ADD.set_SetValue("COMP_TYPE", QDesign.NULL(TITHE3_TYPE.Value));

                                        }
                                        else if (QDesign.NULL(QDesign.NULL(PAYROLL_FLAG.Value)) == "C")
                                        {
                                            fleF110_TITHE3_ADD.set_SetValue("COMP_TYPE", QDesign.NULL(TITHD3_TYPE.Value));

                                        }


                                        fleF110_TITHE3_ADD.set_SetValue("PROCESS_SEQ", COMP_SEQ3.Value);


                                        fleF110_TITHE3_ADD.set_SetValue("FACTOR", 10000);


                                        fleF110_TITHE3_ADD.set_SetValue("FACTOR_OVERRIDE", " ");


                                        fleF110_TITHE3_ADD.set_SetValue("COMP_UNITS", 0);


                                        fleF110_TITHE3_ADD.set_SetValue("AMT_NET", AMT_TITHE3_ACTUAL_MTD.Value);


                                        fleF110_TITHE3_ADD.set_SetValue("AMT_GROSS", AMT_TITHE3_ACTUAL_YTD.Value);


                                        fleF110_TITHE3_ADD.set_SetValue("COMPENSATION_STATUS", " ");


                                        fleF110_TITHE3_ADD.set_SetValue("LAST_MOD_DATE", QDesign.SysDate(ref m_cnnQUERY));


                                        fleF110_TITHE3_ADD.set_SetValue("LAST_MOD_TIME", QDesign.SysTime(ref m_cnnQUERY) / 10000);


                                        fleF110_TITHE3_ADD.set_SetValue("LAST_MOD_USER_ID", "U122B gen`d");


                                        fleF110_TITHE3_ADD.OutPut(OutPutType.Add, null, QDesign.NULL(AMT_TITHE3_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE3_ACTUAL_YTD.Value) != 0 & 1 == 1);




                                        fleF119_TITHE1.OutPut(OutPutType.Update, null, (QDesign.NULL(AMT_TITHE1_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE1_ACTUAL_YTD.Value) != 0) & 1 == 1 & fleF119_TITHE1.Exists());




                                        fleF119_TITHE1_ADD.OutPut(OutPutType.Add, null, (QDesign.NULL(AMT_TITHE1_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE1_ACTUAL_YTD.Value) != 0) & !fleF119_TITHE1.Exists() & 1 == 1);



                                        // Core.
                                        string x = fleF119_TITHE2.GetStringValue("DOC_NBR");
                                        decimal y = fleF119_TITHE2.GetDecimalValue("DOC_OHIP_NBR");
                                        fleF119_TITHE2.OutPut(OutPutType.Update, null, (QDesign.NULL(AMT_TITHE2_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE2_ACTUAL_YTD.Value) != 0) & 1 == 1 & fleF119_TITHE2.Exists());




                                        fleF119_TITHE2_ADD.OutPut(OutPutType.Add, null, (QDesign.NULL(AMT_TITHE2_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE2_ACTUAL_YTD.Value) != 0) & !fleF119_TITHE2.Exists() & 1 == 1);




                                        fleF119_TITHE3.OutPut(OutPutType.Update, null, (QDesign.NULL(AMT_TITHE3_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE3_ACTUAL_YTD.Value) != 0) & 1 == 1 & fleF119_TITHE3.Exists());




                                        fleF119_TITHE3_ADD.OutPut(OutPutType.Add, null, (QDesign.NULL(AMT_TITHE3_ACTUAL_MTD.Value) != 0 | QDesign.NULL(AMT_TITHE3_ACTUAL_YTD.Value) != 0) & !fleF119_TITHE3.Exists() & 1 == 1);


                                    }

                                }

                            }

                        }

                    }

                }

            }



        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);


        }
        finally
        {
            EndRequest("CALC_TITHE_1_2_3_14");

        }
    }




    #endregion


}
//CALC_TITHE_1_2_3_14



public class U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15 : U122B
{

    public U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15(string Name, int Level)
        : base(Name, Level, true)
    {
        this.ScreenType = ScreenTypes.QTP;
        fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "F119_TITHE_ONE_COMP_CODE_PER_DOC_NBR", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF119_TOTITE = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_TOTITE", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleF190_COMP_CODES = new SqlFileObject(this, FileTypes.Primary, 0, "[101C].INDEXED", "F190_COMP_CODES", "", false, false, false, 0, "m_trnTRANS_UPDATE");
        fleBRAD2 = new SqlFileObject(this, FileTypes.Primary, 0, "TEMPORARYDATA", "BRAD2", "", false, false, false, 0, "m_trnTRANS_UPDATE", FileType.SubFile);
        fleF119_TOTITE_ADD = new SqlFileObject(this, FileTypes.Primary, 0, "INDEXED", "F119_DOCTOR_YTD", "F119_TOTITE_ADD", false, false, false, 0, "m_trnTRANS_UPDATE");

        fleF119_TOTITE.SetItemFinals += fleF119_TOTITE_SetItemFinals;
        fleF119_TOTITE_ADD.SetItemFinals += fleF119_TOTITE_ADD_SetItemFinals;
        fleF190_COMP_CODES.InitializeItems += fleF190_COMP_CODES_AutomaticItemInitialization;
        fleF119_TOTITE_ADD.InitializeItems += fleF119_TOTITE_ADD_AutomaticItemInitialization;

        CODE.GetValue += CODE_GetValue;
        NET.GetValue += NET_GetValue;
        GROSS.GetValue += GROSS_GetValue;
        MTD.GetValue += MTD_GetValue;
        YTD.GetValue += YTD_GetValue;

    }


    #region "Declarations (Variables, Files and Transactions)(U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15)"

    private SqlFileObject fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR;
    private SqlFileObject fleF119_TOTITE;

    private void fleF119_TOTITE_SetItemFinals()
    {

        try
        {
            fleF119_TOTITE.set_SetValue("AMT_MTD", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS"));
            // CORE. Commented out. Doubled
            //fleF119_TOTITE.set_SetValue("AMT_MTD", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS"));
            fleF119_TOTITE.set_SetValue("AMT_YTD", fleF119_TOTITE.GetDecimalValue("AMT_YTD") + fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS"));
            // CORE. Commented out. Doubled
            //fleF119_TOTITE.set_SetValue("AMT_YTD", fleF119_TOTITE.GetDecimalValue("AMT_YTD") + fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS"));
        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }

    private SqlFileObject fleF190_COMP_CODES;
    public override bool SelectIf()
    {


        try
        {
            if (QDesign.NULL(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("DOC_NBR")) == "000" & (QDesign.NULL(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE")) == "TOTITD" | QDesign.NULL(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE")) == "TOTITE"))
            {
                return true;
            }

            return false;


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);
            return false;


        }
        catch (Exception ex)
        {
            WriteError(ex);
            return false;

        }

    }


    private SqlFileObject fleBRAD2;

    private SqlFileObject fleF119_TOTITE_ADD;

    private void fleF119_TOTITE_ADD_SetItemFinals()
    {

        try
        {
            fleF119_TOTITE_ADD.set_SetValue("DOC_OHIP_NBR", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_TOTITE_ADD.set_SetValue("DOC_NBR", "000");
            fleF119_TOTITE_ADD.set_SetValue("REC_TYPE", "D");
            fleF119_TOTITE_ADD.set_SetValue("COMP_CODE", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE"));
            fleF119_TOTITE_ADD.set_SetValue("PROCESS_SEQ", fleF190_COMP_CODES.GetDecimalValue("PROCESS_SEQ"));
            fleF119_TOTITE_ADD.set_SetValue("COMP_CODE_GROUP", fleF190_COMP_CODES.GetStringValue("COMP_CODE_GROUP"));
            fleF119_TOTITE_ADD.set_SetValue("AMT_MTD", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS"));
            fleF119_TOTITE_ADD.set_SetValue("AMT_YTD", fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS"));


        }
        catch (CustomApplicationException ex)
        {
            WriteError(ex);


        }
        catch (Exception ex)
        {
            WriteError(ex);

        }

    }

    private DCharacter CODE = new DCharacter("CODE", 6);
    private void CODE_GetValue(ref string Value)
    {
        try
        {
            Value = fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE");
        }

        catch (CustomApplicationException ex)
        {
            WriteError(ex);
        }

        catch (Exception ex)
        {
            WriteError(ex);
        }
    }

    private DDecimal NET = new DDecimal("NET", 10);
    private void NET_GetValue(ref decimal Value)
    {
        try
        {
            Value = fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_NET");
        }

        catch (CustomApplicationException ex)
        {
            WriteError(ex);
        }

        catch (Exception ex)
        {
            WriteError(ex);
        }
    }

    private DDecimal GROSS = new DDecimal("GROSS", 10);
    private void GROSS_GetValue(ref decimal Value)
    {
        try
        {
            Value = fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("X_AMT_GROSS");
        }

        catch (CustomApplicationException ex)
        {
            WriteError(ex);
        }

        catch (Exception ex)
        {
            WriteError(ex);
        }
    }

    private DDecimal MTD = new DDecimal("MTD", 10);
    private void MTD_GetValue(ref decimal Value)
    {
        try
        {
            Value = fleF119_TOTITE.GetDecimalValue("AMT_MTD");
        }

        catch (CustomApplicationException ex)
        {
            WriteError(ex);
        }

        catch (Exception ex)
        {
            WriteError(ex);
        }
    }

    private DDecimal YTD = new DDecimal("YTD", 10);
    private void YTD_GetValue(ref decimal Value)
    {
        try
        {
            Value = fleF119_TOTITE.GetDecimalValue("AMT_YTD");
        }

        catch (CustomApplicationException ex)
        {
            WriteError(ex);
        }

        catch (Exception ex)
        {
            WriteError(ex);
        }
    }

    #endregion


    #region "Standard Generated Procedures(U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15)"


    #region "Automatic Item Initialization(U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:13:13 PM

    //#-----------------------------------------
    //# fleF190_COMP_CODES_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:13:10 PM
    //#-----------------------------------------
    private void fleF190_COMP_CODES_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF190_COMP_CODES.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            fleF190_COMP_CODES.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            fleF190_COMP_CODES.set_SetValue("COMP_CODE_GROUP", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE_GROUP"));
            fleF190_COMP_CODES.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            fleF190_COMP_CODES.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            fleF190_COMP_CODES.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# fleF119_TOTITE_ADD_AutomaticItemInitialization Procedure
    //# Precompiler Ver.: 1.0.6387.27217  Generated on: 6/27/2017 4:13:13 PM
    //#-----------------------------------------
    private void fleF119_TOTITE_ADD_AutomaticItemInitialization(bool Fixed)
    {
        try
        {
            //TODO: Manual steps may be required.
            fleF119_TOTITE_ADD.set_SetValue("DOC_NBR", !Fixed, fleF119_TOTITE.GetStringValue("DOC_NBR"));
            fleF119_TOTITE_ADD.set_SetValue("DOC_OHIP_NBR", !Fixed, fleF119_TOTITE.GetDecimalValue("DOC_OHIP_NBR"));
            fleF119_TOTITE_ADD.set_SetValue("COMP_CODE", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE"));
            fleF119_TOTITE_ADD.set_SetValue("PROCESS_SEQ", !Fixed, fleF119_TOTITE.GetDecimalValue("PROCESS_SEQ"));
            fleF119_TOTITE_ADD.set_SetValue("COMP_CODE_GROUP", !Fixed, fleF119_TOTITE.GetStringValue("COMP_CODE_GROUP"));
            fleF119_TOTITE_ADD.set_SetValue("REC_TYPE", !Fixed, fleF119_TOTITE.GetStringValue("REC_TYPE"));
            fleF119_TOTITE_ADD.set_SetValue("REC_1", !Fixed, fleF119_TOTITE.GetStringValue("REC_1"));
            fleF119_TOTITE_ADD.set_SetValue("AMT_MTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_MTD"));
            fleF119_TOTITE_ADD.set_SetValue("AMT_YTD", !Fixed, fleF119_TOTITE.GetDecimalValue("AMT_YTD"));
            fleF119_TOTITE_ADD.set_SetValue("FILLER", !Fixed, fleF119_TOTITE.GetStringValue("FILLER"));
            fleF119_TOTITE_ADD.set_SetValue("TEXT", !Fixed, fleF119_TOTITE.GetStringValue("TEXT"));
            fleF119_TOTITE_ADD.set_SetValue("LAST_MOD_DATE", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_DATE"));
            fleF119_TOTITE_ADD.set_SetValue("LAST_MOD_TIME", !Fixed, fleF119_TOTITE.GetDecimalValue("LAST_MOD_TIME"));
            fleF119_TOTITE_ADD.set_SetValue("LAST_MOD_USER_ID", !Fixed, fleF119_TOTITE.GetStringValue("LAST_MOD_USER_ID"));

        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion


    #region "Transaction Management Procedures(U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:05 PM

    //#-----------------------------------------
    //# InitializeTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void InitializeTransactionObjects()
    {

        try
        {
            m_cnnTRANS_UPDATE = new SqlConnection(Common.GetSqlConnectionString());
            m_cnnTRANS_UPDATE.Open();
            m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
            m_cnnQUERY = new SqlConnection(Common.GetSqlConnectionString());


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseTransactionObjects Procedure.
    //#-----------------------------------------

    protected override void CloseTransactionObjects()
    {

        try
        {
            CloseFiles();

            if ((m_trnTRANS_UPDATE != null))
                m_trnTRANS_UPDATE.Dispose();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Close();
            if ((m_cnnTRANS_UPDATE != null))
                m_cnnTRANS_UPDATE.Dispose();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Close();
            if ((m_cnnQUERY != null))
                m_cnnQUERY.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }


    protected override void TRANS_UPDATE(TransactionMethods Method)
    {
        if (Method == TransactionMethods.Rollback)
        {
            m_trnTRANS_UPDATE.Rollback();
        }
        else
        {
            m_trnTRANS_UPDATE.Commit();
        }

        m_trnTRANS_UPDATE = m_cnnTRANS_UPDATE.BeginTransaction();
        Initialize_TRANS_UPDATE();

    }


    private void Initialize_TRANS_UPDATE()
    {
        fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.Transaction = m_trnTRANS_UPDATE;
        fleF119_TOTITE.Transaction = m_trnTRANS_UPDATE;
        fleF190_COMP_CODES.Transaction = m_trnTRANS_UPDATE;
        fleBRAD2.Transaction = m_trnTRANS_UPDATE;
        fleF119_TOTITE_ADD.Transaction = m_trnTRANS_UPDATE;


    }



    #endregion


    #region "FILE Management Procedures(U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15)"

    //# NOTE: This region is placeholder and is required by the RenaissanceArchitectPreCompilerAddIn.
    //# Do not delete, modify or move it.  Updated: 6/27/2017 4:12:05 PM

    //#-----------------------------------------
    //# InitializeFiles Procedure.
    //#-----------------------------------------

    protected override void InitializeFiles()
    {

        try
        {
            Initialize_TRANS_UPDATE();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }

    //#-----------------------------------------
    //# CloseFiles Procedure.
    //#-----------------------------------------

    protected override void CloseFiles()
    {

        try
        {
            fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.Dispose();
            fleF119_TOTITE.Dispose();
            fleF190_COMP_CODES.Dispose();
            fleBRAD2.Dispose();
            fleF119_TOTITE_ADD.Dispose();


        }
        catch (CustomApplicationException ex)
        {
            throw ex;


        }
        catch (Exception ex)
        {
            ExceptionManager.Publish(ex);
            throw ex;

        }

    }



    #endregion

    #endregion


    #region "Local Procedures (DESIGNERS, INTERNAL and INPUT, EDIT, PROCESS and OUTPUT)(U122B_ADD_SUMMARY_DOCTOR_RECS_TO_F119_15)"


    public void Run()
    {

        try
        {
            Request("ADD_SUMMARY_DOCTOR_RECS_TO_F119_15");

            while (fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.QTPForMissing())
            {
                // --> GET F119_TITHE_ONE_COMP_CODE_PER_DOC_NBR <--

                fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetData();
                // --> End GET F119_TITHE_ONE_COMP_CODE_PER_DOC_NBR <--

                while (fleF119_TOTITE.QTPForMissing("1"))
                {
                    // --> GET F119_TOTITE <--
                    m_strWhere = new StringBuilder(" WHERE ");
                    m_strWhere.Append(" ").Append(fleF119_TOTITE.ElementOwner("DOC_OHIP_NBR")).Append(" = ");
                    m_strWhere.Append((fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetDecimalValue("DOC_OHIP_NBR")));
                    m_strWhere.Append(" And ").Append(fleF119_TOTITE.ElementOwner("DOC_NBR")).Append(" = ");
                    m_strWhere.Append(Common.StringToField(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("DOC_NBR")));
                    m_strWhere.Append(" And ").Append(fleF119_TOTITE.ElementOwner("COMP_CODE")).Append(" = ");
                    m_strWhere.Append(Common.StringToField(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE")));
                    m_strWhere.Append(" And ").Append(fleF119_TOTITE.ElementOwner("REC_TYPE")).Append(" = ");
                    m_strWhere.Append(Common.StringToField("D"));

                    fleF119_TOTITE.GetData(m_strWhere.ToString(), GetDataOptions.IsOptional);
                    // --> End GET F119_TOTITE <--

                    while (fleF190_COMP_CODES.QTPForMissing("2"))
                    {
                        // --> GET F190_COMP_CODES <--
                        m_strWhere = new StringBuilder(" WHERE ");
                        m_strWhere.Append(" ").Append(fleF190_COMP_CODES.ElementOwner("COMP_CODE")).Append(" = ");
                        m_strWhere.Append(Common.StringToField(fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR.GetStringValue("COMP_CODE")));

                        fleF190_COMP_CODES.GetData(m_strWhere.ToString());
                        // --> End GET F190_COMP_CODES <--


                        if (Transaction())
                        {

                            if (Select_If())
                            {
                                SubFile(ref m_trnTRANS_UPDATE, ref fleBRAD2, SubFileType.Keep, fleF119_TITHE_ONE_COMP_CODE_PER_DOC_NBR, "DOC_NBR", CODE, NET, GROSS, MTD, YTD);

                                fleF119_TOTITE.OutPut(OutPutType.Update, null, 1 == 1 & fleF119_TOTITE.Exists());
                                fleF119_TOTITE_ADD.OutPut(OutPutType.Add, null, !fleF119_TOTITE.Exists() & 1 == 1);
                            }
                        }
                    }
                }
            }
        }

        catch (CustomApplicationException ex)
        {
            WriteError(ex);
        }

        catch (Exception ex)
        {
            WriteError(ex);
        }

        finally
        {
            EndRequest("ADD_SUMMARY_DOCTOR_RECS_TO_F119_15");
        }
    }

    #endregion


}
//ADD_SUMMARY_DOCTOR_RECS_TO_F119_15




