
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Collections.ObjectModel;
using Core.Windows.UI;
using RmaDAL;
using Core.ExceptionManagement;
using Core.Framework;
using Core.Framework.Core.Framework;
using Core.Windows.UI.Core.Windows;
using System.IO;
using System.Diagnostics;
using rma.Cobol;

namespace rma.Views
{
    public delegate void D001ExitCobolScreen();
    public delegate void D001RunExternalScreen();
    public delegate void D001Reload();
    public class D001ViewModel : CommonFunctionScr
    {
        public event D001ExitCobolScreen ExitCobol;
        public event D001RunExternalScreen RunExternalScreen;
        public event D001Reload ReloadScreen;
        public D001ViewModel()
        {
        }

        #region FD Section
        // FD: d001_batch_in_progress
        private D001_batch_in_progress_rec objD001_batch_in_progress_rec = null;
        private ObservableCollection<D001_batch_in_progress_rec> D001_batch_in_progress_rec_Collection;

        // FD: batch_ctrl_file	Copy : f001_batch_control_file.fd
        private F001_BATCH_CONTROL_FILE objBatctrl_rec = null;
        private ObservableCollection<F001_BATCH_CONTROL_FILE> Batctrl_rec_Collection;

        // FD: claims_mstr	Copy : f002_d001_claims_mstr.fd
        private Claims_mstr_rec objClaims_mstr_rec = null;
        private ObservableCollection<Claims_mstr_rec> Claims_mstr_rec_Collection;

        // FD: claims_mstr	Copy : f002_d001_claims_mstr.fd        
        private F002_CLAIMS_MSTR_HDR objClaims_mstr_hdr_rec = null;
        private ObservableCollection<F002_CLAIMS_MSTR_HDR> Claims_mstr_hdr_rec_Collection;

        private F002_CLAIMS_MSTR_DTL objClaims_mstr_dtl_rec = null;
        private ObservableCollection<F002_CLAIMS_MSTR_DTL> Claims_mstr_dtl_rec_Collection;

        private F002_CLAIMS_MSTR_DTL_DESC objF002_CLAIMS_MSTR_DTL_DESC = null;
        private ObservableCollection<F002_CLAIMS_MSTR_DTL_DESC> F002_CLAIMS_MSTR_DTL_DESC_Collection;

        // FD: pat_mstr	Copy : f010_patient_mstr.fd
        private F010_PAT_MSTR objPat_mstr_rec = null;
        private ObservableCollection<F010_PAT_MSTR> Pat_mstr_rec_Collection;

        // FD: doc_mstr	Copy : f020_doctor_mstr.fd
        private F020_DOCTOR_MSTR objDoc_mstr_rec = null;
        private ObservableCollection<F020_DOCTOR_MSTR> Doc_mstr_rec_Collection;

        private F020L_DOC_LOCATIONS objF020L_DOC_LOCATIONS = null;
        private ObservableCollection<F020L_DOC_LOCATIONS> F020L_DOC_LOCATIONS_Collection;

        private F020C_DOC_CLINIC_NEXT_BATCH_NBR objF020C_DOC_CLINIC_NEXT_BATCH_NBR = null;
        private ObservableCollection<F020C_DOC_CLINIC_NEXT_BATCH_NBR> F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection;

        // FD: loc_mstr	Copy : f030_locations_mstr.fd
        private F030_LOCATIONS_MSTR objLoc_mstr_rec = null;
        private ObservableCollection<F030_LOCATIONS_MSTR> Loc_mstr_rec_Collection;

        // FD: oma_fee_mstr	Copy : f040_oma_fee_mstr.fd
        private F040_OMA_FEE_MSTR objFee_mstr_rec = null;
        private ObservableCollection<F040_OMA_FEE_MSTR> Fee_mstr_rec_Collection;

        // FD: iconst_mstr	Copy : f090_constants_mstr.fd
        private ICONST_MSTR_REC objIconst_mstr_rec = null;
        private ObservableCollection<ICONST_MSTR_REC> Iconst_mstr_rec_Collection;

        // FD: iconst_mstr	Copy : f090_const_mstr_rec_2.ws
        private CONSTANTS_MSTR_REC_2 objConstants_mstr_rec_2 = null;
        private ObservableCollection<CONSTANTS_MSTR_REC_2> Constants_mstr_rec_2_Collection;

        // FD: diag_mstr	Copy : f091_diagnostic_codes.fd
        private F091_DIAG_CODES_MSTR objDiag_rec = null;
        private ObservableCollection<F091_DIAG_CODES_MSTR> Diag_rec_Collection;

        // FD: corrected_pat	Copy : f086_pat_id.fd
        private Pat_id_rec objPat_id_rec = null;
        private ObservableCollection<Pat_id_rec> Pat_id_rec_Collection;

        // FD: pat_elig_history	Copy : f011_pat_mstr_elig_history.fd
        private F011_PAT_MSTR_ELIG_HISTORY objF011_pat_mstr_elig_history_rec = null;
        private ObservableCollection<F011_PAT_MSTR_ELIG_HISTORY> F011_pat_mstr_elig_history_rec_Collection;

        // FD: rejected_claims	Copy : f085_rejected_claims.fd
        private REJECTED_CLAIMS objRejected_claims_rec = null;
        private ObservableCollection<REJECTED_CLAIMS> Rejected_claims_rec_Collection;

        // FD: msg_sub_mstr	Copy : f094_msg_sub_mstr.fd
        private F094_MSG_MSTR objMsg_sub_mstr_rec = null;
        private ObservableCollection<F094_MSG_MSTR> Msg_sub_mstr_rec_Collection;

        // FD: sli_oma_code_suff_mstr	Copy : f201_sli_oma_code_suff.fd
        private F201_SLI_OMA_CODE_SUFF objSli_oma_code_suff_rec = null;
        private ObservableCollection<F201_SLI_OMA_CODE_SUFF> Sli_oma_code_suff_rec_Collection;


        #endregion

        #region Properties
        private int _batctrl_agent_cd;
        public int batctrl_agent_cd
        {
            get
            {
                return _batctrl_agent_cd;
            }
            set
            {
                if (_batctrl_agent_cd != value)
                {
                    _batctrl_agent_cd = value;
                    RaisePropertyChanged("batctrl_agent_cd");
                }
            }
        }

        private decimal _batctrl_amt_act;
        public decimal batctrl_amt_act
        {
            get
            {
                return _batctrl_amt_act;
            }
            set
            {
                if (_batctrl_amt_act != value)
                {
                    _batctrl_amt_act = value;
                    RaisePropertyChanged("batctrl_amt_act");
                }
            }
        }

        private decimal _batctrl_amt_est;
        public decimal batctrl_amt_est
        {
            get
            {
                return _batctrl_amt_est;
            }
            set
            {
                if (_batctrl_amt_est != value)
                {
                    _batctrl_amt_est = value;
                    RaisePropertyChanged("batctrl_amt_est");
                }
            }
        }

        private int _batctrl_bat_clinic_nbr_1_2;
        public int batctrl_bat_clinic_nbr_1_2
        {
            get
            {
                return _batctrl_bat_clinic_nbr_1_2;
            }
            set
            {
                if (_batctrl_bat_clinic_nbr_1_2 != value)
                {
                    _batctrl_bat_clinic_nbr_1_2 = value;
                    RaisePropertyChanged("batctrl_bat_clinic_nbr_1_2");
                }
            }
        }

        private string _batctrl_bat_doc_nbr;
        public string batctrl_bat_doc_nbr
        {
            get
            {
                return _batctrl_bat_doc_nbr;
            }
            set
            {
                if (_batctrl_bat_doc_nbr != value)
                {
                    _batctrl_bat_doc_nbr = value;
                    _batctrl_bat_doc_nbr = _batctrl_bat_doc_nbr.ToUpper();
                    RaisePropertyChanged("batctrl_bat_doc_nbr");
                }
            }
        }

        private int _batctrl_bat_week_day_r;
        public int batctrl_bat_week_day_r
        {
            get
            {
                return _batctrl_bat_week_day_r;
            }
            set
            {
                if (_batctrl_bat_week_day_r != value)
                {
                    _batctrl_bat_week_day_r = value;
                    RaisePropertyChanged("batctrl_bat_week_day_r");
                }
            }
        }

        private int _batctrl_bat_week_day_d;
        public int batctrl_bat_week_day_d
        {
            get
            {
                return _batctrl_bat_week_day_d;
            }
            set
            {
                if (_batctrl_bat_week_day_d != value)
                {
                    _batctrl_bat_week_day_d = value;
                    RaisePropertyChanged("batctrl_bat_week_day_d");
                }
            }
        }

        private string _batctrl_batch_type;
        public string batctrl_batch_type
        {
            get
            {
                return _batctrl_batch_type;
            }
            set
            {
                if (_batctrl_batch_type != value)
                {
                    _batctrl_batch_type = value;
                    _batctrl_batch_type = _batctrl_batch_type.ToUpper();
                    RaisePropertyChanged("batctrl_batch_type");
                }
            }
        }

        private string _batctrl_clinic_nbr;
        public string batctrl_clinic_nbr
        {
            get
            {
                return _batctrl_clinic_nbr;
            }
            set
            {
                if (_batctrl_clinic_nbr != value)
                {
                    _batctrl_clinic_nbr = value;
                    _batctrl_clinic_nbr = _batctrl_clinic_nbr.ToUpper();
                    RaisePropertyChanged("batctrl_clinic_nbr");
                }
            }
        }

        private int _batctrl_cycle_nbr;
        public int batctrl_cycle_nbr
        {
            get
            {
                return _batctrl_cycle_nbr;
            }
            set
            {
                if (_batctrl_cycle_nbr != value)
                {
                    _batctrl_cycle_nbr = value;
                    RaisePropertyChanged("batctrl_cycle_nbr");
                }
            }
        }

        private int _batctrl_date_period_end_dd;
        public int batctrl_date_period_end_dd
        {
            get
            {
                return _batctrl_date_period_end_dd;
            }
            set
            {
                if (_batctrl_date_period_end_dd != value)
                {
                    _batctrl_date_period_end_dd = value;
                    RaisePropertyChanged("batctrl_date_period_end_dd");
                }
            }
        }

        private int _batctrl_date_period_end_mm;
        public int batctrl_date_period_end_mm
        {
            get
            {
                return _batctrl_date_period_end_mm;
            }
            set
            {
                if (_batctrl_date_period_end_mm != value)
                {
                    _batctrl_date_period_end_mm = value;
                    RaisePropertyChanged("batctrl_date_period_end_mm");
                }
            }
        }

        private int _batctrl_date_period_end_yy;
        public int batctrl_date_period_end_yy
        {
            get
            {
                return _batctrl_date_period_end_yy;
            }
            set
            {
                if (_batctrl_date_period_end_yy != value)
                {
                    _batctrl_date_period_end_yy = value;
                    RaisePropertyChanged("batctrl_date_period_end_yy");
                }
            }
        }

        private string _batctrl_i_o_pat_ind;
        public string batctrl_i_o_pat_ind
        {
            get
            {
                return _batctrl_i_o_pat_ind;
            }
            set
            {
                if (_batctrl_i_o_pat_ind != value)
                {
                    _batctrl_i_o_pat_ind = value;
                    _batctrl_i_o_pat_ind = _batctrl_i_o_pat_ind.ToUpper();
                    RaisePropertyChanged("batctrl_i_o_pat_ind");
                }
            }
        }

        private int _batctrl_last_claim_nbr;
        public int batctrl_last_claim_nbr
        {
            get
            {
                return _batctrl_last_claim_nbr;
            }
            set
            {
                if (_batctrl_last_claim_nbr != value)
                {
                    _batctrl_last_claim_nbr = value;
                    RaisePropertyChanged("batctrl_last_claim_nbr");
                }
            }
        }

        /* private int _batctrl_loc;
         public int batctrl_loc
         {
             get
             {
                 return _batctrl_loc;
             }
             set
             {
                 if (_batctrl_loc != value)
                 {
                     _batctrl_loc = value;
                     RaisePropertyChanged("batctrl_loc");
                 }
             }
         } */

        private string _batctrl_payroll;
        public string batctrl_payroll
        {
            get
            {
                return _batctrl_payroll;
            }
            set
            {
                if (_batctrl_payroll != value)
                {
                    _batctrl_payroll = value;
                    _batctrl_payroll = _batctrl_payroll.ToUpper();
                    RaisePropertyChanged("batctrl_payroll");
                }
            }
        }

        private int _batctrl_svc_act;
        public int batctrl_svc_act
        {
            get
            {
                return _batctrl_svc_act;
            }
            set
            {
                if (_batctrl_svc_act != value)
                {
                    _batctrl_svc_act = value;
                    RaisePropertyChanged("batctrl_svc_act");
                }
            }
        }

        private int _batctrl_svc_est;
        public int batctrl_svc_est
        {
            get
            {
                return _batctrl_svc_est;
            }
            set
            {
                if (_batctrl_svc_est != value)
                {
                    _batctrl_svc_est = value;
                    RaisePropertyChanged("batctrl_svc_est");
                }
            }
        }

        private string _change_reply;
        public string change_reply
        {
            get
            {
                return _change_reply;
            }
            set
            {
                if (_change_reply != value)
                {
                    _change_reply = value;
                    _change_reply = _change_reply.ToUpper();
                    RaisePropertyChanged("change_reply");
                }
            }
        }

        private int _clmhdr_batch_nbr_7_9;
        public int clmhdr_batch_nbr_7_9
        {
            get
            {
                return _clmhdr_batch_nbr_7_9;
            }
            set
            {
                if (_clmhdr_batch_nbr_7_9 != value)
                {
                    _clmhdr_batch_nbr_7_9 = value;
                    RaisePropertyChanged("clmhdr_batch_nbr_7_9");
                }
            }
        }

        private int _clmhdr_clinic_nbr_1_2;
        public int clmhdr_clinic_nbr_1_2
        {
            get
            {
                return _clmhdr_clinic_nbr_1_2;
            }
            set
            {
                if (_clmhdr_clinic_nbr_1_2 != value)
                {
                    _clmhdr_clinic_nbr_1_2 = value;
                    RaisePropertyChanged("clmhdr_clinic_nbr_1_2");
                }
            }
        }

        private int _clmhdr_date_admit_dd;
        public int clmhdr_date_admit_dd
        {
            get
            {
                return _clmhdr_date_admit_dd;
            }
            set
            {
                if (_clmhdr_date_admit_dd != value)
                {
                    _clmhdr_date_admit_dd = value;
                    RaisePropertyChanged("clmhdr_date_admit_dd");
                }
            }
        }

        private int _clmhdr_date_admit_mm;
        public int clmhdr_date_admit_mm
        {
            get
            {
                return _clmhdr_date_admit_mm;
            }
            set
            {
                if (_clmhdr_date_admit_mm != value)
                {
                    _clmhdr_date_admit_mm = value;
                    RaisePropertyChanged("clmhdr_date_admit_mm");
                }
            }
        }

        private int _clmhdr_date_admit_yy_12;
        public int clmhdr_date_admit_yy_12
        {
            get
            {
                return _clmhdr_date_admit_yy_12;
            }
            set
            {
                if (_clmhdr_date_admit_yy_12 != value)
                {
                    _clmhdr_date_admit_yy_12 = value;
                    RaisePropertyChanged("clmhdr_date_admit_yy_12");
                }
            }
        }

        private int _clmhdr_date_admit_yy_34;
        public int clmhdr_date_admit_yy_34
        {
            get
            {
                return _clmhdr_date_admit_yy_34;
            }
            set
            {
                if (_clmhdr_date_admit_yy_34 != value)
                {
                    _clmhdr_date_admit_yy_34 = value;
                    RaisePropertyChanged("clmhdr_date_admit_yy_34");
                }
            }
        }

        private int _clmhdr_diag_cd;
        public int clmhdr_diag_cd
        {
            get
            {
                return _clmhdr_diag_cd;
            }
            set
            {
                if (_clmhdr_diag_cd != value)
                {
                    _clmhdr_diag_cd = value;
                    RaisePropertyChanged("clmhdr_diag_cd");
                }
            }
        }

        private string _clmhdr_doc_nbr;
        public string clmhdr_doc_nbr
        {
            get
            {
                return _clmhdr_doc_nbr;
            }
            set
            {
                if (_clmhdr_doc_nbr != value)
                {
                    _clmhdr_doc_nbr = value;
                    _clmhdr_doc_nbr = _clmhdr_doc_nbr.ToUpper();
                    RaisePropertyChanged("clmhdr_doc_nbr");
                }
            }
        }

        private string _clmhdr_i_o_pat_ind;
        public string clmhdr_i_o_pat_ind
        {
            get
            {
                return _clmhdr_i_o_pat_ind;
            }
            set
            {
                if (_clmhdr_i_o_pat_ind != value)
                {
                    _clmhdr_i_o_pat_ind = value;
                    _clmhdr_i_o_pat_ind = _clmhdr_i_o_pat_ind.ToUpper();
                    RaisePropertyChanged("clmhdr_i_o_pat_ind");
                }
            }
        }

        private string _clmhdr_loc;
        public string clmhdr_loc
        {
            get
            {
                return _clmhdr_loc;
            }
            set
            {
                if (_clmhdr_loc != value)
                {
                    _clmhdr_loc = value;
                    _clmhdr_loc = _clmhdr_loc.ToUpper();
                    RaisePropertyChanged("clmhdr_loc");
                }
            }
        }

        private string _clmhdr_manual_review;
        public string clmhdr_manual_review
        {
            get
            {
                return _clmhdr_manual_review;
            }
            set
            {
                if (_clmhdr_manual_review != value)
                {
                    _clmhdr_manual_review = value;
                    _clmhdr_manual_review = _clmhdr_manual_review.ToUpper();
                    RaisePropertyChanged("clmhdr_manual_review");
                }
            }
        }

        private string _clmhdr_msg_nbr;
        public string clmhdr_msg_nbr
        {
            get
            {
                return _clmhdr_msg_nbr;
            }
            set
            {
                if (_clmhdr_msg_nbr != value)
                {
                    _clmhdr_msg_nbr = value;
                    _clmhdr_msg_nbr = _clmhdr_msg_nbr.ToUpper();
                    RaisePropertyChanged("clmhdr_msg_nbr");
                }
            }
        }

        private string _clmhdr_pat_acronym6;
        public string clmhdr_pat_acronym6
        {
            get
            {
                return _clmhdr_pat_acronym6;
            }
            set
            {
                if (_clmhdr_pat_acronym6 != value)
                {
                    _clmhdr_pat_acronym6 = value;
                    _clmhdr_pat_acronym6 = _clmhdr_pat_acronym6.ToUpper();
                    RaisePropertyChanged("clmhdr_pat_acronym6");
                }
            }
        }

        private string _clmhdr_payroll;
        public string clmhdr_payroll
        {
            get
            {
                return _clmhdr_payroll;
            }
            set
            {
                if (_clmhdr_payroll != value)
                {
                    _clmhdr_payroll = value;
                    _clmhdr_payroll = _clmhdr_payroll.ToUpper();
                    RaisePropertyChanged("clmhdr_payroll");
                }
            }
        }

        private int _clmhdr_refer_doc_nbr;
        public int clmhdr_refer_doc_nbr
        {
            get
            {
                return _clmhdr_refer_doc_nbr;
            }
            set
            {
                if (_clmhdr_refer_doc_nbr != value)
                {
                    _clmhdr_refer_doc_nbr = value;
                    RaisePropertyChanged("clmhdr_refer_doc_nbr");
                }
            }
        }

        private string _clmhdr_sub_nbr;
        public string clmhdr_sub_nbr
        {
            get
            {
                return _clmhdr_sub_nbr;
            }
            set
            {
                if (_clmhdr_sub_nbr != value)
                {
                    _clmhdr_sub_nbr = value;
                    _clmhdr_sub_nbr = _clmhdr_sub_nbr.ToUpper();
                    RaisePropertyChanged("clmhdr_sub_nbr");
                }
            }
        }

        private string _confirm_space;
        public string confirm_space
        {
            get
            {
                return _confirm_space;
            }
            set
            {
                if (_confirm_space != value)
                {
                    _confirm_space = value;
                    _confirm_space = _confirm_space.ToUpper();
                    RaisePropertyChanged("confirm_space");
                }
            }
        }

        private string _process_batch;
        public string process_batch
        {
            get
            {
                return _process_batch;
            }
            set
            {
                if (_process_batch != value)
                {
                    _process_batch = value;
                    _process_batch = _process_batch.ToUpper();
                    RaisePropertyChanged("process_batch");
                }
            }
        }

        private string _continue_reply;
        public string continue_reply
        {
            get
            {
                return _continue_reply;
            }
            set
            {
                if (_continue_reply != value)
                {
                    _continue_reply = value;
                    _continue_reply = _continue_reply.ToUpper();
                    RaisePropertyChanged("continue_reply");
                }
            }
        }

        private int _ctr_read_batctrl_mstr;
        public int ctr_read_batctrl_mstr
        {
            get
            {
                return _ctr_read_batctrl_mstr;
            }
            set
            {
                if (_ctr_read_batctrl_mstr != value)
                {
                    _ctr_read_batctrl_mstr = value;
                    RaisePropertyChanged("ctr_read_batctrl_mstr");
                }
            }
        }

        private int _ctr_read_claims_mstr;
        public int ctr_read_claims_mstr
        {
            get
            {
                return _ctr_read_claims_mstr;
            }
            set
            {
                if (_ctr_read_claims_mstr != value)
                {
                    _ctr_read_claims_mstr = value;
                    RaisePropertyChanged("ctr_read_claims_mstr");
                }
            }
        }

        private int _ctr_read_const_mstr;
        public int ctr_read_const_mstr
        {
            get
            {
                return _ctr_read_const_mstr;
            }
            set
            {
                if (_ctr_read_const_mstr != value)
                {
                    _ctr_read_const_mstr = value;
                    RaisePropertyChanged("ctr_read_const_mstr");
                }
            }
        }

        private int _ctr_read_doc_mstr;
        public int ctr_read_doc_mstr
        {
            get
            {
                return _ctr_read_doc_mstr;
            }
            set
            {
                if (_ctr_read_doc_mstr != value)
                {
                    _ctr_read_doc_mstr = value;
                    RaisePropertyChanged("ctr_read_doc_mstr");
                }
            }
        }

        private int _ctr_read_loc_mstr;
        public int ctr_read_loc_mstr
        {
            get
            {
                return _ctr_read_loc_mstr;
            }
            set
            {
                if (_ctr_read_loc_mstr != value)
                {
                    _ctr_read_loc_mstr = value;
                    RaisePropertyChanged("ctr_read_loc_mstr");
                }
            }
        }

        private int _ctr_read_msg_sub_mstr;
        public int ctr_read_msg_sub_mstr
        {
            get
            {
                return _ctr_read_msg_sub_mstr;
            }
            set
            {
                if (_ctr_read_msg_sub_mstr != value)
                {
                    _ctr_read_msg_sub_mstr = value;
                    RaisePropertyChanged("ctr_read_msg_sub_mstr");
                }
            }
        }

        private int _ctr_read_oma_mstr;
        public int ctr_read_oma_mstr
        {
            get
            {
                return _ctr_read_oma_mstr;
            }
            set
            {
                if (_ctr_read_oma_mstr != value)
                {
                    _ctr_read_oma_mstr = value;
                    RaisePropertyChanged("ctr_read_oma_mstr");
                }
            }
        }

        private int _ctr_read_pat_mstr;
        public int ctr_read_pat_mstr
        {
            get
            {
                return _ctr_read_pat_mstr;
            }
            set
            {
                if (_ctr_read_pat_mstr != value)
                {
                    _ctr_read_pat_mstr = value;
                    RaisePropertyChanged("ctr_read_pat_mstr");
                }
            }
        }

        private int _ctr_rewrit_batctrl_file;
        public int ctr_rewrit_batctrl_file
        {
            get
            {
                return _ctr_rewrit_batctrl_file;
            }
            set
            {
                if (_ctr_rewrit_batctrl_file != value)
                {
                    _ctr_rewrit_batctrl_file = value;
                    RaisePropertyChanged("ctr_rewrit_batctrl_file");
                }
            }
        }

        private int _ctr_writ_batctrl_file;
        public int ctr_writ_batctrl_file
        {
            get
            {
                return _ctr_writ_batctrl_file;
            }
            set
            {
                if (_ctr_writ_batctrl_file != value)
                {
                    _ctr_writ_batctrl_file = value;
                    RaisePropertyChanged("ctr_writ_batctrl_file");
                }
            }
        }

        private int _ctr_writ_claims_mstr;
        public int ctr_writ_claims_mstr
        {
            get
            {
                return _ctr_writ_claims_mstr;
            }
            set
            {
                if (_ctr_writ_claims_mstr != value)
                {
                    _ctr_writ_claims_mstr = value;
                    RaisePropertyChanged("ctr_writ_claims_mstr");
                }
            }
        }

        private int _ctr_write_corrected_pat;
        public int ctr_write_corrected_pat
        {
            get
            {
                return _ctr_write_corrected_pat;
            }
            set
            {
                if (_ctr_write_corrected_pat != value)
                {
                    _ctr_write_corrected_pat = value;
                    RaisePropertyChanged("ctr_write_corrected_pat");
                }
            }
        }

        private string _def_claim_source;
        public string def_claim_source
        {
            get
            {
                return _def_claim_source;
            }
            set
            {
                if (_def_claim_source != value)
                {
                    _def_claim_source = value;
                    _def_claim_source = _def_claim_source.ToUpper();
                    RaisePropertyChanged("def_claim_source");
                }
            }
        }

        private string _err_msg_comment;
        public string err_msg_comment
        {
            get
            {
                return _err_msg_comment;
            }
            set
            {
                if (_err_msg_comment != value)
                {
                    _err_msg_comment = value;
                    _err_msg_comment = _err_msg_comment.ToUpper();
                    RaisePropertyChanged("err_msg_comment");
                }
            }
        }

        private string _flag_accept;
        public string flag_accept
        {
            get
            {
                return _flag_accept;
            }
            set
            {
                if (_flag_accept != value)
                {
                    _flag_accept = value;
                    _flag_accept = _flag_accept.ToUpper();
                    RaisePropertyChanged("flag_accept");
                }
            }
        }

        private string _hold_desc_1;
        public string hold_desc_1
        {
            get
            {
                return _hold_desc_1;
            }
            set
            {
                if (_hold_desc_1 != value)
                {
                    _hold_desc_1 = value;
                    _hold_desc_1 = _hold_desc_1.ToUpper();
                    RaisePropertyChanged("hold_desc_1");
                }
            }
        }

        private string _hold_desc_2;
        public string hold_desc_2
        {
            get
            {
                return _hold_desc_2;
            }
            set
            {
                if (_hold_desc_2 != value)
                {
                    _hold_desc_2 = value;
                    _hold_desc_2 = _hold_desc_2.ToUpper();
                    RaisePropertyChanged("hold_desc_2");
                }
            }
        }

        private string _hold_desc_3;
        public string hold_desc_3
        {
            get
            {
                return _hold_desc_3;
            }
            set
            {
                if (_hold_desc_3 != value)
                {
                    _hold_desc_3 = value;
                    _hold_desc_3 = _hold_desc_3.ToUpper();
                    RaisePropertyChanged("hold_desc_3");
                }
            }
        }

        private string _hold_desc_4;
        public string hold_desc_4
        {
            get
            {
                return _hold_desc_4;
            }
            set
            {
                if (_hold_desc_4 != value)
                {
                    _hold_desc_4 = value;
                    _hold_desc_4 = _hold_desc_4.ToUpper();
                    RaisePropertyChanged("hold_desc_4");
                }
            }
        }

        private string _hold_desc_5;
        public string hold_desc_5
        {
            get
            {
                return _hold_desc_5;
            }
            set
            {
                if (_hold_desc_5 != value)
                {
                    _hold_desc_5 = value;
                    _hold_desc_5 = _hold_desc_5.ToUpper();
                    RaisePropertyChanged("hold_desc_5");
                }
            }
        }

        private int _hold_last_birth_dd;
        public int hold_last_birth_dd
        {
            get
            {
                return _hold_last_birth_dd;
            }
            set
            {
                if (_hold_last_birth_dd != value)
                {
                    _hold_last_birth_dd = value;
                    RaisePropertyChanged("hold_last_birth_dd");
                }
            }
        }

        private int _hold_last_birth_mm;
        public int hold_last_birth_mm
        {
            get
            {
                return _hold_last_birth_mm;
            }
            set
            {
                if (_hold_last_birth_mm != value)
                {
                    _hold_last_birth_mm = value;
                    RaisePropertyChanged("hold_last_birth_mm");
                }
            }
        }

        private int _hold_last_birth_yy_34;
        public int hold_last_birth_yy_34
        {
            get
            {
                return _hold_last_birth_yy_34;
            }
            set
            {
                if (_hold_last_birth_yy_34 != value)
                {
                    _hold_last_birth_yy_34 = value;
                    RaisePropertyChanged("hold_last_birth_yy_34");
                }
            }
        }

        private int _hold_last_elig_mail_dd;
        public int hold_last_elig_mail_dd
        {
            get
            {
                return _hold_last_elig_mail_dd;
            }
            set
            {
                if (_hold_last_elig_mail_dd != value)
                {
                    _hold_last_elig_mail_dd = value;
                    RaisePropertyChanged("hold_last_elig_mail_dd");
                }
            }
        }

        private int _hold_last_elig_mail_mm;
        public int hold_last_elig_mail_mm
        {
            get
            {
                return _hold_last_elig_mail_mm;
            }
            set
            {
                if (_hold_last_elig_mail_mm != value)
                {
                    _hold_last_elig_mail_mm = value;
                    RaisePropertyChanged("hold_last_elig_mail_mm");
                }
            }
        }

        private int _hold_last_elig_mail_yy_34;
        public int hold_last_elig_mail_yy_34
        {
            get
            {
                return _hold_last_elig_mail_yy_34;
            }
            set
            {
                if (_hold_last_elig_mail_yy_34 != value)
                {
                    _hold_last_elig_mail_yy_34 = value;
                    RaisePropertyChanged("hold_last_elig_mail_yy_34");
                }
            }
        }

        private int _hold_last_elig_maint_dd;
        public int hold_last_elig_maint_dd
        {
            get
            {
                return _hold_last_elig_maint_dd;
            }
            set
            {
                if (_hold_last_elig_maint_dd != value)
                {
                    _hold_last_elig_maint_dd = value;
                    RaisePropertyChanged("hold_last_elig_maint_dd");
                }
            }
        }

        private int _hold_last_elig_maint_mm;
        public int hold_last_elig_maint_mm
        {
            get
            {
                return _hold_last_elig_maint_mm;
            }
            set
            {
                if (_hold_last_elig_maint_mm != value)
                {
                    _hold_last_elig_maint_mm = value;
                    RaisePropertyChanged("hold_last_elig_maint_mm");
                }
            }
        }

        private int _hold_last_elig_maint_yy_34;
        public int hold_last_elig_maint_yy_34
        {
            get
            {
                return _hold_last_elig_maint_yy_34;
            }
            set
            {
                if (_hold_last_elig_maint_yy_34 != value)
                {
                    _hold_last_elig_maint_yy_34 = value;
                    RaisePropertyChanged("hold_last_elig_maint_yy_34");
                }
            }
        }

        private string _last_claim_flag;
        public string last_claim_flag
        {
            get
            {
                return _last_claim_flag;
            }
            set
            {
                if (_last_claim_flag != value)
                {
                    _last_claim_flag = value;
                    _last_claim_flag = _last_claim_flag.ToUpper();
                    RaisePropertyChanged("last_claim_flag");
                }
            }
        }

        private string _option;
        public string option
        {
            get
            {
                return _option;
            }
            set
            {
                if (_option != value)
                {
                    _option = value;
                    _option = _option.ToUpper();
                    RaisePropertyChanged("option");
                }
            }
        }

        private string _password_input;
        public string password_input
        {
            get
            {
                return _password_input;
            }
            set
            {
                if (_password_input != value)
                {
                    _password_input = value;
                    _password_input = _password_input.ToUpper();
                    RaisePropertyChanged("password_input");
                }
            }
        }

        private string _reply_create_pat;
        public string reply_create_pat
        {
            get
            {
                return _reply_create_pat;
            }
            set
            {
                if (_reply_create_pat != value)
                {
                    _reply_create_pat = value;
                    _reply_create_pat = _reply_create_pat.ToUpper();
                    RaisePropertyChanged("reply_create_pat");
                }
            }
        }

        private string _status_cobol_display;
        public string status_cobol_display
        {
            get
            {
                return _status_cobol_display;
            }
            set
            {
                if (_status_cobol_display != value)
                {
                    _status_cobol_display = value;
                    _status_cobol_display = _status_cobol_display.ToUpper();
                    RaisePropertyChanged("status_cobol_display");
                }
            }
        }

        private int _sys_dd;
        public int sys_dd
        {
            get
            {
                return _sys_dd;
            }
            set
            {
                if (_sys_dd != value)
                {
                    _sys_dd = value;
                    RaisePropertyChanged("sys_dd");
                }
            }
        }

        private int _sys_hrs;
        public int sys_hrs
        {
            get
            {
                return _sys_hrs;
            }
            set
            {
                if (_sys_hrs != value)
                {
                    _sys_hrs = value;
                    RaisePropertyChanged("sys_hrs");
                }
            }
        }

        private int _sys_min;
        public int sys_min
        {
            get
            {
                return _sys_min;
            }
            set
            {
                if (_sys_min != value)
                {
                    _sys_min = value;
                    RaisePropertyChanged("sys_min");
                }
            }
        }

        private int _sys_mm;
        public int sys_mm
        {
            get
            {
                return _sys_mm;
            }
            set
            {
                if (_sys_mm != value)
                {
                    _sys_mm = value;
                    RaisePropertyChanged("sys_mm");
                }
            }
        }

        private int _sys_yy;
        public int sys_yy
        {
            get
            {
                return _sys_yy;
            }
            set
            {
                if (_sys_yy != value)
                {
                    _sys_yy = value;
                    RaisePropertyChanged("sys_yy");
                }
            }
        }


        private decimal _ws_batctrl_amt_diff;
        public decimal ws_batctrl_amt_diff
        {
            get
            {
                return _ws_batctrl_amt_diff;
            }
            set
            {
                if (_ws_batctrl_amt_diff != value)
                {
                    _ws_batctrl_amt_diff = value;
                    RaisePropertyChanged("ws_batctrl_amt_diff");
                }
            }
        }

        private int _ws_batctrl_svc_diff;
        public int ws_batctrl_svc_diff
        {
            get
            {
                return _ws_batctrl_svc_diff;
            }
            set
            {
                if (_ws_batctrl_svc_diff != value)
                {
                    _ws_batctrl_svc_diff = value;
                    RaisePropertyChanged("ws_batctrl_svc_diff");
                }
            }
        }

        private string _ws_clmhdr_hosp;
        public string ws_clmhdr_hosp
        {
            get
            {
                return _ws_clmhdr_hosp;
            }
            set
            {
                if (_ws_clmhdr_hosp != value)
                {
                    _ws_clmhdr_hosp = value;
                    _ws_clmhdr_hosp = _ws_clmhdr_hosp.ToUpper();
                    RaisePropertyChanged("ws_clmhdr_hosp");
                }
            }
        }

        private string _ws_disp_pat_key_type;
        public string ws_disp_pat_key_type
        {
            get
            {
                return _ws_disp_pat_key_type;
            }
            set
            {
                if (_ws_disp_pat_key_type != value)
                {
                    _ws_disp_pat_key_type = value;
                    _ws_disp_pat_key_type = _ws_disp_pat_key_type.ToUpper();
                    RaisePropertyChanged("ws_disp_pat_key_type");
                }
            }
        }

        private int _ws_doc_spec_cd;
        public int ws_doc_spec_cd
        {
            get
            {
                return _ws_doc_spec_cd;
            }
            set
            {
                if (_ws_doc_spec_cd != value)
                {
                    _ws_doc_spec_cd = value;
                    RaisePropertyChanged("ws_doc_spec_cd");
                }
            }
        }

        private string _ws_file_err_msg;
        public string ws_file_err_msg
        {
            get
            {
                return _ws_file_err_msg;
            }
            set
            {
                if (_ws_file_err_msg != value)
                {
                    _ws_file_err_msg = value;
                    _ws_file_err_msg = _ws_file_err_msg.ToUpper();
                    RaisePropertyChanged("ws_file_err_msg");
                }
            }
        }

        private int _ws_highest_grp_nbr;
        public int ws_highest_grp_nbr
        {
            get
            {
                return _ws_highest_grp_nbr;
            }
            set
            {
                if (_ws_highest_grp_nbr != value)
                {
                    _ws_highest_grp_nbr = value;
                    RaisePropertyChanged("ws_highest_grp_nbr");
                }
            }
        }

        private decimal _ws_highest_grp_tot;
        public decimal ws_highest_grp_tot
        {
            get
            {
                return _ws_highest_grp_tot;
            }
            set
            {
                if (_ws_highest_grp_tot != value)
                {
                    _ws_highest_grp_tot = value;
                    RaisePropertyChanged("ws_highest_grp_tot");
                }
            }
        }

        private int _ws_hold_screen_dept;
        public int ws_hold_screen_dept
        {
            get
            {
                return _ws_hold_screen_dept;
            }
            set
            {
                if (_ws_hold_screen_dept != value)
                {
                    _ws_hold_screen_dept = value;
                    RaisePropertyChanged("ws_hold_screen_dept");
                }
            }
        }

        private string _ws_ohip_chart_flag;
        public string ws_ohip_chart_flag
        {
            get
            {
                return _ws_ohip_chart_flag;
            }
            set
            {
                if (_ws_ohip_chart_flag != value)
                {
                    _ws_ohip_chart_flag = value;
                    _ws_ohip_chart_flag = _ws_ohip_chart_flag.ToUpper();
                    RaisePropertyChanged("ws_ohip_chart_flag");
                }
            }
        }

        private int _ws_pat_birth_date_dd;
        public int ws_pat_birth_date_dd
        {
            get
            {
                return _ws_pat_birth_date_dd;
            }
            set
            {
                if (_ws_pat_birth_date_dd != value)
                {
                    _ws_pat_birth_date_dd = value;
                    RaisePropertyChanged("ws_pat_birth_date_dd");
                }
            }
        }

        private int _ws_pat_birth_date_mm;
        public int ws_pat_birth_date_mm
        {
            get
            {
                return _ws_pat_birth_date_mm;
            }
            set
            {
                if (_ws_pat_birth_date_mm != value)
                {
                    _ws_pat_birth_date_mm = value;
                    RaisePropertyChanged("ws_pat_birth_date_mm");
                }
            }
        }

        private int _ws_pat_birth_date_yy;
        public int ws_pat_birth_date_yy
        {
            get
            {
                return _ws_pat_birth_date_yy;
            }
            set
            {
                if (_ws_pat_birth_date_yy != value)
                {
                    _ws_pat_birth_date_yy = value;
                    RaisePropertyChanged("ws_pat_birth_date_yy");
                }
            }
        }

        private int _ws_pat_expiry_mm;
        public int ws_pat_expiry_mm
        {
            get
            {
                return _ws_pat_expiry_mm;
            }
            set
            {
                if (_ws_pat_expiry_mm != value)
                {
                    _ws_pat_expiry_mm = value;
                    RaisePropertyChanged("ws_pat_expiry_mm");
                }
            }
        }

        private int _ws_pat_expiry_yy;
        public int ws_pat_expiry_yy
        {
            get
            {
                return _ws_pat_expiry_yy;
            }
            set
            {
                if (_ws_pat_expiry_yy != value)
                {
                    _ws_pat_expiry_yy = value;
                    RaisePropertyChanged("ws_pat_expiry_yy");
                }
            }
        }

        private string _ws_pat_given_name;
        public string ws_pat_given_name
        {
            get
            {
                return _ws_pat_given_name;
            }
            set
            {
                if (_ws_pat_given_name != value)
                {
                    _ws_pat_given_name = value;
                    _ws_pat_given_name = _ws_pat_given_name.ToUpper();
                    RaisePropertyChanged("ws_pat_given_name");
                }
            }
        }

        private long _ws_pat_health_nbr;
        public long ws_pat_health_nbr
        {
            get
            {
                return _ws_pat_health_nbr;
            }
            set
            {
                if (_ws_pat_health_nbr != value)
                {
                    _ws_pat_health_nbr = value;
                    RaisePropertyChanged("ws_pat_health_nbr");
                }
            }
        }

        private string _ws_pat_last_version_cd;
        public string ws_pat_last_version_cd
        {
            get
            {
                return _ws_pat_last_version_cd;
            }
            set
            {
                if (_ws_pat_last_version_cd != value)
                {
                    _ws_pat_last_version_cd = value;
                    _ws_pat_last_version_cd = _ws_pat_last_version_cd.ToUpper();
                    RaisePropertyChanged("ws_pat_last_version_cd");
                }
            }
        }

        private string _ws_pat_mess_code;
        public string ws_pat_mess_code
        {
            get
            {
                return _ws_pat_mess_code;
            }
            set
            {
                if (_ws_pat_mess_code != value)
                {
                    _ws_pat_mess_code = value;
                    _ws_pat_mess_code = _ws_pat_mess_code.ToUpper();
                    RaisePropertyChanged("ws_pat_mess_code");
                }
            }
        }

        private string _ws_pat_ohip_mmyy;
        public string ws_pat_ohip_mmyy
        {
            get
            {
                return _ws_pat_ohip_mmyy;
            }
            set
            {
                if (_ws_pat_ohip_mmyy != value)
                {
                    _ws_pat_ohip_mmyy = value;
                    _ws_pat_ohip_mmyy = _ws_pat_ohip_mmyy.ToUpper();
                    RaisePropertyChanged("ws_pat_ohip_mmyy");
                }
            }
        }

        private string _ws_pat_surname;
        public string ws_pat_surname
        {
            get
            {
                return _ws_pat_surname;
            }
            set
            {
                if (_ws_pat_surname != value)
                {
                    _ws_pat_surname = value;
                    _ws_pat_surname = _ws_pat_surname.ToUpper();
                    RaisePropertyChanged("ws_pat_surname");
                }
            }
        }

        private string _ws_pat_version_cd;
        public string ws_pat_version_cd
        {
            get
            {
                return _ws_pat_version_cd;
            }
            set
            {
                if (_ws_pat_version_cd != value)
                {
                    _ws_pat_version_cd = value;
                    _ws_pat_version_cd = _ws_pat_version_cd.ToUpper();
                    RaisePropertyChanged("ws_pat_version_cd");
                }
            }
        }

        private string _ws_scr_health_nbr;
        public string ws_scr_health_nbr
        {
            get
            {
                return _ws_scr_health_nbr;
            }
            set
            {
                if (_ws_scr_health_nbr != value)
                {
                    _ws_scr_health_nbr = value;
                    _ws_scr_health_nbr = _ws_scr_health_nbr.ToUpper();
                    RaisePropertyChanged("ws_scr_health_nbr");
                }
            }
        }

        private string _ws_subscr_addr1;
        public string ws_subscr_addr1
        {
            get
            {
                return _ws_subscr_addr1;
            }
            set
            {
                if (_ws_subscr_addr1 != value)
                {
                    _ws_subscr_addr1 = value;
                    _ws_subscr_addr1 = _ws_subscr_addr1.ToUpper();
                    RaisePropertyChanged("ws_subscr_addr1");
                }
            }
        }

        private string _ws_subscr_addr2;
        public string ws_subscr_addr2
        {
            get
            {
                return _ws_subscr_addr2;
            }
            set
            {
                if (_ws_subscr_addr2 != value)
                {
                    _ws_subscr_addr2 = value;
                    _ws_subscr_addr2 = _ws_subscr_addr2.ToUpper();
                    RaisePropertyChanged("ws_subscr_addr2");
                }
            }
        }

        private string _ws_subscr_addr3;
        public string ws_subscr_addr3
        {
            get
            {
                return _ws_subscr_addr3;
            }
            set
            {
                if (_ws_subscr_addr3 != value)
                {
                    _ws_subscr_addr3 = value;
                    _ws_subscr_addr3 = _ws_subscr_addr3.ToUpper();
                    RaisePropertyChanged("ws_subscr_addr3");
                }
            }
        }

        private string _ws_subscr_postal_cd;
        public string ws_subscr_postal_cd
        {
            get
            {
                return _ws_subscr_postal_cd;
            }
            set
            {
                if (_ws_subscr_postal_cd != value)
                {
                    _ws_subscr_postal_cd = value;
                    _ws_subscr_postal_cd = _ws_subscr_postal_cd.ToUpper();
                    RaisePropertyChanged("ws_subscr_postal_cd");
                }
            }
        }

        private string _d001_batch_nbr_grp;
        public string d001_batch_nbr_grp
        {
            get
            {
                return _d001_batch_nbr_grp;
            }
            set
            {
                if (_d001_batch_nbr_grp != value)
                {
                    _d001_batch_nbr_grp = value;
                    _d001_batch_nbr_grp = _d001_batch_nbr_grp.ToUpper();
                    RaisePropertyChanged("d001_batch_nbr_grp");
                }
            }
        }

        private string _batctrl_loc;
        public string batctrl_loc
        {
            get
            {
                return _batctrl_loc;
            }
            set
            {
                if (_batctrl_loc != value)
                {
                    _batctrl_loc = value;
                    _batctrl_loc = _batctrl_loc.ToUpper();
                    RaisePropertyChanged("batctrl_loc");
                }
            }
        }

        private string _d001_loc;
        public string d001_loc
        {
            get
            {
                return _d001_loc;
            }
            set
            {
                if (_d001_loc != value)
                {
                    _d001_loc = value;
                    _d001_loc = _d001_loc.ToUpper();
                    RaisePropertyChanged("d001_loc");
                }
            }
        }

        private string _d001_agent_cd;
        public string d001_agent_cd
        {
            get
            {
                return _d001_agent_cd;
            }
            set
            {
                if (_d001_agent_cd != value)
                {
                    _d001_agent_cd = value;
                    _d001_agent_cd = _d001_agent_cd.ToUpper();
                    RaisePropertyChanged("d001_agent_cd");
                }
            }
        }

        private string _d001_i_o_pat_ind;
        public string d001_i_o_pat_ind
        {
            get
            {
                return _d001_i_o_pat_ind;
            }
            set
            {
                if (_d001_i_o_pat_ind != value)
                {
                    _d001_i_o_pat_ind = value;
                    _d001_i_o_pat_ind = _d001_i_o_pat_ind.ToUpper();
                    RaisePropertyChanged("d001_i_o_pat_ind");
                }
            }
        }

        private string _d001_payroll;
        public string d001_payroll
        {
            get
            {
                return _d001_payroll;
            }
            set
            {
                if (_d001_payroll != value)
                {
                    _d001_payroll = value;
                    _d001_payroll = _d001_payroll.ToUpper();
                    RaisePropertyChanged("d001_payroll");
                }
            }
        }

        // added 
        private string _hold_oma_cd_1;
        public string hold_oma_cd_1
        {
            get
            {
                return _hold_oma_cd_1;
            }
            set
            {
                if (_hold_oma_cd_1 != value)
                {
                    _hold_oma_cd_1 = value;
                    _hold_oma_cd_1 = _hold_oma_cd_1.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_1");
                }
            }
        }

        private string _hold_oma_cd_2;
        public string hold_oma_cd_2
        {
            get
            {
                return _hold_oma_cd_2;
            }
            set
            {
                if (_hold_oma_cd_2 != value)
                {
                    _hold_oma_cd_2 = value;
                    _hold_oma_cd_2 = _hold_oma_cd_2.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_2");
                }
            }
        }

        private string _hold_oma_cd_3;
        public string hold_oma_cd_3
        {
            get
            {
                return _hold_oma_cd_3;
            }
            set
            {
                if (_hold_oma_cd_3 != value)
                {
                    _hold_oma_cd_3 = value;
                    _hold_oma_cd_3 = _hold_oma_cd_3.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_3");
                }
            }
        }

        private string _hold_oma_cd_4;
        public string hold_oma_cd_4
        {
            get
            {
                return _hold_oma_cd_4;
            }
            set
            {
                if (_hold_oma_cd_4 != value)
                {
                    _hold_oma_cd_4 = value;
                    _hold_oma_cd_4 = _hold_oma_cd_4.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_4");
                }
            }
        }

        private string _hold_oma_cd_5;
        public string hold_oma_cd_5
        {
            get
            {
                return _hold_oma_cd_5;
            }
            set
            {
                if (_hold_oma_cd_5 != value)
                {
                    _hold_oma_cd_5 = value;
                    _hold_oma_cd_5 = _hold_oma_cd_5.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_5");
                }
            }
        }

        private string _hold_oma_cd_6;
        public string hold_oma_cd_6
        {
            get
            {
                return _hold_oma_cd_6;
            }
            set
            {
                if (_hold_oma_cd_6 != value)
                {
                    _hold_oma_cd_6 = value;
                    _hold_oma_cd_6 = _hold_oma_cd_6.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_6");
                }
            }
        }

        private string _hold_oma_cd_7;
        public string hold_oma_cd_7
        {
            get
            {
                return _hold_oma_cd_7;
            }
            set
            {
                if (_hold_oma_cd_7 != value)
                {
                    _hold_oma_cd_7 = value;
                    _hold_oma_cd_7 = _hold_oma_cd_7.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_7");
                }
            }
        }

        private string _hold_oma_cd_8;
        public string hold_oma_cd_8
        {
            get
            {
                return _hold_oma_cd_8;
            }
            set
            {
                if (_hold_oma_cd_8 != value)
                {
                    _hold_oma_cd_8 = value;
                    _hold_oma_cd_8 = _hold_oma_cd_8.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_8");
                }
            }
        }

        private string _hold_oma_cd_9;
        public string hold_oma_cd_9
        {
            get
            {
                return _hold_oma_cd_9;
            }
            set
            {
                if (_hold_oma_cd_9 != value)
                {
                    _hold_oma_cd_9 = value;
                    _hold_oma_cd_9 = _hold_oma_cd_9.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_9");
                }
            }
        }

        private string _hold_oma_cd_10;
        public string hold_oma_cd_10
        {
            get
            {
                return _hold_oma_cd_10;
            }
            set
            {
                if (_hold_oma_cd_10 != value)
                {
                    _hold_oma_cd_10 = value;
                    _hold_oma_cd_10 = _hold_oma_cd_10.ToUpper();
                    RaisePropertyChanged("hold_oma_cd_10");
                }
            }
        }

        private string _hold_oma_suff_1;
        public string hold_oma_suff_1
        {
            get
            {
                return _hold_oma_suff_1;
            }
            set
            {
                if (_hold_oma_suff_1 != value)
                {
                    _hold_oma_suff_1 = value;
                    _hold_oma_suff_1 = _hold_oma_suff_1.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_1");
                }
            }
        }

        private string _hold_oma_suff_2;
        public string hold_oma_suff_2
        {
            get
            {
                return _hold_oma_suff_2;
            }
            set
            {
                if (_hold_oma_suff_2 != value)
                {
                    _hold_oma_suff_2 = value;
                    _hold_oma_suff_2 = _hold_oma_suff_2.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_2");
                }
            }
        }

        private string _hold_oma_suff_3;
        public string hold_oma_suff_3
        {
            get
            {
                return _hold_oma_suff_3;
            }
            set
            {
                if (_hold_oma_suff_3 != value)
                {
                    _hold_oma_suff_3 = value;
                    _hold_oma_suff_3 = _hold_oma_suff_3.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_3");
                }
            }
        }

        private string _hold_oma_suff_4;
        public string hold_oma_suff_4
        {
            get
            {
                return _hold_oma_suff_4;
            }
            set
            {
                if (_hold_oma_suff_4 != value)
                {
                    _hold_oma_suff_4 = value;
                    _hold_oma_suff_4 = _hold_oma_suff_4.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_4");
                }
            }
        }

        private string _hold_oma_suff_5;
        public string hold_oma_suff_5
        {
            get
            {
                return _hold_oma_suff_5;
            }
            set
            {
                if (_hold_oma_suff_5 != value)
                {
                    _hold_oma_suff_5 = value;
                    _hold_oma_suff_5 = _hold_oma_suff_5.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_5");
                }
            }
        }

        private string _hold_oma_suff_6;
        public string hold_oma_suff_6
        {
            get
            {
                return _hold_oma_suff_6;
            }
            set
            {
                if (_hold_oma_suff_6 != value)
                {
                    _hold_oma_suff_6 = value;
                    _hold_oma_suff_6 = _hold_oma_suff_6.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_6");
                }
            }
        }

        private string _hold_oma_suff_7;
        public string hold_oma_suff_7
        {
            get
            {
                return _hold_oma_suff_7;
            }
            set
            {
                if (_hold_oma_suff_7 != value)
                {
                    _hold_oma_suff_7 = value;
                    _hold_oma_suff_7 = _hold_oma_suff_7.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_7");
                }
            }
        }

        private string _hold_oma_suff_8;
        public string hold_oma_suff_8
        {
            get
            {
                return _hold_oma_suff_8;
            }
            set
            {
                if (_hold_oma_suff_8 != value)
                {
                    _hold_oma_suff_8 = value;
                    _hold_oma_suff_8 = _hold_oma_suff_8.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_8");
                }
            }
        }

        private string _hold_oma_suff_9;
        public string hold_oma_suff_9
        {
            get
            {
                return _hold_oma_suff_9;
            }
            set
            {
                if (_hold_oma_suff_9 != value)
                {
                    _hold_oma_suff_9 = value;
                    _hold_oma_suff_9 = _hold_oma_suff_9.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_9");
                }
            }
        }

        private string _hold_oma_suff_10;
        public string hold_oma_suff_10
        {
            get
            {
                return _hold_oma_suff_10;
            }
            set
            {
                if (_hold_oma_suff_10 != value)
                {
                    _hold_oma_suff_10 = value;
                    _hold_oma_suff_10 = _hold_oma_suff_10.ToUpper();
                    RaisePropertyChanged("hold_oma_suff_10");
                }
            }
        }

        private int _hold_sv_date_yy_12_1;
        public int hold_sv_date_yy_12_1
        {
            get
            {
                return _hold_sv_date_yy_12_1;
            }
            set
            {
                if (_hold_sv_date_yy_12_1 != value)
                {
                    _hold_sv_date_yy_12_1 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_1");
                }
            }
        }

        private int _hold_sv_date_yy_12_2;
        public int hold_sv_date_yy_12_2
        {
            get
            {
                return _hold_sv_date_yy_12_2;
            }
            set
            {
                if (_hold_sv_date_yy_12_2 != value)
                {
                    _hold_sv_date_yy_12_2 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_2");
                }
            }
        }

        private int _hold_sv_date_yy_12_3;
        public int hold_sv_date_yy_12_3
        {
            get
            {
                return _hold_sv_date_yy_12_3;
            }
            set
            {
                if (_hold_sv_date_yy_12_3 != value)
                {
                    _hold_sv_date_yy_12_3 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_3");
                }
            }
        }

        private int _hold_sv_date_yy_12_4;
        public int hold_sv_date_yy_12_4
        {
            get
            {
                return _hold_sv_date_yy_12_4;
            }
            set
            {
                if (_hold_sv_date_yy_12_4 != value)
                {
                    _hold_sv_date_yy_12_4 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_4");
                }
            }
        }

        private int _hold_sv_date_yy_12_5;
        public int hold_sv_date_yy_12_5
        {
            get
            {
                return _hold_sv_date_yy_12_5;
            }
            set
            {
                if (_hold_sv_date_yy_12_5 != value)
                {
                    _hold_sv_date_yy_12_5 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_5");
                }
            }
        }

        private int _hold_sv_date_yy_12_6;
        public int hold_sv_date_yy_12_6
        {
            get
            {
                return _hold_sv_date_yy_12_6;
            }
            set
            {
                if (_hold_sv_date_yy_12_6 != value)
                {
                    _hold_sv_date_yy_12_6 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_6");
                }
            }
        }

        private int _hold_sv_date_yy_12_7;
        public int hold_sv_date_yy_12_7
        {
            get
            {
                return _hold_sv_date_yy_12_7;
            }
            set
            {
                if (_hold_sv_date_yy_12_7 != value)
                {
                    _hold_sv_date_yy_12_7 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_7");
                }
            }
        }

        private int _hold_sv_date_yy_12_8;
        public int hold_sv_date_yy_12_8
        {
            get
            {
                return _hold_sv_date_yy_12_8;
            }
            set
            {
                if (_hold_sv_date_yy_12_8 != value)
                {
                    _hold_sv_date_yy_12_8 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_8");
                }
            }
        }

        private int _hold_sv_date_yy_12_9;
        public int hold_sv_date_yy_12_9
        {
            get
            {
                return _hold_sv_date_yy_12_9;
            }
            set
            {
                if (_hold_sv_date_yy_12_9 != value)
                {
                    _hold_sv_date_yy_12_9 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_9");
                }
            }
        }

        private int _hold_sv_date_yy_12_10;
        public int hold_sv_date_yy_12_10
        {
            get
            {
                return _hold_sv_date_yy_12_10;
            }
            set
            {
                if (_hold_sv_date_yy_12_10 != value)
                {
                    _hold_sv_date_yy_12_10 = value;
                    RaisePropertyChanged("hold_sv_date_yy_12_10");
                }
            }
        }

        private int _hold_sv_date_yy_34_1;
        public int hold_sv_date_yy_34_1
        {
            get
            {
                return _hold_sv_date_yy_34_1;
            }
            set
            {
                if (_hold_sv_date_yy_34_1 != value)
                {
                    _hold_sv_date_yy_34_1 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_1");
                }
            }
        }

        private int _hold_sv_date_yy_34_2;
        public int hold_sv_date_yy_34_2
        {
            get
            {
                return _hold_sv_date_yy_34_2;
            }
            set
            {
                if (_hold_sv_date_yy_34_2 != value)
                {
                    _hold_sv_date_yy_34_2 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_2");
                }
            }
        }

        private int _hold_sv_date_yy_34_3;
        public int hold_sv_date_yy_34_3
        {
            get
            {
                return _hold_sv_date_yy_34_3;
            }
            set
            {
                if (_hold_sv_date_yy_34_3 != value)
                {
                    _hold_sv_date_yy_34_3 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_3");
                }
            }
        }

        private int _hold_sv_date_yy_34_4;
        public int hold_sv_date_yy_34_4
        {
            get
            {
                return _hold_sv_date_yy_34_4;
            }
            set
            {
                if (_hold_sv_date_yy_34_4 != value)
                {
                    _hold_sv_date_yy_34_4 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_4");
                }
            }
        }

        private int _hold_sv_date_yy_34_5;
        public int hold_sv_date_yy_34_5
        {
            get
            {
                return _hold_sv_date_yy_34_5;
            }
            set
            {
                if (_hold_sv_date_yy_34_5 != value)
                {
                    _hold_sv_date_yy_34_5 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_5");
                }
            }
        }

        private int _hold_sv_date_yy_34_6;
        public int hold_sv_date_yy_34_6
        {
            get
            {
                return _hold_sv_date_yy_34_6;
            }
            set
            {
                if (_hold_sv_date_yy_34_6 != value)
                {
                    _hold_sv_date_yy_34_6 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_6");
                }
            }
        }

        private int _hold_sv_date_yy_34_7;
        public int hold_sv_date_yy_34_7
        {
            get
            {
                return _hold_sv_date_yy_34_7;
            }
            set
            {
                if (_hold_sv_date_yy_34_7 != value)
                {
                    _hold_sv_date_yy_34_7 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_7");
                }
            }
        }

        private int _hold_sv_date_yy_34_8;
        public int hold_sv_date_yy_34_8
        {
            get
            {
                return _hold_sv_date_yy_34_8;
            }
            set
            {
                if (_hold_sv_date_yy_34_8 != value)
                {
                    _hold_sv_date_yy_34_8 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_8");
                }
            }
        }

        private int _hold_sv_date_yy_34_9;
        public int hold_sv_date_yy_34_9
        {
            get
            {
                return _hold_sv_date_yy_34_9;
            }
            set
            {
                if (_hold_sv_date_yy_34_9 != value)
                {
                    _hold_sv_date_yy_34_9 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_9");
                }
            }
        }

        private int _hold_sv_date_yy_34_10;
        public int hold_sv_date_yy_34_10
        {
            get
            {
                return _hold_sv_date_yy_34_10;
            }
            set
            {
                if (_hold_sv_date_yy_34_10 != value)
                {
                    _hold_sv_date_yy_34_10 = value;
                    RaisePropertyChanged("hold_sv_date_yy_34_10");
                }
            }
        }

        private int _hold_sv_date_mm_1;
        public int hold_sv_date_mm_1
        {
            get
            {
                return _hold_sv_date_mm_1;
            }
            set
            {
                if (_hold_sv_date_mm_1 != value)
                {
                    _hold_sv_date_mm_1 = value;
                    RaisePropertyChanged("hold_sv_date_mm_1");
                }
            }
        }

        private int _hold_sv_date_mm_2;
        public int hold_sv_date_mm_2
        {
            get
            {
                return _hold_sv_date_mm_2;
            }
            set
            {
                if (_hold_sv_date_mm_2 != value)
                {
                    _hold_sv_date_mm_2 = value;
                    RaisePropertyChanged("hold_sv_date_mm_2");
                }
            }
        }

        private int _hold_sv_date_mm_3;
        public int hold_sv_date_mm_3
        {
            get
            {
                return _hold_sv_date_mm_3;
            }
            set
            {
                if (_hold_sv_date_mm_3 != value)
                {
                    _hold_sv_date_mm_3 = value;
                    RaisePropertyChanged("hold_sv_date_mm_3");
                }
            }
        }

        private int _hold_sv_date_mm_4;
        public int hold_sv_date_mm_4
        {
            get
            {
                return _hold_sv_date_mm_4;
            }
            set
            {
                if (_hold_sv_date_mm_4 != value)
                {
                    _hold_sv_date_mm_4 = value;
                    RaisePropertyChanged("hold_sv_date_mm_4");
                }
            }
        }

        private int _hold_sv_date_mm_5;
        public int hold_sv_date_mm_5
        {
            get
            {
                return _hold_sv_date_mm_5;
            }
            set
            {
                if (_hold_sv_date_mm_5 != value)
                {
                    _hold_sv_date_mm_5 = value;
                    RaisePropertyChanged("hold_sv_date_mm_5");
                }
            }
        }

        private int _hold_sv_date_mm_6;
        public int hold_sv_date_mm_6
        {
            get
            {
                return _hold_sv_date_mm_6;
            }
            set
            {
                if (_hold_sv_date_mm_6 != value)
                {
                    _hold_sv_date_mm_6 = value;
                    RaisePropertyChanged("hold_sv_date_mm_6");
                }
            }
        }

        private int _hold_sv_date_mm_7;
        public int hold_sv_date_mm_7
        {
            get
            {
                return _hold_sv_date_mm_7;
            }
            set
            {
                if (_hold_sv_date_mm_7 != value)
                {
                    _hold_sv_date_mm_7 = value;
                    RaisePropertyChanged("hold_sv_date_mm_7");
                }
            }
        }

        private int _hold_sv_date_mm_8;
        public int hold_sv_date_mm_8
        {
            get
            {
                return _hold_sv_date_mm_8;
            }
            set
            {
                if (_hold_sv_date_mm_8 != value)
                {
                    _hold_sv_date_mm_8 = value;
                    RaisePropertyChanged("hold_sv_date_mm_8");
                }
            }
        }

        private int _hold_sv_date_mm_9;
        public int hold_sv_date_mm_9
        {
            get
            {
                return _hold_sv_date_mm_9;
            }
            set
            {
                if (_hold_sv_date_mm_9 != value)
                {
                    _hold_sv_date_mm_9 = value;
                    RaisePropertyChanged("hold_sv_date_mm_9");
                }
            }
        }

        private int _hold_sv_date_mm_10;
        public int hold_sv_date_mm_10
        {
            get
            {
                return _hold_sv_date_mm_10;
            }
            set
            {
                if (_hold_sv_date_mm_10 != value)
                {
                    _hold_sv_date_mm_10 = value;
                    RaisePropertyChanged("hold_sv_date_mm_10");
                }
            }
        }

        private int _hold_sv_date_dd_1;
        public int hold_sv_date_dd_1
        {
            get
            {
                return _hold_sv_date_dd_1;
            }
            set
            {
                if (_hold_sv_date_dd_1 != value)
                {
                    _hold_sv_date_dd_1 = value;
                    RaisePropertyChanged("hold_sv_date_dd_1");
                }
            }
        }

        private int _hold_sv_date_dd_2;
        public int hold_sv_date_dd_2
        {
            get
            {
                return _hold_sv_date_dd_2;
            }
            set
            {
                if (_hold_sv_date_dd_2 != value)
                {
                    _hold_sv_date_dd_2 = value;
                    RaisePropertyChanged("hold_sv_date_dd_2");
                }
            }
        }

        private int _hold_sv_date_dd_3;
        public int hold_sv_date_dd_3
        {
            get
            {
                return _hold_sv_date_dd_3;
            }
            set
            {
                if (_hold_sv_date_dd_3 != value)
                {
                    _hold_sv_date_dd_3 = value;
                    RaisePropertyChanged("hold_sv_date_dd_3");
                }
            }
        }

        private int _hold_sv_date_dd_4;
        public int hold_sv_date_dd_4
        {
            get
            {
                return _hold_sv_date_dd_4;
            }
            set
            {
                if (_hold_sv_date_dd_4 != value)
                {
                    _hold_sv_date_dd_4 = value;
                    RaisePropertyChanged("hold_sv_date_dd_4");
                }
            }
        }

        private int _hold_sv_date_dd_5;
        public int hold_sv_date_dd_5
        {
            get
            {
                return _hold_sv_date_dd_5;
            }
            set
            {
                if (_hold_sv_date_dd_5 != value)
                {
                    _hold_sv_date_dd_5 = value;
                    RaisePropertyChanged("hold_sv_date_dd_5");
                }
            }
        }

        private int _hold_sv_date_dd_6;
        public int hold_sv_date_dd_6
        {
            get
            {
                return _hold_sv_date_dd_6;
            }
            set
            {
                if (_hold_sv_date_dd_6 != value)
                {
                    _hold_sv_date_dd_6 = value;
                    RaisePropertyChanged("hold_sv_date_dd_6");
                }
            }
        }

        private int _hold_sv_date_dd_7;
        public int hold_sv_date_dd_7
        {
            get
            {
                return _hold_sv_date_dd_7;
            }
            set
            {
                if (_hold_sv_date_dd_7 != value)
                {
                    _hold_sv_date_dd_7 = value;
                    RaisePropertyChanged("hold_sv_date_dd_7");
                }
            }
        }

        private int _hold_sv_date_dd_8;
        public int hold_sv_date_dd_8
        {
            get
            {
                return _hold_sv_date_dd_8;
            }
            set
            {
                if (_hold_sv_date_dd_8 != value)
                {
                    _hold_sv_date_dd_8 = value;
                    RaisePropertyChanged("hold_sv_date_dd_8");
                }
            }
        }

        private int _hold_sv_date_dd_9;
        public int hold_sv_date_dd_9
        {
            get
            {
                return _hold_sv_date_dd_9;
            }
            set
            {
                if (_hold_sv_date_dd_9 != value)
                {
                    _hold_sv_date_dd_9 = value;
                    RaisePropertyChanged("hold_sv_date_dd_9");
                }
            }
        }

        private int _hold_sv_date_dd_10;
        public int hold_sv_date_dd_10
        {
            get
            {
                return _hold_sv_date_dd_10;
            }
            set
            {
                if (_hold_sv_date_dd_10 != value)
                {
                    _hold_sv_date_dd_10 = value;
                    RaisePropertyChanged("hold_sv_date_dd_10");
                }
            }
        }

        private int _hold_sv_nbr_serv_1;
        public int hold_sv_nbr_serv_1
        {
            get
            {
                return _hold_sv_nbr_serv_1;
            }
            set
            {
                if (_hold_sv_nbr_serv_1 != value)
                {
                    _hold_sv_nbr_serv_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_1");
                }
            }
        }

        private int _hold_sv_nbr_serv_2;
        public int hold_sv_nbr_serv_2
        {
            get
            {
                return _hold_sv_nbr_serv_2;
            }
            set
            {
                if (_hold_sv_nbr_serv_2 != value)
                {
                    _hold_sv_nbr_serv_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_2");
                }
            }
        }

        private int _hold_sv_nbr_serv_3;
        public int hold_sv_nbr_serv_3
        {
            get
            {
                return _hold_sv_nbr_serv_3;
            }
            set
            {
                if (_hold_sv_nbr_serv_3 != value)
                {
                    _hold_sv_nbr_serv_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_3");
                }
            }
        }

        private int _hold_sv_nbr_serv_4;
        public int hold_sv_nbr_serv_4
        {
            get
            {
                return _hold_sv_nbr_serv_4;
            }
            set
            {
                if (_hold_sv_nbr_serv_4 != value)
                {
                    _hold_sv_nbr_serv_4 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_4");
                }
            }
        }

        private int _hold_sv_nbr_serv_5;
        public int hold_sv_nbr_serv_5
        {
            get
            {
                return _hold_sv_nbr_serv_5;
            }
            set
            {
                if (_hold_sv_nbr_serv_5 != value)
                {
                    _hold_sv_nbr_serv_5 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_5");
                }
            }
        }

        private int _hold_sv_nbr_serv_6;
        public int hold_sv_nbr_serv_6
        {
            get
            {
                return _hold_sv_nbr_serv_6;
            }
            set
            {
                if (_hold_sv_nbr_serv_6 != value)
                {
                    _hold_sv_nbr_serv_6 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_6");
                }
            }
        }

        private int _hold_sv_nbr_serv_7;
        public int hold_sv_nbr_serv_7
        {
            get
            {
                return _hold_sv_nbr_serv_7;
            }
            set
            {
                if (_hold_sv_nbr_serv_7 != value)
                {
                    _hold_sv_nbr_serv_7 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_7");
                }
            }
        }

        private int _hold_sv_nbr_serv_8;
        public int hold_sv_nbr_serv_8
        {
            get
            {
                return _hold_sv_nbr_serv_8;
            }
            set
            {
                if (_hold_sv_nbr_serv_8 != value)
                {
                    _hold_sv_nbr_serv_8 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_8");
                }
            }
        }

        private int _hold_sv_nbr_serv_9;
        public int hold_sv_nbr_serv_9
        {
            get
            {
                return _hold_sv_nbr_serv_9;
            }
            set
            {
                if (_hold_sv_nbr_serv_9 != value)
                {
                    _hold_sv_nbr_serv_9 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_9");
                }
            }
        }

        private int _hold_sv_nbr_serv_10;
        public int hold_sv_nbr_serv_10
        {
            get
            {
                return _hold_sv_nbr_serv_10;
            }
            set
            {
                if (_hold_sv_nbr_serv_10 != value)
                {
                    _hold_sv_nbr_serv_10 = value;
                    RaisePropertyChanged("hold_sv_nbr_serv_10");
                }
            }
        }

        private int _hold_diag_cd_1;
        public int hold_diag_cd_1
        {
            get
            {
                return _hold_diag_cd_1;
            }
            set
            {
                if (_hold_diag_cd_1 != value)
                {
                    _hold_diag_cd_1 = value;
                    RaisePropertyChanged("hold_diag_cd_1");
                }
            }
        }

        private int _hold_diag_cd_2;
        public int hold_diag_cd_2
        {
            get
            {
                return _hold_diag_cd_2;
            }
            set
            {
                if (_hold_diag_cd_2 != value)
                {
                    _hold_diag_cd_2 = value;
                    RaisePropertyChanged("hold_diag_cd_2");
                }
            }
        }

        private int _hold_diag_cd_3;
        public int hold_diag_cd_3
        {
            get
            {
                return _hold_diag_cd_3;
            }
            set
            {
                if (_hold_diag_cd_3 != value)
                {
                    _hold_diag_cd_3 = value;
                    RaisePropertyChanged("hold_diag_cd_3");
                }
            }
        }

        private int _hold_diag_cd_4;
        public int hold_diag_cd_4
        {
            get
            {
                return _hold_diag_cd_4;
            }
            set
            {
                if (_hold_diag_cd_4 != value)
                {
                    _hold_diag_cd_4 = value;
                    RaisePropertyChanged("hold_diag_cd_4");
                }
            }
        }

        private int _hold_diag_cd_5;
        public int hold_diag_cd_5
        {
            get
            {
                return _hold_diag_cd_5;
            }
            set
            {
                if (_hold_diag_cd_5 != value)
                {
                    _hold_diag_cd_5 = value;
                    RaisePropertyChanged("hold_diag_cd_5");
                }
            }
        }

        private int _hold_diag_cd_6;
        public int hold_diag_cd_6
        {
            get
            {
                return _hold_diag_cd_6;
            }
            set
            {
                if (_hold_diag_cd_6 != value)
                {
                    _hold_diag_cd_6 = value;
                    RaisePropertyChanged("hold_diag_cd_6");
                }
            }
        }

        private int _hold_diag_cd_7;
        public int hold_diag_cd_7
        {
            get
            {
                return _hold_diag_cd_7;
            }
            set
            {
                if (_hold_diag_cd_7 != value)
                {
                    _hold_diag_cd_7 = value;
                    RaisePropertyChanged("hold_diag_cd_7");
                }
            }
        }

        private int _hold_diag_cd_8;
        public int hold_diag_cd_8
        {
            get
            {
                return _hold_diag_cd_8;
            }
            set
            {
                if (_hold_diag_cd_8 != value)
                {
                    _hold_diag_cd_8 = value;
                    RaisePropertyChanged("hold_diag_cd_8");
                }
            }
        }

        private int _hold_diag_cd_9;
        public int hold_diag_cd_9
        {
            get
            {
                return _hold_diag_cd_9;
            }
            set
            {
                if (_hold_diag_cd_9 != value)
                {
                    _hold_diag_cd_9 = value;
                    RaisePropertyChanged("hold_diag_cd_9");
                }
            }
        }

        private int _hold_diag_cd_10;
        public int hold_diag_cd_10
        {
            get
            {
                return _hold_diag_cd_10;
            }
            set
            {
                if (_hold_diag_cd_10 != value)
                {
                    _hold_diag_cd_10 = value;
                    RaisePropertyChanged("hold_diag_cd_10");
                }
            }
        }

        private int _hold_sv_nbr_1_1;
        public int hold_sv_nbr_1_1
        {
            get
            {
                return _hold_sv_nbr_1_1;
            }
            set
            {
                if (_hold_sv_nbr_1_1 != value)
                {
                    _hold_sv_nbr_1_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_1_1");

                }
            }
        }

        private int _hold_sv_nbr_2_1;
        public int hold_sv_nbr_2_1
        {
            get
            {
                return _hold_sv_nbr_2_1;
            }
            set
            {
                if (_hold_sv_nbr_2_1 != value)
                {
                    _hold_sv_nbr_2_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_2_1");
                }
            }
        }

        private int _hold_sv_nbr_3_1;
        public int hold_sv_nbr_3_1
        {
            get
            {
                return _hold_sv_nbr_3_1;
            }
            set
            {
                if (_hold_sv_nbr_3_1 != value)
                {
                    _hold_sv_nbr_3_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_3_1");

                }
            }
        }

        private int _hold_sv_nbr_4_1;
        public int hold_sv_nbr_4_1
        {
            get
            {
                return _hold_sv_nbr_4_1;
            }
            set
            {
                if (_hold_sv_nbr_4_1 != value)
                {
                    _hold_sv_nbr_4_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_4_1");
                }
            }
        }

        private int _hold_sv_nbr_5_1;
        public int hold_sv_nbr_5_1
        {
            get
            {
                return _hold_sv_nbr_5_1;
            }
            set
            {
                if (_hold_sv_nbr_5_1 != value)
                {
                    _hold_sv_nbr_5_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_5_1");
                }
            }
        }

        private int _hold_sv_nbr_6_1;
        public int hold_sv_nbr_6_1
        {
            get
            {
                return _hold_sv_nbr_6_1;
            }
            set
            {
                if (_hold_sv_nbr_6_1 != value)
                {
                    _hold_sv_nbr_6_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_6_1");
                }
            }
        }

        private int _hold_sv_nbr_7_1;
        public int hold_sv_nbr_7_1
        {
            get
            {
                return _hold_sv_nbr_7_1;
            }
            set
            {
                if (_hold_sv_nbr_7_1 != value)
                {
                    _hold_sv_nbr_7_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_7_1");
                }
            }
        }

        private int _hold_sv_nbr_8_1;
        public int hold_sv_nbr_8_1
        {
            get
            {
                return _hold_sv_nbr_8_1;
            }
            set
            {
                if (_hold_sv_nbr_8_1 != value)
                {
                    _hold_sv_nbr_8_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_8_1");
                }
            }
        }

        private int _hold_sv_nbr_9_1;
        public int hold_sv_nbr_9_1
        {
            get
            {
                return _hold_sv_nbr_9_1;
            }
            set
            {
                if (_hold_sv_nbr_9_1 != value)
                {
                    _hold_sv_nbr_9_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_9_1");
                }
            }
        }

        private int _hold_sv_nbr_10_1;
        public int hold_sv_nbr_10_1
        {
            get
            {
                return _hold_sv_nbr_10_1;
            }
            set
            {
                if (_hold_sv_nbr_10_1 != value)
                {
                    _hold_sv_nbr_10_1 = value;
                    RaisePropertyChanged("hold_sv_nbr_10_1");
                }
            }
        }

        private string _hold_sv_day_1_1;
        public string hold_sv_day_1_1
        {
            get
            {
                return _hold_sv_day_1_1;
            }
            set
            {
                if (_hold_sv_day_1_1 != value)
                {
                    _hold_sv_day_1_1 = value;
                    _hold_sv_day_1_1 = _hold_sv_day_1_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_1_1");
                }
            }
        }

        private string _hold_sv_day_2_1;
        public string hold_sv_day_2_1
        {
            get
            {
                return _hold_sv_day_2_1;
            }
            set
            {
                if (_hold_sv_day_2_1 != value)
                {
                    _hold_sv_day_2_1 = value;
                    _hold_sv_day_2_1 = _hold_sv_day_2_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_2_1");
                }
            }
        }

        private string _hold_sv_day_3_1;
        public string hold_sv_day_3_1
        {
            get
            {
                return _hold_sv_day_3_1;
            }
            set
            {
                if (_hold_sv_day_3_1 != value)
                {
                    _hold_sv_day_3_1 = value;
                    _hold_sv_day_3_1 = _hold_sv_day_3_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_3_1");
                }
            }
        }

        private string _hold_sv_day_4_1;
        public string hold_sv_day_4_1
        {
            get
            {
                return _hold_sv_day_4_1;
            }
            set
            {
                if (_hold_sv_day_4_1 != value)
                {
                    _hold_sv_day_4_1 = value;
                    _hold_sv_day_4_1 = _hold_sv_day_4_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_4_1");
                }
            }
        }

        private string _hold_sv_day_5_1;
        public string hold_sv_day_5_1
        {
            get
            {
                return _hold_sv_day_5_1;
            }
            set
            {
                if (_hold_sv_day_5_1 != value)
                {
                    _hold_sv_day_5_1 = value;
                    _hold_sv_day_5_1 = _hold_sv_day_5_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_5_1");
                }
            }
        }

        private string _hold_sv_day_6_1;
        public string hold_sv_day_6_1
        {
            get
            {
                return _hold_sv_day_6_1;
            }
            set
            {
                if (_hold_sv_day_6_1 != value)
                {
                    _hold_sv_day_6_1 = value;
                    _hold_sv_day_6_1 = _hold_sv_day_6_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_6_1");
                }
            }
        }

        private string _hold_sv_day_7_1;
        public string hold_sv_day_7_1
        {
            get
            {
                return _hold_sv_day_7_1;
            }
            set
            {
                if (_hold_sv_day_7_1 != value)
                {
                    _hold_sv_day_7_1 = value;
                    _hold_sv_day_7_1 = _hold_sv_day_7_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_7_1");
                }
            }
        }

        private string _hold_sv_day_8_1;
        public string hold_sv_day_8_1
        {
            get
            {
                return _hold_sv_day_8_1;
            }
            set
            {
                if (_hold_sv_day_8_1 != value)
                {
                    _hold_sv_day_8_1 = value;
                    _hold_sv_day_8_1 = _hold_sv_day_8_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_8_1");
                }
            }
        }

        private string _hold_sv_day_9_1;
        public string hold_sv_day_9_1
        {
            get
            {
                return _hold_sv_day_9_1;
            }
            set
            {
                if (_hold_sv_day_9_1 != value)
                {
                    _hold_sv_day_9_1 = value;
                    _hold_sv_day_9_1 = _hold_sv_day_9_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_9_1");
                }
            }
        }

        private string _hold_sv_day_10_1;
        public string hold_sv_day_10_1
        {
            get
            {
                return _hold_sv_day_10_1;
            }
            set
            {
                if (_hold_sv_day_10_1 != value)
                {
                    _hold_sv_day_10_1 = value;
                    _hold_sv_day_10_1 = _hold_sv_day_10_1.ToUpper();
                    RaisePropertyChanged("hold_sv_day_10_1");
                }
            }
        }

        private int _hold_sv_nbr_1_2;
        public int hold_sv_nbr_1_2
        {
            get
            {
                return _hold_sv_nbr_1_2;
            }
            set
            {
                if (_hold_sv_nbr_1_2 != value)
                {
                    _hold_sv_nbr_1_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_1_2");
                }
            }
        }

        private int _hold_sv_nbr_2_2;
        public int hold_sv_nbr_2_2
        {
            get
            {
                return _hold_sv_nbr_2_2;
            }
            set
            {
                if (_hold_sv_nbr_2_2 != value)
                {
                    _hold_sv_nbr_2_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_2_2");
                }
            }
        }

        private int _hold_sv_nbr_3_2;
        public int hold_sv_nbr_3_2
        {
            get
            {
                return _hold_sv_nbr_3_2;
            }
            set
            {
                if (_hold_sv_nbr_3_2 != value)
                {
                    _hold_sv_nbr_3_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_3_2");
                }
            }
        }

        private int _hold_sv_nbr_4_2;
        public int hold_sv_nbr_4_2
        {
            get
            {
                return _hold_sv_nbr_4_2;
            }
            set
            {
                if (_hold_sv_nbr_4_2 != value)
                {
                    _hold_sv_nbr_4_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_4_2");
                }
            }
        }

        private int _hold_sv_nbr_5_2;
        public int hold_sv_nbr_5_2
        {
            get
            {
                return _hold_sv_nbr_5_2;
            }
            set
            {
                if (_hold_sv_nbr_5_2 != value)
                {
                    _hold_sv_nbr_5_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_5_2");
                }
            }
        }

        private int _hold_sv_nbr_6_2;
        public int hold_sv_nbr_6_2
        {
            get
            {
                return _hold_sv_nbr_6_2;
            }
            set
            {
                if (_hold_sv_nbr_6_2 != value)
                {
                    _hold_sv_nbr_6_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_6_2");
                }
            }
        }

        private int _hold_sv_nbr_7_2;
        public int hold_sv_nbr_7_2
        {
            get
            {
                return _hold_sv_nbr_7_2;
            }
            set
            {
                if (_hold_sv_nbr_7_2 != value)
                {
                    _hold_sv_nbr_7_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_7_2");
                }
            }
        }

        private int _hold_sv_nbr_8_2;
        public int hold_sv_nbr_8_2
        {
            get
            {
                return _hold_sv_nbr_8_2;
            }
            set
            {
                if (_hold_sv_nbr_8_2 != value)
                {
                    _hold_sv_nbr_8_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_8_2");
                }
            }
        }

        private int _hold_sv_nbr_9_2;
        public int hold_sv_nbr_9_2
        {
            get
            {
                return _hold_sv_nbr_9_2;
            }
            set
            {
                if (_hold_sv_nbr_9_2 != value)
                {
                    _hold_sv_nbr_9_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_9_2");
                }
            }
        }

        private int _hold_sv_nbr_10_2;
        public int hold_sv_nbr_10_2
        {
            get
            {
                return _hold_sv_nbr_10_2;
            }
            set
            {
                if (_hold_sv_nbr_10_2 != value)
                {
                    _hold_sv_nbr_10_2 = value;
                    RaisePropertyChanged("hold_sv_nbr_10_2");
                }
            }
        }

        private int _hold_sv_day_1_2;
        public int hold_sv_day_1_2
        {
            get
            {
                return _hold_sv_day_1_2;
            }
            set
            {
                if (_hold_sv_day_1_2 != value)
                {
                    _hold_sv_day_1_2 = value;
                    RaisePropertyChanged("hold_sv_day_1_2");
                }
            }
        }

        private int _hold_sv_day_2_2;
        public int hold_sv_day_2_2
        {
            get
            {
                return _hold_sv_day_2_2;
            }
            set
            {
                if (_hold_sv_day_2_2 != value)
                {
                    _hold_sv_day_2_2 = value;
                    RaisePropertyChanged("hold_sv_day_2_2");
                }
            }
        }

        private int _hold_sv_day_3_2;
        public int hold_sv_day_3_2
        {
            get
            {
                return _hold_sv_day_3_2;
            }
            set
            {
                if (_hold_sv_day_3_2 != value)
                {
                    _hold_sv_day_3_2 = value;
                    RaisePropertyChanged("hold_sv_day_3_2");
                }
            }
        }

        private int _hold_sv_day_4_2;
        public int hold_sv_day_4_2
        {
            get
            {
                return _hold_sv_day_4_2;
            }
            set
            {
                if (_hold_sv_day_4_2 != value)
                {
                    _hold_sv_day_4_2 = value;
                    RaisePropertyChanged("hold_sv_day_4_2");
                }
            }
        }

        private int _hold_sv_day_5_2;
        public int hold_sv_day_5_2
        {
            get
            {
                return _hold_sv_day_5_2;
            }
            set
            {
                if (_hold_sv_day_5_2 != value)
                {
                    _hold_sv_day_5_2 = value;
                    RaisePropertyChanged("hold_sv_day_5_2");
                }
            }
        }

        private int _hold_sv_day_6_2;
        public int hold_sv_day_6_2
        {
            get
            {
                return _hold_sv_day_6_2;
            }
            set
            {
                if (_hold_sv_day_6_2 != value)
                {
                    _hold_sv_day_6_2 = value;
                    RaisePropertyChanged("hold_sv_day_6_2");
                }
            }
        }

        private int _hold_sv_day_7_2;
        public int hold_sv_day_7_2
        {
            get
            {
                return _hold_sv_day_7_2;
            }
            set
            {
                if (_hold_sv_day_7_2 != value)
                {
                    _hold_sv_day_7_2 = value;
                    RaisePropertyChanged("hold_sv_day_7_2");
                }
            }
        }

        private int _hold_sv_day_8_2;
        public int hold_sv_day_8_2
        {
            get
            {
                return _hold_sv_day_8_2;
            }
            set
            {
                if (_hold_sv_day_8_2 != value)
                {
                    _hold_sv_day_8_2 = value;
                    RaisePropertyChanged("hold_sv_day_8_2");
                }
            }
        }

        private int _hold_sv_day_9_2;
        public int hold_sv_day_9_2
        {
            get
            {
                return _hold_sv_day_9_2;
            }
            set
            {
                if (_hold_sv_day_9_2 != value)
                {
                    _hold_sv_day_9_2 = value;
                    RaisePropertyChanged("hold_sv_day_9_2");
                }
            }
        }

        private int _hold_sv_day_10_2;
        public int hold_sv_day_10_2
        {
            get
            {
                return _hold_sv_day_10_2;
            }
            set
            {
                if (_hold_sv_day_10_2 != value)
                {
                    _hold_sv_day_10_2 = value;
                    RaisePropertyChanged("hold_sv_day_10_2");
                }
            }
        }

        private int _hold_sv_nbr_1_3;
        public int hold_sv_nbr_1_3
        {
            get
            {
                return _hold_sv_nbr_1_3;
            }
            set
            {
                if (_hold_sv_nbr_1_3 != value)
                {
                    _hold_sv_nbr_1_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_1_3");
                }
            }
        }

        private int _hold_sv_nbr_2_3;
        public int hold_sv_nbr_2_3
        {
            get
            {
                return _hold_sv_nbr_2_3;
            }
            set
            {
                if (_hold_sv_nbr_2_3 != value)
                {
                    _hold_sv_nbr_2_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_2_3");
                }
            }
        }

        private int _hold_sv_nbr_3_3;
        public int hold_sv_nbr_3_3
        {
            get
            {
                return _hold_sv_nbr_3_3;
            }
            set
            {
                if (_hold_sv_nbr_3_3 != value)
                {
                    _hold_sv_nbr_3_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_3_3");
                }
            }
        }

        private int _hold_sv_nbr_4_3;
        public int hold_sv_nbr_4_3
        {
            get
            {
                return _hold_sv_nbr_4_3;
            }
            set
            {
                if (_hold_sv_nbr_4_3 != value)
                {
                    _hold_sv_nbr_4_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_4_3");
                }
            }
        }

        private int _hold_sv_nbr_5_3;
        public int hold_sv_nbr_5_3
        {
            get
            {
                return _hold_sv_nbr_5_3;
            }
            set
            {
                if (_hold_sv_nbr_5_3 != value)
                {
                    _hold_sv_nbr_5_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_5_3");
                }
            }
        }

        private int _hold_sv_nbr_6_3;
        public int hold_sv_nbr_6_3
        {
            get
            {
                return _hold_sv_nbr_6_3;
            }
            set
            {
                if (_hold_sv_nbr_6_3 != value)
                {
                    _hold_sv_nbr_6_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_6_3");
                }
            }
        }

        private int _hold_sv_nbr_7_3;
        public int hold_sv_nbr_7_3
        {
            get
            {
                return _hold_sv_nbr_7_3;
            }
            set
            {
                if (_hold_sv_nbr_7_3 != value)
                {
                    _hold_sv_nbr_7_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_7_3");
                }
            }
        }

        private int _hold_sv_nbr_8_3;
        public int hold_sv_nbr_8_3
        {
            get
            {
                return _hold_sv_nbr_8_3;
            }
            set
            {
                if (_hold_sv_nbr_8_3 != value)
                {
                    _hold_sv_nbr_8_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_8_3");
                }
            }
        }

        private int _hold_sv_nbr_9_3;
        public int hold_sv_nbr_9_3
        {
            get
            {
                return _hold_sv_nbr_9_3;
            }
            set
            {
                if (_hold_sv_nbr_9_3 != value)
                {
                    _hold_sv_nbr_9_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_9_3");
                }
            }
        }

        private int _hold_sv_nbr_10_3;
        public int hold_sv_nbr_10_3
        {
            get
            {
                return _hold_sv_nbr_10_3;
            }
            set
            {
                if (_hold_sv_nbr_10_3 != value)
                {
                    _hold_sv_nbr_10_3 = value;
                    RaisePropertyChanged("hold_sv_nbr_10_3");
                }
            }
        }

        private int _hold_sv_day_1_3;
        public int hold_sv_day_1_3
        {
            get
            {
                return _hold_sv_day_1_3;
            }
            set
            {
                if (_hold_sv_day_1_3 != value)
                {
                    _hold_sv_day_1_3 = value;
                    RaisePropertyChanged("hold_sv_day_1_3");
                }
            }
        }

        private int _hold_sv_day_2_3;
        public int hold_sv_day_2_3
        {
            get
            {
                return _hold_sv_day_2_3;
            }
            set
            {
                if (_hold_sv_day_2_3 != value)
                {
                    _hold_sv_day_2_3 = value;
                    RaisePropertyChanged("hold_sv_day_2_3");
                }
            }
        }

        private int _hold_sv_day_3_3;
        public int hold_sv_day_3_3
        {
            get
            {
                return _hold_sv_day_3_3;
            }
            set
            {
                if (_hold_sv_day_3_3 != value)
                {
                    _hold_sv_day_3_3 = value;
                    RaisePropertyChanged("hold_sv_day_3_3");
                }
            }
        }

        private int _hold_sv_day_4_3;
        public int hold_sv_day_4_3
        {
            get
            {
                return _hold_sv_day_4_3;
            }
            set
            {
                if (_hold_sv_day_4_3 != value)
                {
                    _hold_sv_day_4_3 = value;
                    RaisePropertyChanged("hold_sv_day_4_3");
                }
            }
        }

        private int _hold_sv_day_5_3;
        public int hold_sv_day_5_3
        {
            get
            {
                return _hold_sv_day_5_3;
            }
            set
            {
                if (_hold_sv_day_5_3 != value)
                {
                    _hold_sv_day_5_3 = value;
                    RaisePropertyChanged("hold_sv_day_5_3");
                }
            }
        }

        private int _hold_sv_day_6_3;
        public int hold_sv_day_6_3
        {
            get
            {
                return _hold_sv_day_6_3;
            }
            set
            {
                if (_hold_sv_day_6_3 != value)
                {
                    _hold_sv_day_6_3 = value;
                    RaisePropertyChanged("hold_sv_day_6_3");
                }
            }
        }

        private int _hold_sv_day_7_3;
        public int hold_sv_day_7_3
        {
            get
            {
                return _hold_sv_day_7_3;
            }
            set
            {
                if (_hold_sv_day_7_3 != value)
                {
                    _hold_sv_day_7_3 = value;
                    RaisePropertyChanged("hold_sv_day_7_3");
                }
            }
        }

        private int _hold_sv_day_8_3;
        public int hold_sv_day_8_3
        {
            get
            {
                return _hold_sv_day_8_3;
            }
            set
            {
                if (_hold_sv_day_8_3 != value)
                {
                    _hold_sv_day_8_3 = value;
                    RaisePropertyChanged("hold_sv_day_8_3");
                }
            }
        }

        private int _hold_sv_day_9_3;
        public int hold_sv_day_9_3
        {
            get
            {
                return _hold_sv_day_9_3;
            }
            set
            {
                if (_hold_sv_day_9_3 != value)
                {
                    _hold_sv_day_9_3 = value;
                    RaisePropertyChanged("hold_sv_day_9_3");
                }
            }
        }

        private int _hold_sv_day_10_3;
        public int hold_sv_day_10_3
        {
            get
            {
                return _hold_sv_day_10_3;
            }
            set
            {
                if (_hold_sv_day_10_3 != value)
                {
                    _hold_sv_day_10_3 = value;
                    RaisePropertyChanged("hold_sv_day_10_3");
                }
            }
        }

        private decimal _hold_fee_oma_1;
        public decimal hold_fee_oma_1
        {
            get
            {
                return _hold_fee_oma_1;
            }
            set
            {
                if (_hold_fee_oma_1 != value)
                {
                    _hold_fee_oma_1 = value;
                    RaisePropertyChanged("hold_fee_oma_1");
                }
            }
        }

        private decimal _hold_fee_oma_2;
        public decimal hold_fee_oma_2
        {
            get
            {
                return _hold_fee_oma_2;
            }
            set
            {
                if (_hold_fee_oma_2 != value)
                {
                    _hold_fee_oma_2 = value;
                    RaisePropertyChanged("hold_fee_oma_2");
                }
            }
        }

        private decimal _hold_fee_oma_3;
        public decimal hold_fee_oma_3
        {
            get
            {
                return _hold_fee_oma_3;
            }
            set
            {
                if (_hold_fee_oma_3 != value)
                {
                    _hold_fee_oma_3 = value;
                    RaisePropertyChanged("hold_fee_oma_3");
                }
            }
        }

        private decimal _hold_fee_oma_4;
        public decimal hold_fee_oma_4
        {
            get
            {
                return _hold_fee_oma_4;
            }
            set
            {
                if (_hold_fee_oma_4 != value)
                {
                    _hold_fee_oma_4 = value;
                    RaisePropertyChanged("hold_fee_oma_4");
                }
            }
        }

        private decimal _hold_fee_oma_5;
        public decimal hold_fee_oma_5
        {
            get
            {
                return _hold_fee_oma_5;
            }
            set
            {
                if (_hold_fee_oma_5 != value)
                {
                    _hold_fee_oma_5 = value;
                    RaisePropertyChanged("hold_fee_oma_5");
                }
            }
        }

        private decimal _hold_fee_oma_6;
        public decimal hold_fee_oma_6
        {
            get
            {
                return _hold_fee_oma_6;
            }
            set
            {
                if (_hold_fee_oma_6 != value)
                {
                    _hold_fee_oma_6 = value;
                    RaisePropertyChanged("hold_fee_oma_6");
                }
            }
        }

        private decimal _hold_fee_oma_7;
        public decimal hold_fee_oma_7
        {
            get
            {
                return _hold_fee_oma_7;
            }
            set
            {
                if (_hold_fee_oma_7 != value)
                {
                    _hold_fee_oma_7 = value;
                    RaisePropertyChanged("hold_fee_oma_7");
                }
            }
        }

        private decimal _hold_fee_oma_8;
        public decimal hold_fee_oma_8
        {
            get
            {
                return _hold_fee_oma_8;
            }
            set
            {
                if (_hold_fee_oma_8 != value)
                {
                    _hold_fee_oma_8 = value;
                    RaisePropertyChanged("hold_fee_oma_8");
                }
            }
        }

        private decimal _hold_fee_oma_9;
        public decimal hold_fee_oma_9
        {
            get
            {
                return _hold_fee_oma_9;
            }
            set
            {
                if (_hold_fee_oma_9 != value)
                {
                    _hold_fee_oma_9 = value;
                    RaisePropertyChanged("hold_fee_oma_9");
                }
            }
        }

        private decimal _hold_fee_oma_10;
        public decimal hold_fee_oma_10
        {
            get
            {
                return _hold_fee_oma_10;
            }
            set
            {
                if (_hold_fee_oma_10 != value)
                {
                    _hold_fee_oma_10 = value;
                    RaisePropertyChanged("hold_fee_oma_10");
                }
            }
        }

        private decimal _hold_fee_ohip_1;
        public decimal hold_fee_ohip_1
        {
            get
            {
                return _hold_fee_ohip_1;
            }
            set
            {
                if (_hold_fee_ohip_1 != value)
                {
                    _hold_fee_ohip_1 = value;
                    RaisePropertyChanged("hold_fee_ohip_1");
                }
            }
        }

        private decimal _hold_fee_ohip_2;
        public decimal hold_fee_ohip_2
        {
            get
            {
                return _hold_fee_ohip_2;
            }
            set
            {
                if (_hold_fee_ohip_2 != value)
                {
                    _hold_fee_ohip_2 = value;
                    RaisePropertyChanged("hold_fee_ohip_2");
                }
            }
        }

        private decimal _hold_fee_ohip_3;
        public decimal hold_fee_ohip_3
        {
            get
            {
                return _hold_fee_ohip_3;
            }
            set
            {
                if (_hold_fee_ohip_3 != value)
                {
                    _hold_fee_ohip_3 = value;
                    RaisePropertyChanged("hold_fee_ohip_3");
                }
            }
        }

        private decimal _hold_fee_ohip_4;
        public decimal hold_fee_ohip_4
        {
            get
            {
                return _hold_fee_ohip_4;
            }
            set
            {
                if (_hold_fee_ohip_4 != value)
                {
                    _hold_fee_ohip_4 = value;
                    RaisePropertyChanged("hold_fee_ohip_4");
                }
            }
        }

        private decimal _hold_fee_ohip_5;
        public decimal hold_fee_ohip_5
        {
            get
            {
                return _hold_fee_ohip_5;
            }
            set
            {
                if (_hold_fee_ohip_5 != value)
                {
                    _hold_fee_ohip_5 = value;
                    RaisePropertyChanged("hold_fee_ohip_5");
                }
            }
        }

        private decimal _hold_fee_ohip_6;
        public decimal hold_fee_ohip_6
        {
            get
            {
                return _hold_fee_ohip_6;
            }
            set
            {
                if (_hold_fee_ohip_6 != value)
                {
                    _hold_fee_ohip_6 = value;
                    RaisePropertyChanged("hold_fee_ohip_6");
                }
            }
        }

        private decimal _hold_fee_ohip_7;
        public decimal hold_fee_ohip_7
        {
            get
            {
                return _hold_fee_ohip_7;
            }
            set
            {
                if (_hold_fee_ohip_7 != value)
                {
                    _hold_fee_ohip_7 = value;
                    RaisePropertyChanged("hold_fee_ohip_7");
                }
            }
        }

        private decimal _hold_fee_ohip_8;
        public decimal hold_fee_ohip_8
        {
            get
            {
                return _hold_fee_ohip_8;
            }
            set
            {
                if (_hold_fee_ohip_8 != value)
                {
                    _hold_fee_ohip_8 = value;
                    RaisePropertyChanged("hold_fee_ohip_8");
                }
            }
        }

        private decimal _hold_fee_ohip_9;
        public decimal hold_fee_ohip_9
        {
            get
            {
                return _hold_fee_ohip_9;
            }
            set
            {
                if (_hold_fee_ohip_9 != value)
                {
                    _hold_fee_ohip_9 = value;
                    RaisePropertyChanged("hold_fee_ohip_9");
                }
            }
        }

        private decimal _hold_fee_ohip_10;
        public decimal hold_fee_ohip_10
        {
            get
            {
                return _hold_fee_ohip_10;
            }
            set
            {
                if (_hold_fee_ohip_10 != value)
                {
                    _hold_fee_ohip_10 = value;
                    RaisePropertyChanged("hold_fee_ohip_10");
                }
            }
        }

        private string _hold_icc_cd_1;
        public string hold_icc_cd_1
        {
            get
            {
                return _hold_icc_cd_1;
            }
            set
            {
                if (_hold_icc_cd_1 != value)
                {
                    _hold_icc_cd_1 = value;
                    _hold_icc_cd_1 = _hold_icc_cd_1.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_1");
                }
            }
        }

        private string _hold_icc_cd_2;
        public string hold_icc_cd_2
        {
            get
            {
                return _hold_icc_cd_2;
            }
            set
            {
                if (_hold_icc_cd_2 != value)
                {
                    _hold_icc_cd_2 = value;
                    _hold_icc_cd_2 = _hold_icc_cd_2.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_2");
                }
            }
        }

        private string _hold_icc_cd_3;
        public string hold_icc_cd_3
        {
            get
            {
                return _hold_icc_cd_3;
            }
            set
            {
                if (_hold_icc_cd_3 != value)
                {
                    _hold_icc_cd_3 = value;
                    _hold_icc_cd_3 = _hold_icc_cd_3.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_3");
                }
            }
        }

        private string _hold_icc_cd_4;
        public string hold_icc_cd_4
        {
            get
            {
                return _hold_icc_cd_4;
            }
            set
            {
                if (_hold_icc_cd_4 != value)
                {
                    _hold_icc_cd_4 = value;
                    _hold_icc_cd_4 = _hold_icc_cd_4.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_4");
                }
            }
        }

        private string _hold_icc_cd_5;
        public string hold_icc_cd_5
        {
            get
            {
                return _hold_icc_cd_5;
            }
            set
            {
                if (_hold_icc_cd_5 != value)
                {
                    _hold_icc_cd_5 = value;
                    _hold_icc_cd_5 = _hold_icc_cd_5.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_5");
                }
            }
        }

        private string _hold_icc_cd_6;
        public string hold_icc_cd_6
        {
            get
            {
                return _hold_icc_cd_6;
            }
            set
            {
                if (_hold_icc_cd_6 != value)
                {
                    _hold_icc_cd_6 = value;
                    _hold_icc_cd_6 = _hold_icc_cd_6.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_6");
                }
            }
        }

        private string _hold_icc_cd_7;
        public string hold_icc_cd_7
        {
            get
            {
                return _hold_icc_cd_7;
            }
            set
            {
                if (_hold_icc_cd_7 != value)
                {
                    _hold_icc_cd_7 = value;
                    _hold_icc_cd_7 = _hold_icc_cd_7.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_7");
                }
            }
        }

        private string _hold_icc_cd_8;
        public string hold_icc_cd_8
        {
            get
            {
                return _hold_icc_cd_8;
            }
            set
            {
                if (_hold_icc_cd_8 != value)
                {
                    _hold_icc_cd_8 = value;
                    _hold_icc_cd_8 = _hold_icc_cd_8.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_8");
                }
            }
        }

        private string _hold_icc_cd_9;
        public string hold_icc_cd_9
        {
            get
            {
                return _hold_icc_cd_9;
            }
            set
            {
                if (_hold_icc_cd_9 != value)
                {
                    _hold_icc_cd_9 = value;
                    _hold_icc_cd_9 = _hold_icc_cd_9.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_9");
                }
            }
        }

        private string _hold_icc_cd_10;
        public string hold_icc_cd_10
        {
            get
            {
                return _hold_icc_cd_10;
            }
            set
            {
                if (_hold_icc_cd_10 != value)
                {
                    _hold_icc_cd_10 = value;
                    _hold_icc_cd_10 = _hold_icc_cd_10.ToUpper();
                    RaisePropertyChanged("hold_icc_cd_10");
                }
            }
        }

        private int _hold_flag_sec_group_1;
        public int hold_flag_sec_group_1
        {
            get
            {
                return _hold_flag_sec_group_1;
            }
            set
            {
                if (_hold_flag_sec_group_1 != value)
                {
                    _hold_flag_sec_group_1 = value;
                    RaisePropertyChanged("hold_flag_sec_group_1");
                }
            }
        }

        private int _hold_flag_sec_group_2;
        public int hold_flag_sec_group_2
        {
            get
            {
                return _hold_flag_sec_group_2;
            }
            set
            {
                if (_hold_flag_sec_group_2 != value)
                {
                    _hold_flag_sec_group_2 = value;
                    RaisePropertyChanged("hold_flag_sec_group_2");
                }
            }
        }

        private int _hold_flag_sec_group_3;
        public int hold_flag_sec_group_3
        {
            get
            {
                return _hold_flag_sec_group_3;
            }
            set
            {
                if (_hold_flag_sec_group_3 != value)
                {
                    _hold_flag_sec_group_3 = value;
                    RaisePropertyChanged("hold_flag_sec_group_3");
                }
            }
        }

        private int _hold_flag_sec_group_4;
        public int hold_flag_sec_group_4
        {
            get
            {
                return _hold_flag_sec_group_4;
            }
            set
            {
                if (_hold_flag_sec_group_4 != value)
                {
                    _hold_flag_sec_group_4 = value;
                    RaisePropertyChanged("hold_flag_sec_group_4");
                }
            }
        }

        private int _hold_flag_sec_group_5;
        public int hold_flag_sec_group_5
        {
            get
            {
                return _hold_flag_sec_group_5;
            }
            set
            {
                if (_hold_flag_sec_group_5 != value)
                {
                    _hold_flag_sec_group_5 = value;
                    RaisePropertyChanged("hold_flag_sec_group_5");
                }
            }
        }

        private int _hold_flag_sec_group_6;
        public int hold_flag_sec_group_6
        {
            get
            {
                return _hold_flag_sec_group_6;
            }
            set
            {
                if (_hold_flag_sec_group_6 != value)
                {
                    _hold_flag_sec_group_6 = value;
                    RaisePropertyChanged("hold_flag_sec_group_6");
                }
            }
        }

        private int _hold_flag_sec_group_7;
        public int hold_flag_sec_group_7
        {
            get
            {
                return _hold_flag_sec_group_7;
            }
            set
            {
                if (_hold_flag_sec_group_7 != value)
                {
                    _hold_flag_sec_group_7 = value;
                    RaisePropertyChanged("hold_flag_sec_group_7");
                }
            }
        }

        private int _hold_flag_sec_group_8;
        public int hold_flag_sec_group_8
        {
            get
            {
                return _hold_flag_sec_group_8;
            }
            set
            {
                if (_hold_flag_sec_group_8 != value)
                {
                    _hold_flag_sec_group_8 = value;
                    RaisePropertyChanged("hold_flag_sec_group_8");
                }
            }
        }

        private int _hold_flag_sec_group_9;
        public int hold_flag_sec_group_9
        {
            get
            {
                return _hold_flag_sec_group_9;
            }
            set
            {
                if (_hold_flag_sec_group_9 != value)
                {
                    _hold_flag_sec_group_9 = value;
                    RaisePropertyChanged("hold_flag_sec_group_9");
                }
            }
        }

        private int _hold_flag_sec_group_10;
        public int hold_flag_sec_group_10
        {
            get
            {
                return _hold_flag_sec_group_10;
            }
            set
            {
                if (_hold_flag_sec_group_10 != value)
                {
                    _hold_flag_sec_group_10 = value;
                    RaisePropertyChanged("hold_flag_sec_group_10");
                }
            }
        }

        private string _doc_inits;
        public string doc_inits
        {
            get
            {
                return _doc_inits;
            }
            set
            {
                if (_doc_inits != value)
                {
                    _doc_inits = value;
                    _doc_inits = _doc_inits.ToUpper();
                    RaisePropertyChanged("doc_inits");
                }
            }
        }

        private string _doc_name;
        public string doc_name
        {
            get
            {
                return _doc_name;
            }
            set
            {
                if (_doc_name != value)
                {
                    _doc_name = value;
                    _doc_name = _doc_name.ToUpper();
                    RaisePropertyChanged("doc_name");
                }
            }
        }

        #endregion

        #region Working Storage Section
        private string logon_id = "D001";
        //private string password_input;
        private string ws_claim_source = "";
        private int ws_tot_serv;
        private int err_ind;
        private int c_1;
        private int curr = 1;
        private int prev = 2;
        private int oma = 1;
        private int ohip = 2;
        private int pline;
        private int temp;
        private int ss_curr_prev;
        private int temp_ss;
        private string reply;
        //private string continue_reply;
        //private string change_reply;
        private string flag_zero_fee;
        private string flag_z_highest_grp;
        //private string flag_accept;
        private string flag_sp_sec_exists;
        private string flag_new_sec;
        private string flag_diag_code_required;
        private string flag_special_diag_code_req = "N";
        private string first_diag_cd = "Y";
        private string flag_no_verif = "N";
        //private string ws_disp_pat_key_type;
        private string ws_disp_pat_err_msg;
        //private decimal ws_batctrl_amt_diff;
        private int ws_nbr_clmdtl_recs;
        //private decimal ws_batctrl_svc_diff;
        //private string ws_file_err_msg = "";
        //private decimal ws_highest_grp_tot;
        //private int ws_highest_grp_nbr = 0;
        private decimal ws_hold_wcb_rate = 0;
        private string ws_i_o_pat_ind;
        //private string ws_scr_health_nbr;
        private string ws_hold_acronym;
        private string ws_oma_suff;
        private string ws_last_typed_in_suffix;
        private int ws_pricing_nbr_serv;
        private decimal ws_reduc_rate98;
        private decimal ws_reduc_rate99;
        private decimal ws_reduc_rate;
        private int ws_search_clinic_nbr_1_2;
        private string ws_special_add_on_cd_entered;
        private int ws_tot_claim_nbr_sv;
        //private int ws_hold_screen_dept;
        private decimal ws_hold_temp_1;
        private int ws_hold_temp_2;
        private int ws_hold_temp_3;
        //private string confirm_space = space;
        private int rate_found_ss;
        private int ss;
        private int ss1;
        private int ss2;
        private int ss_basic_times;
        private int ss_basic_times_desc_rec;
        private int ss_from_plus_one;
        private int ss_const;
        private int subs_table_addr;
        private int i;
        private int ss_from;
        private int ss_to;
        private int ss_sec;
        private int ss_grp;
        private int ss_grp_tot;
        private int ss_clmhdr;
        private int ss_clmdtl_oma;
        private int ss_clmdtl_next_avail_dtl;
        private int ss_clmdtl_new_dtl;
        private int ss_hold_clmdtl_oma;
        private int ss_clmdtl_desc;
        private int ss_conseq_dd;
        private int ss_det_nbr;
        private int ss_ind;
        private int ss_plus_one;
        private int ss_x;
        private int ss_suffix;
        private int ss_desc;
        private int subs;
        private string feedback_batctrl_file;
        private string feedback_claims_mstr;
        private string feedback_doc_mstr;
        private string feedback_pat_mstr;
        private string feedback_pat_mstr_hc;
        private string feedback_pat_mstr_od;
        private string feedback_pat_mstr_chrt;
        private string feedback_pat_mstr_acr;
        private string feedback_oma_fee_mstr;
        private string feedback_iconst_mstr;
        private string eof_filename_here = "N";
        private string status_common;
        private string status_batctrl_file = "0";
        private string status_cobol_batctrl_file = "0";
        private string status_claims_mstr = "0";
        private string status_cobol_claims_mstr = "0";
        private string status_cobol_rejected_claims = "0";
        private string status_pat_mstr = "0";
        private string status_cobol_batch_in_progress = "0";
        private string status_cobol_loc_mstr = "0";
        private string ws_d001_command_part_1 = "$cmd/utl0025";
        private string ws_d001_command_part_2 = " ";

        private string mf_cobol_status_codes_grp;
        private string status_cobol_pat_mstr_grp;
        private string status_cobol_pat_mstr1 = "0";
        private string status_cobol_pat_mstr2 = "0";
        private int status_cobol_pat_mstr_binary;
        //private string status_cobol_display_grp;
        private string status_cobol_display1;
        // private string filler;
        private int status_cobol_display2;
        private string status_pat_mstr_hc = "0";
        private string status_pat_mstr_od = "0";
        private string status_pat_mstr_chrt = "0";
        private string status_pat_mstr_acr = "0";
        private string status_cobol_pat_mstr_hc = "0";
        private string status_cobol_pat_mstr_od = "0";
        private string status_cobol_pat_mstr_chrt = "0";
        private string status_cobol_pat_mstr_acr = "0";
        private string status_corrected_pat = "0";
        private string status_cobol_pat_elig_history = "0";
        private string status_doc_mstr = "0";
        private string status_cobol_doc_mstr = "0";
        private string status_oma_mstr = "0";
        private string status_cobol_oma_mstr = "0";
        private string status_iconst_mstr = "0";
        private string status_cobol_iconst_mstr = "0";
        private string status_diag_mstr = "0";
        private string status_cobol_diag_mstr = "0";
        private string status_cobol_sli_oma_mstr = "0";

        private string ws_loc_grp;
        private string ws_loc_1;
        private string ws_loc_2;
        private int ws_birth_date;
        private int ws_sv_date;
        private int date_difference_in_days;
        private int ws_sv_date_c1;
        private int ws_sv_date_c2;

        private string ws_oma_cd_grp;
        private string ws_oma_cd_1;
        private string ws_oma_cd_2_4;

        private string ws_date_grp;
        private int ws_yy;
        private int ws_mm;
        private int ws_dd;

        private string temp_yyyy_grp;
        //private int filler;
        private int temp_yy;

        private string expiry_test_to_date_grp;
        private int expiry_test_to_date_yy;
        private int expiry_test_to_date_mm;

        private string hc_expiry_date_grp;
        private int hc_expiry_date_yy;
        private int hc_expiry_date_mm;

        private string key_oma_fee_mstr_grp;
        private string key_oma_cd;
        private decimal ws_batctrl_amt_act;
        private string flg_omacd_possible_addon_found;
        private string flg_diag_possible_addon_found;
        private string flg_addon_possible_addon_found;
        private int claims_occur;

        private string flag_eof_msg_sub_mstr;
        private string eof_msg_sub_mstr = "Y";
        private string not_eof_msg_sub_mstr = "N";

        private string msg_indexer = "M";
        private string sub_indexer = "S";

        private string flag_msg_sub;
        private string msg_sub_missing = "N";
        private string msg_sub_exists = "Y";
        private string flag_loc_code;
        private string loc_found = "Y";
        private string loc_not_found = "N";
        //private string option;
        private string new_batch = "1";
        private string old_batch = "2";
        private string stop_option = "*";
        private string ic_flag = "N";
        private string ic_entered = "Y";
        private string ic_not_entered = "N";
        private string flag;
        private string ok = "Y";
        private string not_ok = "N";
        private string flag_lock;
        private string rec_locked = "Y";
        private string rec_not_locked = "N";
        //private string ws_ohip_chart_flag;
        private string flag_ohip_vs_chart;
        private string qhip = "O";
        private string chart = "C";
        private string direct = "D";
        private string flag_valid_ohip_or_chart;
        private string valid_ohip = "Y";
        private string valid_chart = "Y";
        private string invalid_ohip = "N";
        private string invalid_chart = "N";
        private string flag_ohip_mmyy;
        private string valid_mmyy = "Y";
        private string invalid_mmyy = "N";
        private string flag_err_data;
        private string err_data = "N";
        private string ok_data = "Y";
        private string flag_done_clmdtl_recs;
        private string done_clmdtl_recs_yes = "Y";
        private string flag_eoj;
        private string eoj_create_new_patient = "C";
        private string eoj = "E";
        private string flag_sec_reduction_needed;
        private string flag_tech_prof_suffix_rule;
        private string tech_prof_suff_rule_applied = "Y";
        private string flag_desc_report_required;
        private string report_desc_required = "Y";
        private string flag_adjudication_required;
        private string adjudication_desc_required = "Y";
        private string flag_confidential_desc_rec;
        private string confidential_desc_not_found = "N";
        private string confidential_desc_found = "Y";
        private string flag_agent_cd;
        private string valid_agent_cd = "Y";
        private string invalid_agent_cd = "N";
        private string flag_refer_doc_needed_G_codes;
        private string flag_refer_doc;
        private string refer_doc_require = "Y";
        private string refer_doc_not_require = "N";
        //private string reply_create_pat;
        private string new_patient = "R";
        private string err_patient = "T";
        private string request_pgm_m010 = "A";

        private string macro_line_grp;
        private string macro = "";
        private string macro_null_char = null; // = x"00"; / todo

        private string test_field_grp;
        private string ws_test_field;
        private string ws_test_field_r_grp;
        private string[] test_field_occ = new string[23];
        private int ss_max_field_check = 22;

        private string counters_grp;
        //private int ctr_read_batctrl_mstr;
        //private int ctr_read_claims_mstr;
        //private int ctr_read_pat_mstr;
        //private int ctr_read_doc_mstr;
        //private int ctr_read_loc_mstr;
        //private int ctr_read_oma_mstr;
        //private int ctr_read_const_mstr;
        //private int ctr_writ_batctrl_file;
        //private int ctr_writ_claims_mstr;
        //private int ctr_write_corrected_pat;
        private int ctr_write_pat_elig_hist;
        //private int ctr_rewrit_batctrl_file;
        private int ctr_rewrit_claims_mstr;
        private int ctr_rewrit_const_mstr;
        //private int ctr_read_msg_sub_mstr;
        private int ctr_read_rejected_claims;
        private int ctr_updated_rejected_claims;
        private int ss_max_nbr_oma_det_rec_allow = 20;

        private string ws_iconst_mstr_rec_data_grp;
        private int ws_iconst_clinic_nbr_1_2;
        private string ws_iconst_clinic_nbr;
        private int ws_iconst_clinic_cycle_nbr;
        private int ws_iconst_date_period_end;
        private string ws_iconst_clinic_card_colour;

        private string ws_doc_mstr_rec_data_grp;
        private int ws_doc_nx_batch_nbr;
        private int ws_doc_dept;
        private int ws_doc_ohip_nbr;
        //private int ws_doc_spec_cd;
        private string ws_doc_locations_grp;
        private string[] ws_doc_loc = new string[31];

        private string hold_last_elig_mail_date_grp;
        private int hold_last_elig_mail_yy = 0;
        private string hold_last_elig_mail_yye_grp;
        private int hold_last_elig_mail_yy_12;
        //private int hold_last_elig_mail_yy_34;
        //private int hold_last_elig_mail_mm = 0;
        //private int hold_last_elig_mail_dd = 0;

        private string hold_last_elig_maint_date_grp;
        private int hold_last_elig_maint_yy = 0;
        private string hold_last_elig_maint_yy_r_grp;
        private int hold_last_elig_maint_yy_12;
        //private int hold_last_elig_maint_yy_34;
        //private int hold_last_elig_maint_mm = 0;
        //private int hold_last_elig_maint_dd = 0;

        private string hold_last_birth_date_grp;
        private string hold_last_birth_yy_grp;
        private int hold_last_birth_yy_12;
        //private int hold_last_birth_yy_34;
        //private int hold_last_birth_mm = 0;
        //private int hold_last_birth_dd = 0;
        private int hold_date;
        private int rem1;
        private int special_date;

        private string special_date_r_grp;
        private string spec_date_1;
        private string spec_date_2;

        private string hold_pat_birth_date_grp;
        private string hold_pat_birth_yy_grp;
        private int hold_pat_birth_yy_12;
        private int hold_pat_birth_yy_34;
        private int hold_pat_birth_mm;
        private int hold_pat_birth_dd;
        private string hold_version_cd;
        //private string ws_clmhdr_hosp;
        private string elig_flag;

        //private string last_claim_flag_grp;
        private string last_claim;
        //private string filler;

        private string nbr_of_services_r_grp;
        private int nbr_of_services;
        private int claim_nbr_serv;
        private int save_clmdtl_oma;

        private string new_name_grp;
        private string new_pat_surname;
        private string new_pat_given_name;

        private string new_acronym_grp;
        private string new_pat_surname6;
        private string new_pat_given_name3;
        private string name_change_flag;
        private string save_feedback_pat_mstr;
        private string old_acronym;
        private int pat_occur;
        private int pat_occur_acr;

        private string error_message_table_grp;
        private string error_messages_grp;
        private string[] err_msg = {"","invalid reply",
        "NO SUCH 'CLAIMS' BATCH EXISTS IN THE BATCH CONTROL FILE",
        "invalid password",
        "SERIOUS ERROR #1 !! -- LAST CLAIM IN BATCH NOT FOUND",
        "invalid date",
        "DATE CAN'T BE IN THE FUTURE (ie. > CURRENT SYSTEM DATE)",
        "INVALID DOCTOR NUMBER",
        "OMA CODES INPUT REQUIRE NON-ZERO DIAGNOSTIC CODE",
        "SERIOUS ERROR #2 !! -- BATCH'S DOCTOR NOT FOUND IN DOC MSTR",
        "INVALID LOCATION for batch's DOCTOR",
        "OMA Code requires a HOSPITAL Code - is LOCATION correct?",
        "IN/OUT PATIENT INDICATOR MUST BE 'I'N, 'O'UT, OR 'B'OTH",
        "INVALID OHIP Nbr / Chart ID -- please correct",
        "AGENT IS 'OHIP' -- Patient doesn't have OHIP or Health Nbr",
        "CONSTANTS MSTR REC 'LOCKED' -- INFORM OPERATIONS OF PROBLEM",
        "PATIENT NOT ON FILE",
        "PATIENT OHIP NBR DOESN'T EXIST",
        "PATIENT CHART NBR DOESN'T EXIST",
        "LOOK OUT !!  PREMIUM CODE. IS IT AN 'IN' OR 'E.R.' PATIENT ?",
        "INVALID 2 DIGIT CLINIC IDENTIFIER",
        "SERIOUS ERROR #10 - UNABLE TO READ CONSTANT MSTR REC #2 ",
        "CLAIM AGENT CODE = 'OHIP' -- BUT PATIENT'S OHIP # IS INVALID",
        "MUST SUPPLY REFERRING DOCTOR FOR CLINIC 61 TO 66",
        "CAN'T KEY 'CV' or 'SP' SERVICES FOR CLINIC 60's or 70's",
        "'B' OR 'C' SUFFIX NOT ALLOWED WITH CONSULTATIONS AND VISITS",
        "Ohip # 11111119 valid only for ALTERNATIVE FUNDING Agent",
        "SURNAME INPUT NOT = SURNAME OF PATIENT ON FILE",
        "INVALID OMA CODE",
        "SERIOUS ERROR #4 - INVALID WRITE ON CLAIMS HEADER INDX 1",
        "SERIOUS ERROR #5 - INVALID WRITE ON CLAIMS HEADER INDX 2",
        "SERIOUS ERROR #6 !! -- INVALID WRITE ON CLAIMS DETAIL REC",
        "# SERVICES FROM DAY DOES NOT FALL WITHIN # DAYS IN MONTH",
        "SERVICE DATE < ADMIT DATE",
        "'OHIP' AGENT REQUIRES A REFERRING PHYSICAN",
        "*NOT USED*'OHIP' requires a HOSPITAL # ting 'Y'es flag",
        "'OHIP' AGENT REQUIRES A PATIENT I/O INDICATOR OF 'I'",
        "'OHIP' AGENT REQUIRES A PATIENT I/O INDICATOR OF 'O'",
        "'OHIP' AGENT REQUIRES AN ADMIT DATE",
        "'OHIP' AGENT REQUIRES DOCTOR SPECIALTY CODE BE WITHIN RANGE",
        "'OHIP' AGENT REQUIRES SERVICE WITHIN 231 days OF SYSTEM DATE",
        "DAY INPUT FALLS WITHIN PREVIOUS CONSECUTIVE DAY RANGE",
        "BATCH ALREADY EXISTS",
        "SERIOUS ERROR #7 !! - ERROR IN WRITING TO BATCH CONTROL FILE",
        "INVALID DIAGNOSTIC Code",
        "SERVICE DATE > SYSTEM DATE",
        "SERIOUS ERROR #8 !! - ERROR IN DELETING BATCH CONTROL RECORD",
        "OMA CODE'S SUFFIX MUST BE 'A','B','C', OR 'M'",
        "SERIOUS ERROR #9 !! - ERROR IN RE-WRITING PATIENT'S RECORD",
        "DIALYSIS PATIENT NOT FOUND, WITH ENTERED ACRONYM",
        "LOOK OUT !! OMA CODE'S BASIC VALUE = ZERO !",
        "UNABLE TO ACCESS BATCH -- STATUS IS NOT UNBALANCED/BALANCED",
        "MAXIMUM OF 99 CLAIMS HAVE BEEN ENTERED FOR BATCH - SHUT DOWN",
        "NEXT CLAIM ALREADY EXISTS! - SHUTDOWN AND START A NEW BATCH",
        "INVALID Doctor DEPARTMENT number",
        "SERIOUS ERROR #10 !! - ERROR IN RE-WRITING DOCTOR RECORD",
        "EXISTING OR ZERO MESSAGE NUMBER REQUIRED",
        "Existing SUBDIVISION Number required",
        "CAN NOT ENTER ZERO FEE",
        "FEE VALUE OF ZERO FOUND",
        "SYSTEM DATE GREATER THAN PERIOD-END-DATE",
        "BATCTRL AMT > 99999.99, RE-ENTER CLAIM WITH NEW BATCH",
        "WARNING - CAN'T MANUALLY CONTINUE DISKETTE BATCH ",
        "PATIENT HEALTH NBR DOES NOT EXIST",
        "ONLY CLINIC NBR > 21 and < 100 and not clinc 60 is VALID",
        "CAN'T ENTER OHIP OR WCB CLAIMS WITH 'PQ' PROV CODE",
        "HEALTH NBR IS EXPIRED",
        "REFERRING DOC # CAN'T THE SAME AS DOC # OF THE CLAIM",
        "MANUAL REVIEW CAN ONLY BE 'Y' OR ' '",
        "INVALID HEALTH CARE NUMBER --PLEASE CORRECT",
        "PATIENT MUST HAVE HEALTH # FOR SERVICES AFTER 91/06/30",
        "INVALID SPECIALTY Code for this Doctor",
        "INVALID CLINIC Nbr for this Doctor",
        "BIRTH YEAR > SYSTEM YEAR",
        "BIRTH DATE > SYSTEM DATE",
        "INVALID EXPIRY MONTH",
        "NBR OF SERV MUST BE EITHER NUMERIC OR '*'",
        "ENTERED SERV NOT EQUAL TO COMPUTED SERV",
        "INVALID WRITE INVERTED TO PAT MSTR ACRONYM",
        "CAN'T DELETE OLD ACRONYM KEY",
        "INVALID READ ON PATIENT ACRONYM",
        "REACH TO THE END OF ACRONYM PAT MSTR",
        "ACRONYM READ IS NOT THE SAME AS THE ORIG ACRONYM",
        "Oma Code is NOT ACTIVE for data entry",
        "Doctor fails mod10 check. Are you sure number is correct?",
        "You must enter a HEALTH # OR an out-of-province patient id",
        "INCREASING OMA  fee to MINIMUM value specified in Fee Master",
        "INCREASING OHIP fee to MINIMUM value specified in Fee Master",
        "DECREASING OMA  fee to MAXIMUM value specified in Fee Master",
        "DECREASING OHIP fee to MAXIMUM value specified in Fee Master",
        "basic fee (yb0-) ...",
        "ICC sort flag have been determined (yd0-) ...",
        "group reductions (ye0-) ...",
        "add ons (yf0-) ...",
        "find highest group within section (yh0-) ...",
        "sectional reduction (yi0-) ...",
        "special AddOn (yf1-) ...",
        "BEFORE min/maximums testing ...",
        "AFTER  min/maximums testing ...",
        "Technical prices calulated (ya3-) ....",
        "sorted back into original sequence (yj0-) ...",
        "This code expands to 2 lines, split claim into a 2nd claim",
        "INVALID LOCATION Code - code is not in Location Master",
        "LOCATION Code not currently active for data entry",
        "'A' for 'regular clinic 22' / 'B' for ICU payroll",
        "ICU payroll payroll doctor - use Payroll 'B'",
        "Warning - verify these claims aren't for Payroll 'B'",
        "Warning -  doctor is TERMINATED!",
        "Prefix must be either '!' or '$' ",
        "ADMIT DATE < BIRTH DATE",
        "technical code not allowed for the clinic",
        "E078 may be allowable, please check...",
        "Agent 3, 5, 7 or 8 is not allowed",
        "Clinic 98 only allows agent 6",
        "Clinic 61 to 66 with M500 location must have admit date",
        "RMB claim must have non-Ontario province, please check.",
        "Clinic 71 to 75 with M500 location must have admit date",
        "Alternate funding claims must have Ontario province",
        "As of 2008/01/01 Pediatrics can't bill A007 - use A261/2",
        "Check number of services for C suffix code",
        "E020C only allowed with E022C, E017C or E016C",
        "E719 only allowed with Z570",
        "E720 only allowed with Z571",
        "E717 only allowed with specific colonoscopy codes",
        "E702 only allowed with specific codes",
        "G123 only allowed with G228",
        "G223 only allowed with G231",
        "G265 only allowed with G264",
        "G385 only allowed with G384",
        "G281 only allowed with G381",
        "Maximum number of services exceeded",
        "E793 only allowed with specific procedures",
        "P022 deleted as of 2008/02/01",
        "K120 deleted as of 2008/02/01",
        "A007 not allowed for specialty  '26'",
        "Check fee and services of E400",
        "Check fee and services of E401",
        "E798 allowed only with  Z400",
        "Check fee of E409/E410",
        "Use General Listing code with special visit premium",
        "E450 may only be billed with J315",
        "G222 not allowed with G248, G125, G118 or G062",
        "A775 not allowed with special visit premium",
        "Z432C deleted as of 2009/10/01",
        "H112 / H113 not allowed with another 'H' code",
        "Patient is underage for G489 / S323",
        "G222, Z804 or Z805 not allowed with P014C or P016C",
        "H prefixed E.R. codes must be agent 2 or 9 in clinic 22",
        "G221 only allowed with G220",
        "Patient must be under 16 for service",
        "Patient is overage for H267",
        "Reassessment not allowed with resuscitation",
        "Assessment included in chemotherapy code",
        "Check suffix on 'G' code or premium code",
        "Patient must be 16 and under",
        "Patient is underage for service",
        "Value must be 0 to 5 for dept 41, 42, 43 or 75",
        "allowable entry is 'A'",
        "J021 and J022 should be at 50% with J025",
        "Referring doctor must be an optometrist",
        "Referral must be a midwife",
        "Referring doctor cannot be an optometrist",
        "Z611 or Z602 not allowed with Z608",
        "Z176 or Z154 must have manual review",
        "Z175 - Z192 must have manual review",
        "Z403 with Z408 must have manual review",
        "A195 with K002 requires manual review with times of service",
        "Add E083 to MRP code",
        "E083 only allowed with specific codes",
        "Clarification required to add J021",
        "Echo needs admit date for in-patient",
        "Oma code suffix  / SLI  does not have admit date",
        "Oma code suffix  / SLI  does not require admit date",
        "Patient is overage for service",
        "K189 only allowed with specific codes",
        "Travel Premium billed incorrectly",
        "Check Fee and Services for E676B",
        "Cannot use time units calculator for counselling",
        "G556 only allowed with Day 1 per diem",
        "A120 only allowed with colonoscopy codes",
        "E402 or E403 only allowed with G247",
        "Doctor start date greater than system run date",
        "Disallow '~' in the field : re-enter",
        "Invalid version cd:  re-enter",
        "Services should be 2",
        "E797 allowed with specific colonoscopy codes only",
        "Requires manual review for E414",
        "Check G231/G223/Z228 for bilateral requires manual review",
        "Assessment not allowed with P030",
        "A895 cannot be billed alone",
        "Z514 not allowed with Z512",
        "Z580 not allowed with other colonoscopy code",
        "Nerve block count exceeds 8",
        "Use A070 for consultation with special visit premium",
        "Agent 6 is only allowed in clinc 98"};
        private string error_messages_r_grp;
        //private string[] err_msg = new string[195];
        //private string err_msg_comment;

        private string e1_error_line_grp;
        private string e1_error_word = "*==  ERROR - ";
        private string e1_error_msg;
        private string site_id = "RMA";
        private string password = "RMA";
        private string password_special_privledges = "GCS";
        private string ws_e078_premium;
        private string ws_e020;
        private string ws_e719;
        private string ws_e720;
        private string ws_e717;
        private string ws_e702;
        private string ws_g123;
        private string ws_g223;
        private string ws_g265;
        private string ws_g385;
        private string ws_g281;
        private string ws_e793;
        private string ws_e022_e017_e016;
        private string ws_z570;
        private string ws_z571;
        private string ws_z555_z580;
        private string ws_z515_z760;
        private string ws_g228;
        private string ws_g231;
        private string ws_g264;
        private string ws_g384;
        private string ws_g381;
        private string ws_r905_s800;
        private string ws_annna;
        private string ws_gnnna;
        private string ws_k991_u997;
        private string ws_c998;
        private string ws_c999;
        private string ws_e798;
        private string ws_z400;
        private string ws_g400_other_codes;
        private string ws_e409_e410;
        private string ws_c990_to_c997;
        private string ws_cnnn;
        private string ws_e450;
        private string ws_j315;
        private string ws_c985;
        private string ws_g222;
        private string ws_g248_g062;
        private string ws_a770_a775;
        private string ws_X9nn;
        private string ws_h112_h113;
        private string ws_hnnn;
        private string ws_g489_s323;
        private string ws_g222_z805;
        private string ws_p014_p016;
        private string ws_g221;
        private string ws_g220;
        private string ws_s322_a198;
        private string ws_a765_c765;
        private string ws_g521_g395;
        private string ws_h104_h124;
        private string ws_g345_g339;
        private string ws_g431_g479;
        private string ws_gnnn;
        private string ws_annn;
        private string ws_c983;
        private string ws_j025;
        private string ws_j021;
        private string ws_j022;
        private string ws_z608;
        private string ws_z611_z602;
        private string ws_z403;
        private string ws_z408;
        private string ws_a195;
        private string ws_k002;
        private string ws_c122_c143;
        private string ws_e083;
        private string ws_c122_c982;
        private string ws_g489_g376;
        private string ws_a197_a198;
        private string ws_k189;
        private string ws_a190_a795;
        private string ws_k960;
        private string ws_k990;
        private string ws_k961;
        private string ws_k992;
        private string ws_k962;
        private string ws_k994;
        private string ws_k963;
        private string ws_k998;
        private string ws_k964;
        private string ws_k996;
        private string ws_c960;
        private string ws_c990;
        private string ws_c961;
        private string ws_c992;
        private string ws_c962;
        private string ws_c994;
        private string ws_c963;
        private string ws_c986;
        private string ws_c964;
        private string ws_c996;
        private string ws_e676;
        private string ws_a120;
        private string ws_z491_to_z499;
        private string ws_g556;
        private string ws_g400_g620;

        private string month_descs_and_max_days_mth_grp;
        private string mth_desc_max_days_grp;
        /*private string filler = '31  january031';
        private string filler = '29 february059';
        private string filler = '31    march090';
        private string filler = '30    april120';
        private string filler = '31      may151';
        private string filler = '30     june181';
        private string filler = '31     july212';
        private string filler = '31   august243';
        private string filler = '30SEPTEMBER273';
        private string filler = '31  october304';
        private string filler = '30 november334';
        private string filler = '31 december365'; */
        private string mth_desc_max_days_r_grp;
        private string[] mth_desc_max_days_occur = new string[13];
        private int[] max_nbr_days = { 0, 31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
        private string[] mth_desc = { "", "january", "february", "march", "april", "may", "june", "july", "august", "SEPTEMBER", "october", "november", "december" };
        private int[] nbr_julian_days_ytd = { 0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365 };



        private int century_year;
        private int century_date;
        private int default_century_cc = 19;
        private int default_century_cccc = 1900;

        private string sys_date_grp;
        private string sys_date_long;
        private string sys_date_long_r_grp;
        //private int sys_yy;
        private string sys_yy_alpha_grp;
        private int sys_y1;
        private int sys_y2;
        private int sys_y3;
        private int sys_y4;
        //private int sys_mm;
        //private int sys_dd;
        private int sys_date_numeric;

        private string sys_date_y2kfix_grp;
        private string sys_date_left;
        //private string filler;

        private string sys_date_y2kfixed_grp;
        private string sys_date_blank;
        private string sys_date_right;
        private string sys_date_temp;

        private string run_date_grp;
        private int run_yy;
        //private string filler = "/";
        private int run_mm;
        //private string filler = "/";
        private int run_dd;

        private string sys_time_grp;
        //private int sys_hrs;
        //private int sys_min;
        private int sys_sec;
        private int sys_hdr;

        private string run_time_grp;
        private int run_hrs;
        //private string filler = ":";
        private int run_min;
        //private string filler = ":";
        private int run_sec;

        private string ws_check_digit_nbrs_grp;
        private int ws_temp;
        private int ws_temp_1;
        private int ws_temp_2;
        private string ws_temp_2_r_grp;
        private int ws_temp_2a;
        private int ws_temp_2b;

        private string ws_check_nbr_grp;
        private int ws_chk_nbr;
        private string ws_chk_nbr_r_grp;
        private int ws_chk_nbr_1;
        private int ws_chk_nbr_2;
        private int ws_chk_nbr_3;
        private int ws_chk_nbr_4;
        private int ws_chk_nbr_5;
        private int ws_chk_nbr_6;
        private int ws_chk_nbr_7;
        private int ws_chk_nbr_8;

        private string ws_check_digit_nbrs_10_grp;
        private int ws_temp_10;
        private int ws_temp_1_10;
        private int ws_temp_2_10;
        private string ws_temp_2_10_r_grp;
        private int ws_temp_2a_10;
        private int ws_temp_2b_10;

        private string ws_check_nbr_10_grp;
        private long ws_chk_nbr_10;
        private string ws_chk_nbr_10_r_grp;
        private int ws_chk_nbr_1_10;
        private int ws_chk_nbr_2_10;
        private int ws_chk_nbr_3_10;
        private int ws_chk_nbr_4_10;
        private int ws_chk_nbr_5_10;
        private int ws_chk_nbr_6_10;
        private int ws_chk_nbr_7_10;
        private int ws_chk_nbr_8_10;
        private int ws_chk_nbr_9_10;
        private int ws_chk_nbr_10_10;
        private string def_agent_code;
        private string def_agent_ohip = "0";
        private string def_agent_in_pat_diag_billing = "1";
        private string def_agent_ohip_wcb = "2";
        private string def_agent_icu_direct_bill = "3";
        private string def_agent_ohip_not_valid = "4";
        private string def_agent_moh_reduction = "5";
        private string def_agent_bill_direct = "6";
        private string def_agent_misc_payments = "7";
        private string def_agent_alternate_funding = "8";
        private string def_agent_wcb = "9";
        private string def_agent_ifhp_direct = "x";
        private string def_agent_ontario_direct = "x";
        private string def_agent_foreign_direct = "x";
        private string def_agent_reciprocal = "x";
        private string def_agent_quebec_direct = "x";

        private string linkage_data_grp;
        private string link_flag;
        private string link_data;
        private string link_data_m010_grp;
        private string link_pat_ohip_nbr_alpha;
        //private string def_claim_source;
        private string source_diskette = "D";
        private string source_computer_genned = "C";
        private string source_source_document = "S";

        private string city_prov_table_grp;
        private string city_prov_grp;
        /* private string filler = "HAMILTON ON           H";
         private string filler = "STONEY CREEK ON       STC";
         private string filler = "BURLINGTON ON         B";
         private string filler = "ST. CATHARINES ON     SC";
         private string filler = "BEAMSVILLE ON         BEA";
         private string filler = "DUNDAS ON             D";
         private string filler = "GRIMSBY ON            G";
         private string filler = "WATERDOWN ON          WAT";
         private string filler = "OAKVILLE ON           O";
         private string filler = "ANCASTER ON           AN";
         private string filler = "FRUITLAND ON          FR";
         private string filler = "HANNON ON             HA";
         private string filler = "FLAMBORO ON           F";
         private string filler = "NIAGARA O T LAKE ON   NOL";
         private string filler = "NIAGARA FALLS ON      NF";
         private string filler = "FORT ERIE ON          FE";
         private string filler = "WELLAND ON            W";
         private string filler = "TORONTO ON            T";
         private string filler = "DON MILLS ON          DM";
         private string filler = "WILLOWDALE ON         WI";
         private string filler = "MARKHAM ON            MKM";
         private string filler = "RICHMOND HILL ON      RH";
         private string filler = "THOROLD ON            TH";
         private string filler = "MALTON ON             MA";
         private string filler = "MISSISSAUGA ON        MI";
         private string filler = "SCARBOROUGH ON        SCA";
         private string filler = "NORTH YORK ON         NY";
         private string filler = "BRAMPTON ON           BR";
         private string filler = "WESTON ON             WE";
         private string filler = "ETOBICOKE ON          ET";
         private string filler = "BRANTFORD ON          BRA";
         private string filler = "DUNNVILLE ON          DUN";
         private string filler = "GEORGETOWN ON         GEO";
         private string filler = "GUELPH ON             GUE";
         private string filler = "THORNHILL ON          THO";
         private string filler = "DOWNSVIEW ON          DO";
         private string filler = "ISLINGTON ON          I";
         private string filler = "REXDALE ON            RX";
         private string filler = "AGINCOURT ON          A";
         private string filler = "MILLGROVE ON          MIL";
         private string filler = "CALEDONIA ON          C";
         private string filler = "SIMCOE ON             SIM";
         private string filler = "HAGERSVILLE ON        HAG";
         private string filler = "KITCHENER ON          K";
         private string filler = "CAMPBELLVILLE ON      CA";
         private string filler = "COPETOWN ON           COP";
         private string filler = "PARIS ON              P";
         private string filler = "WATERFORD ON          WF";
         private string filler = "BARRIE ON             BA";
         private string filler = "CAMBRIDGE ON          CAM";
         private string filler = "SUDBURY ON            S";
         private string filler = "GREENSVILLE ON        GR";
         private string filler = "BINBROOK ON           BI";
         private string filler = "CAISTOR CENTRE ON     CC";
         private string filler = "CARLISLE ON           CAR";
         private string filler = "CAYUGA ON             CY";
         private string filler = "FREELTON ON           FRE";
         private string filler = "LYNDEN ON             L";
         private string filler = "MILTON ON             ML";
         private string filler = "MOUNT HOPE ON         MH";
         private string filler = "PORT COLBORNE ON      PC";
         private string filler = "PUSLINCH ON           PU";
         private string filler = "SAULT STE. MARIE ON   SSM";
         private string filler = "SMITHVILLE ON         SM";
         private string filler = "THUNDER BAY ON        TB";
         private string filler = "WINONA ON             WIN";
         private string filler = "JARVIS ON             J";
         private string filler = "FONTHILL ON           FO";
         private string filler = "WAINFLEET ON          WA";
         private string filler = "CRYSTAL BEACH ON      CB";
         private string filler = "PORT DOVER ON         PD";
         private string filler = "VINELAND ON           VI";
         private string filler = "VINEMOUNT ON          V";
         private string filler = "WATERLOO ON           WL";
         private string filler = "OSHWEKEN ON           OH"; */
        private string city_prov_r_grp;
        private string[] city_prov_names = {"","HAMILTON","STONEY CREEK", "BURLINGTON", "ST. CATHARINES", "BEAMSVILLE", "DUNDAS", "GRIMSBY", "WATERDOWN", "OAKVILLE",
                                               "ANCASTER", "FRUITLAND", "HANNON", "FLAMBORO", "NIAGARA O T LAKE", "NIAGARA FALLS", "FORT ERIE", "WELLAND","TORONTO","DON MILLS",
                                               "WILLOWDALE","MARKHAM","RICHMOND HILL","THOROLD","MALTON","MISSISSAUGA","SCARBOROUGH","NORTH YORK","BRAMPTON","WESTON",
                                               "ETOBICOKE","BRANTFORD","DUNNVILLE","GEORGETOWN","GUELPH","THORNHILL","DOWNSVIEW","ISLINGTON","REXDALE", "AGINCOURT",
                                               "MILLGROVE","CALEDONIA","SIMCOE","HAGERSVILLE","KITCHENER","CAMPBELLVILLE","COPETOWN","PARIS","WATERFORD","BARRIE",
                                               "CAMBRIDGE","SUDBURY","GREENSVILLE","BINBROOK","CAISTOR CENTRE","CARLISLE","CAYUGA","FREELTON","LYNDEN","MILTON",
                                               "MOUNT HOPE","PORT COLBORNE","PUSLINCH","SAULT STE. MARIE","SMITHVILLE","THUNDER BAY","WINONA","JARVIS","FONTHILL","WAINFLEET",
                                               "CRYSTAL BEACH","PORT DOVER","VINELAND","VINEMOUNT","WATERLOO","OSHWEKEN"};
        private string[] city_prov_name = {"", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON",
                                               "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON",
                                               "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON",
                                               "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON"
                                              ,"ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON",
                                               "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON",
                                               "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "ON",
                                               "ON", "ON", "ON", "ON", "ON", "ON"};
        private string[] city_prov_short = {"", "H", "STC", "B", "SC", "BEA", "D", "G", "WAT", "O", "AN", "FR", "HA", "F", "NOL", "NF", "FE", "W", "T", "DM", "WI", "MKM", "RH", "TH", "MA", "MI", "SCA", "NY", "BR",
                                               "WE","ET","BRA","DUN","GEO","GUE","THO","DO","I","RX","A","MIL","C","SIM","HAG","K","CA","COP","P","WF","BA","CAM","S","GR","BI","CC","CAR","CY","FRE","L","ML","MH",
                                               "PC","PU","SSM","SM","TB","WIN","J","FO","WA","CB","PD","VI","V","WL","OH"  };
        private int max_nbr_addr = 75;

        private string claim_header_rec_grp;
        private string clmhdr_claim_id_grp;
        private string clmhdr_batch_nbr;
        private string clmhdr_batch_nbr_r1_grp;
        //private int clmhdr_clinic_nbr_1_2;
        //private string clmhdr_doc_nbr;
        private int clmhdr_week;
        private int clmhdr_day;
        private string clmhdr_batch_nbr_r2_grp;
        //private string filler;
        private string clmhdr_batch_nbr_3_6;
        //private int clmhdr_batch_nbr_7_9;
        private int clmhdr_claim_nbr;
        private string clmhdr_zeroed_oma_suff_adj_grp;
        private string clmhdr_adj_oma_cd;
        private string clmhdr_adj_oma_suff;
        private int clmhdr_adj_adj_nbr;
        private int clmhdr_zeroed_area;
        private string clmhdr_batch_type;
        private string clmhdr_adj_cd_sub_type;
        private int clmhdr_adj_cd_sub_type_ss;
        private string clmhdr_claim_source_cd;
        private int clmhdr_doc_nbr_ohip;
        private int clmhdr_doc_spec_cd;
        //private int clmhdr_refer_doc_nbr;
        //private int clmhdr_diag_cd;
        //private string clmhdr_loc;
        private string clmhdr_hosp;
        //private string clmhdr_payroll;
        private int clmhdr_agent_cd;
        private string clmhdr_adj_cd;
        private string clmhdr_tape_submit_ind;
        //private string clmhdr_i_o_pat_ind;
        private string clmhdr_pat_ohip_id_or_chart_grp;
        private string clmhdr_pat_key_type;
        private string clmhdr_pat_key_data_grp;
        private string clmhdr_pat_key_ohip;
        //private string filler;
        private string clmhdr_pat_acronym_grp;
        //private string clmhdr_pat_acronym6;
        private string clmhdr_pat_acronym3;
        private string clmhdr_reference;
        private string clmhdr_date_admit_grp;
        private string clmhdr_date_admit_yy;
        private string clmhdr_date_admit_yy_r_grp;
        //private int clmhdr_date_admit_yy_12;
        //private int clmhdr_date_admit_yy_34;
        //private int clmhdr_date_admit_mm;
        private string clmhdr_date_admit_mm_r;
        //private int clmhdr_date_admit_dd;
        private string clmhdr_date_admit_dd_r;
        private int clmhdr_date_admit_r;
        private int clmhdr_doc_dept;
        private string clmhdr_date_cash_tape_payment;
        private string clmhdr_direct_bills_clm_info_grp;
        //private string clmhdr_msg_nbr;
        private string clmhdr_reprint_flag;
        //private string clmhdr_sub_nbr;
        private string clmhdr_auto_logout;
        private string clmhdr_fee_complex;
        //private string filler;
        private decimal clmhdr_curr_payment;
        private string clmhdr_date_period_end_grp;
        private int clmhdr_period_end_yy;
        private int clmhdr_period_end_mm;
        private int clmhdr_period_end_dd;
        private int clmhdr_cycle_nbr;
        private string clmhdr_date_sys;
        private decimal clmhdr_amt_tech_billed;
        private decimal clmhdr_amt_tech_paid;
        private decimal clmhdr_tot_claim_ar_oma;
        private decimal clmhdr_tot_claim_ar_ohip;
        private decimal clmhdr_manual_and_tape_paymnts;
        private string clmhdr_status_ohip;
        //private string clmhdr_manual_review;
        private string clmhdr_submit_date_grp;
        private int clmhdr_submit_yy;
        private int clmhdr_submit_mm;
        private int clmhdr_submit_dd;
        private string clmhdr_confidential_flag;
        private int clmhdr_serv_date;
        private string clmhdr_elig_error;
        private string clmhdr_elig_status;
        private string clmhdr_serv_error;
        private string clmhdr_serv_status;
        private string clmhdr_orig_batch_id_grp;
        private string clmhdr_orig_batch_nbr_grp;
        private int clmhdr_orig_batch_nbr_1_2;
        private string clmhdr_orig_batch_nbr_4_9;
        private string clmhdr_orig_batch_nbr_next_def_grp;
        //private int filler;
        private string clmhdr_orig_batch_nbr_4_6;
        private int clmhdr_orig_batch_nbr_7_8;
        private int clmhdr_orig_batch_nbr_9;
        private int clmhdr_orig_claim_nbr;
        private string clmhdr_orig_batch_id_r_grp;
        private string clmhdr_orig_complete_batch_nbr;
        private string clmhdr_key_claims_mstr_grp;
        private string clmhdr_b_key_type;
        private string clmhdr_b_data_grp;
        private string clmhdr_b_batch_num;
        private string clmhdr_b_batch_nbr_grp;
        private int clmhdr_b_clinic_nbr_1_2;
        private string clmhdr_b_doc_nbr;
        private string clmhdr_b_doc_nbr_r_grp;
        private string clmhdr_b_doc_nbr_2_4;
        private string clmhdr_b_batch_number_grp;
        private int clmhdr_b_week;
        private int clmhdr_b_day;
        private int clmhdr_b_claim_nbr;
        private string clmhdr_b_oma_cd;
        private string clmhdr_b_oma_suff;
        private string clmhdr_b_adj_nbr;
        private string clmhdr_b_data_r_grp;
        private string clmhdr_b_pat_id;
        //private string filler;
        private string clmhdr_p_claims_mstr_grp;
        private string clmhdr_p_key_type;
        private string clmhdr_p_data_grp;
        private string clmhdr_p_batch_nbr_grp;
        private int clmhdr_p_clinic_nbr_1_2;
        private string clmhdr_p_doc_nbr;
        private int clmhdr_p_week;
        private int clmhdr_p_day;
        private int clmhdr_p_claim_nbr;
        private string clmhdr_p_oma_cd;
        private string clmhdr_p_oma_suff;
        private string clmhdr_p_adj_nbr;

        private string clmrec_dtl_oma_cd;
        private int clmrec_dtl_agent_cd;
        private string clmrec_dtl_adj_cd;
        private int clmrec_dtl_nbr_serv;
        private string clmrec_dtl_sv_date;

        private string[] clmrec_dtl_consec_dates = new string[4];
        private int[] clmrec_dtl_sv_nbr = new int[4];
        private decimal clmrec_dtl_amt_tech_billed;

        private decimal clmrec_dtl_fee_oma;
        private decimal clmrec_dtl_fee_ohip;
        private string Key_claims_mstr;
        //private string clmdtl_b_key_type;
        //private string clmdtl_b_data;
        //private string clmdtl_b_batch_num;
        //private string clmdtl_b_batch_nbr;
        private int clmdtl_b_clinic_nbr_1_2;
        private string clmdtl_b_doc_nbr;
        private string clmdtl_b_doc_nbr_r;
        private string clmdtl_b_doc_nbr_2_4;
        //private string clmdtl_b_batch_number;
        private int clmdtl_b_week;
        private int clmdtl_b_day;
        private int clmdtl_b_batch_number_numeric;
        private int clmdtl_b_claim_nbr;
        private string clmdtl_b_oma_cd;
        private string clmdtl_b_oma_suff;
        private string clmdtl_b_adj_nbr;
        //private string clmdtl_b_data_r;
        private string clmdtl_b_pat_id;
        //10  clmdtl-p-claims-mstr.
        private string Clmdtl_p_claims_mstr;
        //private string Clmdtl_p_key_type;
        private string Clmdtl_p_data;
        //private string clmdtl_p_batch_nbr;
        private int clmdtl_p_clinic_nbr_1_2;
        private string clmdtl_p_doc_nbr;
        private int clmdtl_p_week;
        private int clmdtl_p_day;
        private int clmdtl_p_claim_nbr;
        public string clmdtl_p_oma_cd;
        private string clmdtl_p_oma_suff;
        private string clmdtl_p_adj_nbr;

        private string ws_pat_mstr_rec_grp;
        private string ws_pat_acronym_grp;
        private string ws_pat_acronym_first6;
        private string ws_pat_acronym_last3;
        private string ws_pat_ohip_mmyy_grp;
        private string ws_pat_ohip_out_prov_grp;
        private int ws_pat_ohip_nbr;
        private string ws_pat_ohip_nbr_r_alpha;
        private string ws_pat_ohip_nbr_MB_def_grp;
        private int ws_pat_ohip_nbr_MB;
        //private string filler;
        private string ws_pat_ohip_nbr_NT_def_grp;
        private string ws_pat_ohip_nbr_NT_1_char;
        private int ws_pat_ohip_nbr_NT;
        private int ws_pat_mm;
        private int ws_pat_yy;
        //private string filler;
        private string ws_pat_ohip_mmyy_r_grp;
        private string ws_pat_direct_alpha_grp;
        private string ws_pat_alpha1;
        private string ws_pat_alpha2_3;
        private string ws_pat_direct_yy;
        private string ws_pat_direct_mm;
        private string ws_pat_direct_dd;
        private string ws_pat_direct_filler;
        private string ws_pat_chart_nbr_grp;
        private string pat_chart_1st_char;
        private string pat_chart_remainder;
        private string ws_pat_chart_nbr_2_grp;
        private string pat_chart_1st_char_2;
        private string pat_chart_remainder_2;
        private string ws_pat_chart_nbr_3_grp;
        private string pat_chart_1st_char_3;
        private string pat_chart_remainder_3;
        private string ws_pat_chart_nbr_4_grp;
        private string pat_chart_1st_char_4;
        private string pat_chart_remainder_4;
        private string ws_pat_chart_nbr_5_grp;
        private string pat_chart_1st_char_5;
        private string pat_chart_remainder_5;
        //private string ws_pat_surname;
        private string ws_pat_surname_r_grp;
        private string ws_pat_surname_first6;
        private string ws_pat_surname_last19;
        private string ws_pat_surname_rr_grp;
        private string ws_pat_surname_first3;
        private string ws_pat_surname_last22;
        //private string ws_pat_given_name;
        private string ws_pat_given_name_r_grp;
        private string ws_pat_given_name_first3;
        private string ws_pat_given_name_last14;
        private string ws_pat_given_name_rr_grp;
        private string ws_pat_given_name_first1;
        //private string filler;
        private string ws_pat_init_grp;
        private string ws_pat_init1;
        private string ws_pat_init2;
        private string ws_pat_init3;
        private string ws_pat_location_field_grp;
        private string ws_pat_location_field_1_3;
        //private string filler;
        private string ws_pat_last_doc_nbr_seen;
        private int ws_pat_birth_date;
        private string ws_pat_birth_date_r_grp;
        //private int ws_pat_birth_date_yy;
        private string ws_pat_birth_date_yy_r_grp;
        private int ws_pat_birth_date_yy_12;
        private int ws_pat_birth_date_yy_34;
        //private int ws_pat_birth_date_mm;
        //private int ws_pat_birth_date_dd;
        private int ws_pat_date_last_maint;
        private string ws_pat_date_last_maint_r_grp;
        private int ws_pat_date_last_maint_yy;
        private int ws_pat_date_last_maint_mm;
        private int ws_pat_date_last_maint_dd;
        private int ws_pat_date_last_visit;
        private string ws_pat_date_last_visit_r_grp;
        private int ws_pat_date_last_visit_yy;
        private int ws_pat_date_last_visit_mm;
        private int ws_pat_date_last_visit_dd;
        private int ws_pat_date_last_admit;
        private string ws_pat_date_last_admit_r_grp;
        private int ws_pat_date_last_admit_yy;
        private int ws_pat_date_last_admit_mm;
        private int ws_pat_date_last_admit_dd;
        private string ws_pat_phone_nbr_grp;
        private int ws_pat_phone_nbr_first3;
        private int ws_pat_phone_nbr_last4;
        private string ws_pat_phone_nbr_remainder;
        private int ws_pat_total_nbr_visits;
        private int ws_pat_total_nbr_claims;
        private string ws_pat_sex;
        private string ws_pat_in_out;
        private int ws_pat_nbr_outstanding_claims;
        private string ws_key_pat_mstr_grp;
        private string ws_pat_i_key;
        private int ws_pat_con_nbr;
        private int ws_pat_i_nbr;
        //private string filler;
        //private int ws_pat_health_nbr;
        private string ws_pat_version_cd_grp;
        private string ws_pat_version_cd_1;
        private string ws_pat_version_cd_2;
        private string ws_pat_health_65_ind;
        private string ws_pat_expiry_date_grp;
        //private int ws_pat_expiry_yy;
        //private int ws_pat_expiry_mm;
        private string ws_pat_prov_cd;
        //private string ws_subscr_addr1;
        //private string ws_subscr_addr2;
        //private string ws_subscr_addr3;
        private string ws_subscr_prov_cd;
        //private string ws_subscr_postal_cd;
        private string ws_subscr_postal_cd_r_grp;
        private string ws_subscr_post_code1_grp;
        private string ws_subscr_post_cd1;
        private string ws_subscr_post_cd2;
        private string ws_subscr_post_cd3;
        private string ws_subscr_post_code2_grp;
        private string ws_subscr_post_cd4;
        private string ws_subscr_post_cd5;
        private string ws_subscr_post_cd6;
        //private string filler;
        private string ws_subscr_msg_data_grp;
        private string ws_subscr_msg_nbr;
        private int ws_subscr_dt_msg_no_eff_to;
        private string ws_subscr_dt_msg_no_eff_to_r_grp;
        private int ws_subscr_dt_msg_no_eff_to_yy;
        private int ws_subscr_dt_msg_no_eff_to_mm;
        private int ws_subscr_dt_msg_no_eff_to_dd;
        private string ws_subscr_dt_msg_no_eff_to_r1;
        private int ws_subscr_date_last_statement;
        private string ws_subscr_date_last_stmnt_r_grp;
        private int ws_subscr_date_last_stmnt_yy;
        private int ws_subscr_date_last_stmnt_mm;
        private int ws_subscr_date_last_stmnt_dd;
        private string ws_subscr_auto_update;
        private string ws_pat_last_mod_by;
        private int ws_pat_date_last_elig_mailing;
        private int ws_pat_date_last_elig_maint;
        private int ws_pat_last_birth_date;
        private string ws_pat_last_birth_date_r_grp;
        private int ws_pat_last_birth_date_yy;
        private int ws_pat_last_birth_date_mm;
        private int ws_pat_last_birth_date_dd;
        //private string ws_pat_last_version_cd;
        //private string ws_pat_mess_code;
        private string ws_pat_country;
        private int ws_pat_no_of_letter_sent;
        private string ws_pat_dialysis;
        private string ws_pat_ohip_validiation_status;
        private string ws_pat_obec_status;

        private string status_cobol_msg_sub_mstr;
        private string status_infos_msg_sub_mstr;
        private string feedback_msg_sub_mstr;
        /*private string flag_eof_msg_sub_mstr;
        private string eof_msg_sub_mstr;
        private string not_eof_msg_sub_mstr;
        private string msg_indexer = "M";
        private string sub_indexer = "S"; */

        private string hold_claim_detail_recs_grp;
        private string hold_oma_recs_grp;
        private string hold_accounting_nbr;
        private string[] hold_oma_rec = new string[91];
        private string[] hold_oma_cd = new string[91];
        private string[] hold_oma_cd_alpha = new string[91];
        private string[] hold_oma_cd_num = new string[91];
        private int[] hold_oma_cd_num_1 = new int[91];
        private int[] hold_oma_cd_num_2 = new int[91];
        private int[] hold_oma_cd_num_3 = new int[91];
        private string[] hold_oma_suff = new string[91];
        private int[] hold_sv_nbr_serv_incoming = new int[91];
        private int[] hold_sv_nbr_serv = new int[91];
        private string[] hold_admit_date_icc = new string[91];
        private string[] hold_sv_date = new string[91];
        private int[] hold_sv_date_yy = new int[91];
        private string[] hold_sv_date_yy_r = new string[91];
        private int[] hold_sv_date_yy_12 = new int[91];
        private int[] hold_sv_date_yy_34 = new int[91];
        private int[] hold_sv_date_mm = new int[91];
        private int[] hold_sv_date_dd = new int[91];
        private string[] hold_icc_cd = new string[91];
        private string[] hold_icc_sec = new string[91];
        private int[] hold_icc_grp = new int[91];
        private string[] hold_key_r = new string[91];
        //private string[] filler = new string[91];
        private string[] hold_sort_key_1 = new string[91];
        //private [,] hold_sv_nbr_days_conseq = new string[91, 4];   
        private int[,] hold_sv_nbr = new int[91, 4];
        private string[,] hold_sv_day = new string[91, 4];
        private int[,] hold_sv_day_num = new int[91, 4];
        private string[] hold_override_price = new string[91];
        private string[] hold_bilateral = new string[91];
        private decimal[] hold_fee_incoming = new decimal[91];
        private decimal[] hold_fee_oma = new decimal[91];
        private int[] hold_fee_oma_r = new int[91];
        private decimal[] hold_fee_ohip = new decimal[91];
        private int[] hold_fee_ohip_r = new int[91];
        private decimal[] hold_priced_tech = new decimal[91];
        private decimal[] hold_basic_tech = new decimal[91];
        private decimal[] hold_basic_prof = new decimal[91];
        private decimal[] hold_basic_fee = new decimal[91];
        private string[,] hold_oma_rec_ind = new string[91, 9];
        private string[,] hold_oma_add_on_cd = new string[91, 11];
        private string[] hold_oma_ind_card_requireds = new string[91];
        private string[,] hold_oma_ind_card_required = new string[91, 4];
        private string[,] hold_oma_fees = new string[91, 3];
        private decimal[,] hold_oma_fee_1 = new decimal[91, 3];
        private decimal[,] hold_oma_fee_2 = new decimal[91, 3];
        private decimal[,] hold_fee_min = new decimal[91, 3];
        private decimal[,] hold_fee_max = new decimal[91, 3];
        private int[,] hold_oma_fee_anae = new int[91, 3];
        private int[,] hold_oma_fee_asst = new int[91, 3];
        private int[] hold_ss_curr_prev = new int[91];
        private string[] hold_flag_fee_used = new string[91];
        private string[] hold_flag_sec_group = new string[91];
        private int[] hold_flag_sec = new int[91];
        private int[] hold_flag_grp = new int[91];
        private int[] hold_diag_cd = new int[91];
        private int[] hold_line_no = new int[91];
        private string hold_sort_oma_rec;
        private string hold_descriptions_grp;
        //private string hold_desc_1;
        //private string hold_desc_2;
        //private string hold_desc_3;
        //private string hold_desc_4;
        //private string hold_desc_5;
        private string hold_descs_r_grp;
        private string[] hold_descs = new string[6];
        private string[] hold_desc = new string[6];
        private string hold_desc_tmp_grp;
        private string hold_desc_tmp_start;
        private string hold_desc_tmp_end;
        private string hold_basic_times_desc_grp;
        private string[] hold_basic_plus_times_desc = new string[3];
        private string[] hold_basic_units = new string[3];
        private string[] hold_basic_b = new string[3];
        private string[] hold_times_units = new string[3];
        private string[] hold_times_t = new string[3];

        private string hold_grp_totals_tbl_grp;
        private decimal[] hold_grp_tot = new decimal[91];
        private string[] hold_grp_nbr = new string[91];
        private int[] hold_grp_nbr_sec = new int[91];
        private int[] hold_grp_nbr_grp = new int[91];
        private int ss_max_nbr_locs_in_doc_rec = 30;
        private int ss_max_nbr_of_desc_rec_allow = 5;
        private string flag_desc_rec;
        private string basic_plus_times_entry = "BT";
        private string adjudication_desc_entry = "A";
        private string flag_update_suspense;
        private string update_suspense = "Y";
        private string dont_update_suspense = "N";
        private string flag_create_priced_file;
        private string create_priced_file = "Y";
        private string dont_create_priced_file = "N";
        private string flag_claim_source;
        private string web_claim = "W";
        private string online_claim = "O";
        private string diskette_claim = "D";
        private string price_only_claim = "P";
        private string flag_payroll;
        private string flag_retain_prices;
        private string retain_incoming_prices = "Y";
        private string override_with_rma_prices = "N";
        private int ss_diag_ind = 1;
        private int ss_phy_ind = 2;
        private int ss_hosp_nbr_ind = 3;
        private int ss_i_o_ind = 4;
        private int ss_admit_ind = 5;
        private int ss_add_on_perc_or_flat_ind = 6;
        private int ss_special_m_suffix_ind = 7;
        private int ss_tech_ind = 8;

        private string Clmhdr_pat_ohip_id_or_chart;
        // Pat_id_rec
        private int pat_last_birth_date;
        private string pat_last_version_cd;
        private string pat_old_surname;
        private string pat_old_given_name;
        private long pat_old_health_nbr;
        private string pat_old_chart_nbr;
        private string pat_old_chart_nbr_2;
        private string pat_old_chart_nbr_3;
        private string pat_old_chart_nbr_4;
        private string pat_old_chart_nbr_5;
        private string pat_old_addr1;
        private string pat_old_addr2;
        private string pat_old_addr3;

        private string msg_sub_key;
        private string msg_sub_key_1;
        private string msg_sub_key_23;
        private string msg_sub_key_2;
        private string msg_sub_key_3;
        private string msg_rec;
        private string msg_reprint_flag;
        private string msg_auto_logout;
        private string msg_dtl1;
        private string msg_dtl2;
        private string msg_dtl3;
        private string msg_dtl4;
        private string sub_rec;
        private string sub_name;
        private string sub_fee_complex;
        private string sub_auto_logout;

        private string pat_acronym;
        private string pat_acronym_first6;
        private string pat_acronym_last3;
        private string pat_ohip_mmyy;
        private string pat_ohip_out_prov;
        private int pat_ohip_nbr;
        private int pat_mm;
        private int pat_yy;
        private string Filler;
        private string pat_ohip_mmyy_r;
        private string pat_direct_alpha_grp;
        private string pat_alpha1;
        private string pat_alpha2_3;
        private string pat_direct_yy;
        private string pat_direct_mm;
        private string pat_direct_dd;
        private string pat_direct_filler;
        private string pat_chart_nbr_grp;
        //private string pat_chart_1st_char ;        
        //private string pat_chart_remainder ;        
        private string pat_chart_nbr_2_grp;
        //private string pat_chart_1st_char;
        //private string pat_chart_remainder;        
        private string pat_chart_nbr_3_grp;
        //private string pat_chart_1st_char;
        //private string pat_chart_remainder;        
        private string pat_chart_nbr_4_grp;
        //private string pat_chart_1st_char;
        //private string pat_chart_remainder;        
        private string pat_chart_nbr_5_grp;
        //private string pat_chart_1st_char;
        //private string pat_chart_remainder;        
        private string pat_full_name;
        private string pat_surname;
        private string pat_surname_r_grp;
        private string pat_surname_first6;
        private string pat_surname_last19;
        private string pat_surname_rr_grp;
        private string pat_surname_first3;
        private string pat_surname_last22;
        private string pat_given_name;
        private string pat_given_name_r_grp;
        private string pat_given_name_first3;
        private string pat_given_name_last14;
        private string pat_given_name_rr_grp;
        private string pat_given_name_first1;
        private string pat_init_grp;
        private string pat_init1;
        private string pat_init2;
        private string pat_init3;
        private string pat_location_field_grp;
        private string pat_location_field_1_3;
        private string pat_last_doc_nbr_seen;
        private int pat_birth_date;
        private string pat_birth_date_r_grp;
        private int pat_birth_date_yy;
        private int pat_birth_date_mm;
        private int pat_birth_date_dd;
        private int pat_date_last_maint;
        private string pat_date_last_maint_r_grp;
        private int pat_date_last_maint_yy;
        private int pat_date_last_maint_mm;
        private int pat_date_last_maint_dd;
        private int pat_date_last_visit;
        private string pat_date_last_visit_r_grp;
        private int pat_date_last_visit_yy;
        private int pat_date_last_visit_mm;
        private int pat_date_last_visit_dd;
        private int pat_date_last_admit;
        private string pat_date_last_admit_r_grp;
        private int pat_date_last_admit_yy;
        private int pat_date_last_admit_mm;
        private int pat_date_last_admit_dd;
        private string pat_phone_nbr_grp;
        private int pat_phone_nbr_first3;
        private int pat_phone_nbr_last4;
        private string pat_phone_nbr_remainder;
        private int pat_total_nbr_visits;
        private int pat_total_nbr_claims;
        private string pat_sex;
        private string pat_in_out;
        private int pat_nbr_outstanding_claims;
        private string key_pat_mstr_grp;
        private string pat_i_key;
        private int pat_con_nbr;
        private int pat_i_nbr;
        private long pat_health_nbr;
        private string pat_version_cd_grp;
        private string pat_version_cd_1;
        private string pat_version_cd_2;
        private string pat_health_65_ind;
        private string pat_expiry_date_grp;
        private int pat_expiry_yy;
        private int pat_expiry_mm;
        private string pat_prov_cd;
        private string subscr_addr1;
        private string subscr_addr2;
        private string subscr_addr3;
        private string subscr_prov_cd;
        private string subscr_postal_cd;
        private string subscr_postal_cd_r_grp;
        private string subscr_post_code1_grp;
        private string subscr_post_cd1;
        private string subscr_post_cd2;
        private string subscr_post_cd3;
        private string subscr_post_code2_grp;
        private string subscr_post_cd4;
        private string subscr_post_cd5;
        private string subscr_post_cd6;
        private string subscr_msg_data;
        private string subscr_msg_nbr;
        private int subscr_date_msg_nbr_eff_to;
        private string subscr_date_msg_nbr_eff_to_r;
        private int subscr_date_msg_nbr_eff_to_yy;
        private int subscr_date_msg_nbr_eff_to_mm;
        private int subscr_date_msg_nbr_eff_to_dd;
        private string subscr_date_msg_nbr_eff_to_r1;
        private int subscr_date_last_statement;
        private string subscr_date_last_statement_r_grp;
        private int subscr_date_last_statement_yy;
        private int subscr_date_last_statement_mm;
        private int subscr_date_last_statement_dd;
        private string subscr_auto_update;
        private string pat_last_mod_by;
        private int pat_date_last_elig_mailing;
        private int pat_date_last_elig_maint;
        //private int pat_last_birth_date ;        
        //private string pat_last_version_cd ;        
        private string pat_mess_code;
        private string pat_country;
        private int pat_no_of_letter_sent;
        private string pat_dialysis;
        private string pat_ohip_validiation_status;
        private string pat_obec_status;

        // added
        private string endOfJob = "End of Job";

        private string batctrl_batch_nbr_grp;
        private string batctrl_date_period_end_grp;
        private int batctrl_doc_nbr_ohip;
        private int batctrl_nbr_claims_in_batch;
        private string clmhdr_pat_ohip_id_or_chart;
        private string clmdtl_b_data_grp;
        //private string clmdtl_b_batch_num;
        //private int clmdtl_b_claim_nbr;
        //private string clmdtl_b_oma_cd;
        //private string clmdtl_b_oma_suff;
        //private string clmdtl_b_adj_nbr;
        //private string clmdtl_b_key_type;
        private string clmdtl_desc_rec_grp;
        //private string clmdtl_desc;

        //private string batctrl_batch_nbr
        //private int batctrl_bat_clinic_nbr_1_2;
        //private string batctrl_bat_doc_nbr;
        private string batctrl_bat_week_day_grp;
        private int batctrl_bat_week;
        private int batctrl_bat_day;
        //private int batctrl_bat_week_day_r;
        private string key_batctrl_file_r;
        private string key_batctrl_file;
        //private string batctrl_batch_type;
        private string batctrl_adj_cd;
        private string batctrl_adj_cd_sub_type;
        //private int batctrl_last_claim_nbr;
        //private string batctrl_clinic_nbr;
        private string batctrl_clinic_nbr_1_2;
        private string batctrl_clinic_nbr_3_4;
        //private int batctrl_doc_nbr_ohip;
        private string batctrl_hosp;
        //private string batctrl_payroll;
        //private string batctrl_loc;
        private string batctrl_loc1;
        private string batctrl_loc2_4;
        //private int batctrl_agent_cd;
        //private string batctrl_i_o_pat_ind;
        private string batctrl_date_batch_entered;
        private string batctrl_date_period_end;
        //private string batctrl_date_period_end_yy;
        //private string batctrl_date_period_end_mm;
        //private string batctrl_date_period_end_dd;
        //private int batctrl_cycle_nbr;
        //private decimal batctrl_amt_est;
        //private decimal batctrl_amt_act;
        //private int batctrl_svc_est;
        //private int batctrl_svc_act;
        private string batctrl_ar_yy_mm;
        private decimal batctrl_calc_ar_due;
        private decimal batctrl_calc_tot_rev;
        private decimal batctrl_manual_pay_tot;
        private string batctrl_batch_status;
        //private int batctrl_nbr_claims_in_batch;




        private string pat_acronym_grp;

        //private long Pat_health_nbr;
        private string clmdtl_p_data_grp;
        //private string clmdtl_p_batch_nbr;
        //private int clmdtl_p_clinic_nbr_1_2;
        //private string clmdtl_p_doc_nbr;
        //private int clmdtl_p_week;
        //private int clmdtl_p_day;
        //private int clmdtl_p_claim_nbr;
        //private string clmdtl_p_oma_cd;
        //private string clmdtl_p_oma_suff;
        //private string clmdtl_p_adj_nbr;

        // --
        private string clmdtl_id;
        private string clmdtl_batch_nbr;
        private int clmdtl_claim_nbr;
        private string clmdtl_oma_cd;
        private string clmdtl_oma_suff;
        private int clmdtl_adj_nbr;
        private string clmdtl_det_rec;
        private string clmdtl_rev_group_cd;
        private int clmdtl_agent_cd;
        private string clmdtl_adj_cd;
        private int clmdtl_nbr_serv;
        private string clmdtl_nbr_serv_r;
        private string clmdtl_adjust_reprint;
        //private string Filler ;        
        private string clmdtl_sv_date;
        private int clmdtl_sv_yy;
        private int clmdtl_sv_mm;
        private int clmdtl_sv_dd;
        private string clmdtl_consec_dates_grp;
        //private string clmdtl_consec_dates_r ;        
        private string[] clmdtl_consecutive_dates_grp = new string[3];
        private int[] clmdtl_sv_nbr = new int[4];
        private string[] clmdtl_sv_day = new string[4];
        private decimal clmdtl_amt_tech_billed;
        private decimal clmdtl_fee_oma;
        private decimal clmdtl_fee_ohip;
        private string clmdtl_date_period_end;
        private int clmdtl_cycle_nbr;
        private int clmdtl_diag_cd;
        private int clmdtl_line_no;
        private string clmdtl_resubmit_flag;
        private string clmdtl_reserve_for_future;
        private string clmdtl_desc_rec;
        private string clmdtl_desc;
        private string clmdtl_filler;
        private string clmdtl_orig_batch_id_grp;
        private string clmdtl_orig_batch_nbr;
        private string clmdtl_orig_batch_nbr_r;
        private int clmdtl_orig_batch_nbr_1_2;
        private string clmdtl_orig_batch_nbr_4_9;
        private int clmdtl_orig_claim_nbr_in_batch;
        private string clmdtl_orig_batch_id_r;
        private string clmdtl_orig_complete_batch_nbr;
        private string clmdtl_orig_complete_batch_n_r;
        private int clmdtl_orig_clinic_number;
        private string clmdtl_orig_doc_number;
        private int clmdtl_orig_batch_number;
        private int clmdtl_orig_claim_number;
        private string clmdtl_claims_mstr;
        private string clmdtl_b_key_type;
        private string clmdtl_b_data;
        private string clmdtl_b_batch_num;
        private string clmdtl_b_batch_nbr;
        //private int clmdtl_b_clinic_nbr_1_2 ;        
        // private string clmdtl_b_doc_nbr ;        
        // private string clmdtl_b_doc_nbr_r ;        
        // private string clmdtl_b_doc_nbr_2_4 ;        
        private string clmdtl_b_batch_number;
        //private int clmdtl_b_week ;        
        // private int clmdtl_b_day ;        
        // private int clmdtl_b_claim_nbr ;        
        // private string clmdtl_b_oma_cd ;        
        // private string clmdtl_b_oma_suff ;        
        // private string clmdtl_b_adj_nbr ;        
        //private string clmdtl_b_data_r ;        
        // private string clmdtl_b_pat_id ;                        
        private string clmdtl_p_claims_mstr;
        private string clmdtl_p_key_type;
        private string clmdtl_p_data;
        private string clmdtl_p_batch_nbr;
        // private int clmdtl_p_clinic_nbr_1_2 ;        
        // private string clmdtl_p_doc_nbr ;        
        // private int clmdtl_p_week ;        
        // private int clmdtl_p_day ;        
        // private int clmdtl_p_claim_nbr ;        
        // private string clmdtl_p_oma_cd ;        
        // private string clmdtl_p_oma_suff ;
        // private string clmdtl_p_adj_nbr;

        private int pat_Mstr_Rec_Ctr;  // added ???             

        private string ws_e402_e403;
        private string ws_g247;
        private string ws_e797;
        private string ws_z491_z580;
        private string ws_e414;
        private string ws_p030;
        private string ws_a895;
        private string ws_wnnn;
        private string ws_knnn;
        private string ws_z512;
        private string ws_z514;
        private string ws_z580;
        private string ws_edit_80;
        private int ws_total_nbr_svc;
        private string ws_a075;
        private string ws_g325;

        private int iconst_clinic_nbr_1_2;
        private string iconst_clinic_nbr;
        private string iconst_clinic_name;
        private int iconst_clinic_cycle_nbr;
        private string iconst_date_period_end_grp;
        private int iconst_date_period_end_yy_child;
        private int iconst_date_period_end_mm_child;
        private int iconst_date_period_end_dd_child;
        private string iconst_clinic_addr_grp;
        private string iconst_clinic_addr_l1_child;
        private string iconst_clinic_addr_l2;
        private string iconst_clinic_addr_l3_child;
        private string iconst_clinic_addr_r_child_redefines;
        private string[] iconst_clinic_addr = new string[3];
        private string iconst_clinic_card_colour;
        private decimal iconst_clinic_over_lim1;
        private decimal iconst_clinic_under_lim2;
        private decimal iconst_clinic_under_lim3;
        private decimal iconst_clinic_over_lim4;
        private string iconst_clinic_batch_nbr;
        private decimal iconst_reduction_factor;
        private decimal iconst_overpay_factor;
        private string iconst_clinic_pay_batch_nbr;


        private int RowCtr;
        private int ctr;

        #endregion

        #region Screen Section
        public ObservableCollection<ScreenData> ScreenSection()
        {
            ObservableCollection<ScreenData> ScreenDataCollection = new ObservableCollection<ScreenData>
        {
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-claim-rec-data.",Line = "1",Col = 1,Data1 = "blank screen",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-claim-rec-data.",Line = "01",Col = 1,Data1 = "D001B",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-claim-rec-data.",Line = "01",Col = 31,Data1 = "CLAIMS DATA ENTRY",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-claim-rec-data.",Line = "01",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9999",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_yy",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-claim-rec-data.",Line = "01",Col = 75,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-claim-rec-data.",Line = "01",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-claim-rec-data.",Line = "01",Col = 78,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-claim-rec-data.",Line = "01",Col = 79,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_dd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "03",Col = 1,Data1 = "CLAIM ID    :",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "03",Col = 21,Data1 = "-",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "04",Col = 1,Data1 = "H/C...:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "04",Col = 21,Data1 = "VER:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "04",Col = 27,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "04",Col = 32,Data1 = "LAST.:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "04",Col = 54,Data1 = "DOB(CUR/OLD)",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "04",Col = 74,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "05",Col = 1,Data1 = "PAT ID:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "05",Col = 21,Data1 = "EXP:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "05",Col = 32,Data1 = "FIRST:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "05",Col = 54,Data1 = "ELIG(CHG/MAIL)",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "05",Col = 74,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "06",Col = 1,Data1 = "MESS:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "06",Col = 12,Data1 = "ADDR:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "8",Col = 1,Data1 = "REFER DOC:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "8",Col = 22,Data1 = "LOC   :",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "8",Col = 36,Data1 = "HOSP:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "8",Col = 46,Data1 = "I/O PATIENT:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "8",Col = 63,Data1 = "ADMIT:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "8",Col = 73,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "8",Col = 76,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "9",Col = 1,Data1 = "DIAG     :",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "9",Col = 22,Data1 = "REVIEW:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "9",Col = 36,Data1 = "MESSAGE ID :",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "9",Col = 53,Data1 = "SUBDIVISION:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "9",Col = 70,Data1 = "PAYROLL:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "10",Col = 1,Data1 = "OMA   SF   SERV DATE      #S   DIAG",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "10",Col = 30,Data1 = "DD  #S   DD  #S   DD  #S",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-lit.",Line = "10",Col = 52,Data1 = "OMA FEE      (OHIP FEE)  ICC   S/G",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "03",Col = 11,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "clmhdr_clinic_nbr_1_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "03",Col = 14,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "xxx",MaxLength = 3,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "clmhdr_doc_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "03",Col = 18,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "clmhdr_batch_nbr_7_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "03",Col = 22,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_last_claim_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(10)",MaxLength = 10,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_scr_health_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-pat-health-nbr"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 25,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_version_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-version-cd"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 28,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_last_version_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 38,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(15)",MaxLength = 15,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_surname",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-last-name"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 66,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(4)",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_pat_birth_date_yy",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-birth-yy"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 70,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_pat_birth_date_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-birth-mm"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 72,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_pat_birth_date_dd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-birth-dd"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 75,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_last_birth_yy_34",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 77,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_last_birth_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "04",Col = 79,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_last_birth_dd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_ohip_chart_flag",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-ohip-chart-flag"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 9,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(11)",MaxLength = 9,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_ohip_mmyy",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-ohip-chart"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 25,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_pat_expiry_yy",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-expiry-yy"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 27,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_pat_expiry_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-expiry-mm"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 38,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(12)",MaxLength = 12,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_given_name",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-given-name"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 68,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_last_elig_maint_yy_34",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 70,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_last_elig_maint_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 72,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_last_elig_maint_dd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 75,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_last_elig_mail_yy_34",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 77,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_last_elig_mail_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "05",Col = 79,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_last_elig_mail_dd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "06",Col = 8,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(3)",MaxLength = 3,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_mess_code",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "06",Col = 17,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(21)",MaxLength = 21,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_subscr_addr1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-subscr-addr1"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "06",Col = 38,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(21)",MaxLength = 21,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_subscr_addr2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-subscr-addr2"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "06",Col = 59,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(21)",MaxLength = 21,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_subscr_addr3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-subscr-addr3"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "07",Col = 17,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(6)",MaxLength = 6,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_subscr_postal_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-postal-code"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "8",Col = 12,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999999",MaxLength = 6,RowDataType = rowDataType.NumericBlankWhenZero,IsRequired = false,InputVariableName = "clmhdr_refer_doc_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-refer-doc"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "8",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "clmhdr_loc",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-loc"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "8",Col = 41,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_clmhdr_hosp",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hosp-nbr"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "8",Col = 55,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "clmhdr_i_o_pat_ind",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-i-o-pat-ind"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "8",Col = 69,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "clmhdr_date_admit_yy_12",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-date-admit-yy-12"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "8",Col = 71,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "clmhdr_date_admit_yy_34",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-date-admit-yy-34"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "8",Col = 74,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "clmhdr_date_admit_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-date-admit-mm"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "8",Col = 77,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "clmhdr_date_admit_dd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-date-admit-dd"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "9",Col = 12,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.NumericBlankWhenZero,IsRequired = false,InputVariableName = "clmhdr_diag_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-diag-cd"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "9",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "clmhdr_manual_review",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-man-review"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "9",Col = 46,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "clmhdr_msg_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-msg-nbr"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "9",Col = 63,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "clmhdr_sub_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sub-nbr"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr.",Line = "9",Col = 77,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "clmhdr_payroll",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-payroll"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "04",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9(10)",MaxLength = 10,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_pat_health_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "04",Col = 25,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_version_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "04",Col = 28,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_last_version_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "04",Col = 38,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(15)",MaxLength = 15,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_surname",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "05",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xxx9(9)",MaxLength = 9,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_ohip_mmyy",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "05",Col = 25,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(2)",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_pat_expiry_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "05",Col = 27,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(2)",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_pat_expiry_yy",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "05",Col = 38,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(12)",MaxLength = 12,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_given_name",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "06",Col = 8,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(3)",MaxLength = 3,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_pat_mess_code",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "06",Col = 17,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(21)",MaxLength = 21,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_subscr_addr1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "06",Col = 38,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(21)",MaxLength = 21,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_subscr_addr2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "06",Col = 59,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(21)",MaxLength = 21,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_subscr_addr3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-pat-info.",Line = "07",Col = 17,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(6)",MaxLength = 6,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_subscr_postal_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-last-claim-lit.",Line = "03",Col = 67,Data1 = "Nbr of Svc:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-last-claim-lit.",Line = "03",Col = 77,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xxx",MaxLength = 3,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "last_claim_flag",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-last-claim"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-pat-surname.",Line = "07",Col = 70,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(6)",MaxLength = 6,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "clmhdr_pat_acronym6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-pat-surname"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-patient-verif.",Line = "02",Col = 45,Data1 = "\"R\"estart claim,\"T\"ry # again,\"A\"dd patient",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-patient-verif.",Line = "02",Col = 80,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "reply_create_pat",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clmhdr-pat-verif"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-clear-pat-verif.",Line = "02",Col = 36,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         // todo "hold_oma_cd[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x999",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_cd_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-cd10"},


         // todo  "hold_oma_suff[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 6,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "a",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_oma_suff_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-oma-suff10"},


         // todo "hold_sv_date_yy_12[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 8,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_12_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-hold-sv-date-yy-12-10"},

         // todo "hold_sv_date_yy_34[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 10,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_yy_34_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-yy-34-10"},

         // todo "detailNoControlName1[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 12,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det10"},

         // todo  "hold_sv_date_mm[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_mm_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-mm10"},

         // todo "detailNoControlName2[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "2",Col = 15,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clmhdr-det-10"},

         // todo  "hold_sv_date_dd[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-11"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-22"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-33"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-44"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-55"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-66"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-77"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-88"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-99"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_date_dd_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-date-dd-100"},

         // todo "hold_sv_nbr_serv[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-01"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-02"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-03"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-04"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-05"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-06"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-07"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-08"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-09"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 21,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_serv_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-010"},

         // todo  hold_diag_cd[ss_clmdtl_oma]
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 25,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_diag_cd_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-diag-cd10"},

         // todo "hold_sv_nbr[ss_clmdtl_oma,1]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_1_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_2_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_3_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_4_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_5_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_6_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_7_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_8_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_9_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 33,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_10_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-10"},


         // todo  "hold_sv_day[ss_clmdtl_oma,1]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_1_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_2_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_3_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_4_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_5_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_6_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_7_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_8_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_9_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 30,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xx",MaxLength = 2,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_sv_day_10_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-10"},


         // todo "hold_sv_nbr[ss_clmdtl_oma,2]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_1_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_2_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_3_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_4_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_5_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_6_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_7_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_8_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_9_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 40,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_10_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-2-10"},


         // todo "hold_sv_day[ss_clmdtl_oma,2]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_1_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_2_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_3_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_4_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_5_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_6_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_7_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_8_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_9_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 37,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_10_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-2-10"},

         // todo "hold_sv_nbr[ss_clmdtl_oma,3]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_1_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_2_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_3_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_4_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_5_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_6_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_7_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_8_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_9_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 47,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_nbr_10_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-nbr-3-10"},


         // todo "hold_sv_day[ss_clmdtl_oma,3]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_1_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_2_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_3_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_4_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_5_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_6_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_7_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_8_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_9_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 44,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_sv_day_10_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-sv-day-3-10"},

         // todo  "hold_fee_oma[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_oma_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-oma10"},


         // todo "hold_fee_ohip[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 61,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_fee_ohip_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-fee-ohip10"},


         // todo "hold_icc_cd[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_icc_cd_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-icc-cd10"},


         // todo  "hold_flag_sec_group[ss_clmdtl_oma]"
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "11",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp1"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "12",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp2"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "13",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp3"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "14",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp4"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "15",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp5"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "16",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_6",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp6"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "17",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_7",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp7"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "18",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_8",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp8"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "19",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_9",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp9"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-clmhdr-det.",Line = "20",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "hold_flag_sec_group_10",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-sec-grp10"},



         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "22",Col = 1,Data1 = "DESC #1:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "22",Col = 9,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(22)",MaxLength = 22,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_desc_1",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-desc-1"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "22",Col = 31,Data1 = "#2:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "22",Col = 34,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(22)",MaxLength = 22,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_desc_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-desc-2"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "22",Col = 56,Data1 = "#3:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "22",Col = 59,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(22)",MaxLength = 22,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_desc_3",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-desc-3"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "23",Col = 1,Data1 = "DESC #4:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "23",Col = 9,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(22)",MaxLength = 22,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_desc_4",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-desc-4"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "23",Col = 31,Data1 = "#5:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "23",Col = 34,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(22)",MaxLength = 22,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "hold_desc_5",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-hold-desc-5"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "24",Col = 2,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_highest_grp_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-det-desc.",Line = "24",Col = 30,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "z(4)9.99",MaxLength = 8,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_highest_grp_tot",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "file-status-display.",Line = "24",Col = 1,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(42)",MaxLength = 42,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_file_err_msg",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "file-status-display.",Line = "24",Col = 44,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(7)",MaxLength = 7,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "ws_disp_pat_key_type",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "file-status-display.",Line = "24",Col = 56,Data1 = "FILE STATUS = ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "file-status-display.",Line = "24",Col = 70,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(11)",MaxLength = 11,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "status_cobol_display",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "err-msg-line.",Line = "25",Col = 2,Data1 = " ERROR -  ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "err-msg-line.",Line = "25",Col = 9,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(75)",MaxLength = 75,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "err_msg_comment",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "confirm.",Line = "25",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "continue_reply",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-loading-message.",Line = "25",Col = 1,Data1 = "PGM M010 IS LOADING....PLEASE WAIT",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-det-line-2.",Line = "12",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-det-line-3.",Line = "13",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-det-line-4.",Line = "14",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-det-line-5.",Line = "15",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-det-line-6.",Line = "16",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-det-line-7.",Line = "17",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-det-line-8.",Line = "18",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-det-line-9.",Line = "19",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-det-line-10.",Line = "20",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "11",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "12",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "13",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "14",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "15",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "16",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "17",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "18",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "19",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-detail-lines.",Line = "20",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-line-24.",Line = "24",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-line-25.",Line = "25",Col = 1,Data1 = "blank line",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "blank-screen.",Line = "1",Col = 1,Data1 = "blank screen",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "verification-screen-1.",Line = "24",Col = 60,Data1 = "ACCEPT (Y/N/M) ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "verification-screen-2.",Line = "24",Col = 54,Data1 = "ACCEPT (Y/N/M/D/P/S)",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-verification.",Line = "24",Col = 75,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "flag_accept",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-reject-entry.",Line = "24",Col = 50,Data1 = "ENTRY IS ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-reject-entry.",Line = "24",Col = 59,Data1 = "REJECTED",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ring-bell.",Line = "24",Col = 1,Data1 = " ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-confirm",Line = "23",Col = 1,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "confirm_space",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-batch-control-data.",Line = "1",Col = 1,Data1 = "blank screen",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-batch-control-data.",Line = "01",Col = 1,Data1 = "D001A",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-batch-control-data.",Line = "01",Col = 31,Data1 = "CLAIMS BATCH DATA ENTRY",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-batch-control-data.",Line = "01",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(4)",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_yy",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-batch-control-data.",Line = "01",Col = 75,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-batch-control-data.",Line = "01",Col = 76,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-batch-control-data.",Line = "01",Col = 78,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-title-batch-control-data.",Line = "01",Col = 79,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_dd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-old-or-new-batch-option.",Line = "03",Col = 29,Data1 = "1 -CREATE NEW BATCH",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-old-or-new-batch-option.",Line = "04",Col = 29,Data1 = "2 -CONTINUE EXISTING BATCH",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-old-or-new-batch-option.",Line = "06",Col = 36,Data1 = "OPTION -",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-old-or-new-batch-option.",Line = "06",Col = 43,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = true,InputVariableName = "option",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-option"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-source.",Line = "07",Col = 1,Data1 = "CLAIM SOURCE - ORIGINAL 'S'OURCE DOCUMENT / 'C'OMPUTER GENERATED MATERIAL:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-claim-source.",Line = "07",Col = 59,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(01)",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "def_claim_source",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-batch-type.",Line = "09",Col = 1,Data1 = "BATCH TYPE  :",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-batch-type.",Line = "09",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_batch_type",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-batch-type"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-batch-nbr.",Line = "10",Col = 1,Data1 = "BATCH NUMBER:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-batch-nbr.",Line = "10",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_bat_clinic_nbr_1_2",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-clinic-nbr-1-2"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-batch-nbr.",Line = "10",Col = 16,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xxx",MaxLength = 3,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_bat_doc_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-doc-nbr"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-dis-week-day.",Line = "10",Col = 22,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "999",MaxLength = 3,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_bat_week_day_d",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-week-day"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-dis-week-day.",Line = "12",Col = 25,Data1 = "   ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-clear-dept"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-dept-nbr.",Line = "10",Col = 22,Data1 = "DEPT:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-clear-dept1"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-dept-nbr.",Line = "10",Col = 28,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_hold_screen_dept",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-dept"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-doc-name.",Line = "10",Col = 31,Data1 = "(",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-doc-name1"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-doc-name.",Line = "10",Col = 32,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "XXX",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "doc_inits",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-disp-inits"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-doc-name.",Line = "10",Col = 36,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x(24)",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "doc_name",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "05",GroupNameLevel2 = "scr-disp-name"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-doc-name.",Line = "10",Col = 61,Data1 = ")",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-spec-cd.",Line = "11",Col = 1,Data1 = "SPECIALTY CD:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-spec-cd.",Line = "11",Col = 13,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_doc_spec_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-acpt-spec"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batch-period-cycle.",Line = "10",Col = 30,Data1 = "PERIOD END DATE",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batch-period-cycle.",Line = "10",Col = 46,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9(4)",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_date_period_end_yy",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-period-ends-yy"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batch-period-cycle.",Line = "10",Col = 50,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batch-period-cycle.",Line = "10",Col = 51,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_date_period_end_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-period-ends-mm"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batch-period-cycle.",Line = "10",Col = 53,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batch-period-cycle.",Line = "10",Col = 54,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_date_period_end_dd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-period-ends-dd"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batch-period-cycle.",Line = "10",Col = 60,Data1 = "CYCLE NUMBER",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batch-period-cycle.",Line = "10",Col = 73,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_cycle_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-cycle-nbr"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "13",Col = 1,Data1 = "CLINIC NUMBER..:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "13",Col = 18,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "xxxx",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_clinic_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-batctrl-clinic-nbr"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "15",Col = 1,Data1 = "DOCTOR NUMBER..:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "15",Col = 18,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "xxx",MaxLength = 3,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_bat_doc_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-batctrl-doc-nbr"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "17",Col = 1,Data1 = "LOCATION.......:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         //new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "17",Col = 18,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "a999",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_loc",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-batctrl-loc"},
         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "17",Col = 18,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xxxx",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_loc",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-batctrl-loc"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "19",Col = 1,Data1 = "AGENT CODE.....:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "19",Col = 18,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_agent_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-batctrl-agent-cd"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "21",Col = 1,Data1 = "IN/OUT PATIENT.:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "21",Col = 18,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_i_o_pat_ind",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-batctrl-i-o-pat-ind"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "23",Col = 1,Data1 = "PAYROLL........:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-mask.",Line = "23",Col = 18,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_payroll",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-batctrl-payroll"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-lit-batctrl-data.",Line = "11",Col = 41,Data1 = "- BATCH CONTROL INFORMATION -",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-lit-batctrl-data.",Line = "13",Col = 31,Data1 = "ESTIMATED $ AMOUNT =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-lit-batctrl-data.",Line = "15",Col = 31,Data1 = "ACTUAL    $ AMOUNT =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-lit-batctrl-data.",Line = "15",Col = 64,Data1 = "OUT BY",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-lit-batctrl-data.",Line = "18",Col = 31,Data1 = "ESTIMATED SVC COUNT =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-lit-batctrl-data.",Line = "20",Col = 31,Data1 = "ACTUAL    SVC COUNT =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-lit-batctrl-data.",Line = "20",Col = 64,Data1 = "OUT BY",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-batctrl-estimates.",Line = "13",Col = 52,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_amt_est",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-amt-est-input"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-batctrl-estimates.",Line = "18",Col = 53,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "z,zz9",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_svc_est",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-svc-est-input"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batctrl-data.",Line = "13",Col = 52,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_amt_est",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-amt-est"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batctrl-data.",Line = "15",Col = 52,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_amt_act",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-amt-act"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batctrl-data.",Line = "15",Col = 71,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "zz,zz9.99-",MaxLength = 9,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_batctrl_amt_diff",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-amt-diff"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batctrl-data.",Line = "18",Col = 53,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "z,zz9",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_svc_est",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-svc-est"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batctrl-data.",Line = "20",Col = 53,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "z,zz9",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_svc_act",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-svc-act"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-val-batctrl-data.",Line = "20",Col = 72,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "z,zz9",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ws_batctrl_svc_diff",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = "scr-svc-diff"},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-change-verification.",Line = "22",Col = 32,Data1 = "CHANGE BATCH CONTROL",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-change-verification.",Line = "22",Col = 49,Data1 = "INFORMATION (Y/N)",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-change-verification.",Line = "22",Col = 65,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "change_reply",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-change-password.",Line = "22",Col = 70,Data1 = "PASSWORD",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-acpt-change-password.",Line = "22",Col = 78,Data1 = "",RowStatus = rowStatus.InputAutoTab,NumericFormat = "xxx",MaxLength = 3,RowDataType = rowDataType.AlphaNumericPassword,IsRequired = false,InputVariableName = "password_input",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-1.",Line = "1",Col = 1,Data1 = "blank screen",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-1.",Line = "5",Col = 20,Data1 = "# OF BATCH CONTROL  READS    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-1.",Line = "5",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_read_batctrl_mstr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-1.",Line = "6",Col = 20,Data1 = "# OF CLAIMS MASTER  READS    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-1.",Line = "6",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_read_claims_mstr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-1.",Line = "7",Col = 20,Data1 = "# OF PATIENT MSTR   READS    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-1.",Line = "7",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_read_pat_mstr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-2.",Line = "8",Col = 20,Data1 = "# OF DOCTOR MSTR    READS    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-2.",Line = "8",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_read_doc_mstr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-2.",Line = "9",Col = 20,Data1 = "# OF LOCATION MSTR  READS    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-2.",Line = "9",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_read_loc_mstr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-2.",Line = "10",Col = 20,Data1 = "# OF OMA FEE MSTR   READS    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-2.",Line = "10",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_read_oma_mstr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "11",Col = 20,Data1 = "# OF CONSTANTS MSTR READS    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "11",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_read_const_mstr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "12",Col = 20,Data1 = "# OF MSG SUB MSTR READS      =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "12",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_read_msg_sub_mstr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "13",Col = 20,Data1 = "# OF BATCH CONTROL WRITES    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "13",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_writ_batctrl_file",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "14",Col = 20,Data1 = "# OF CLAIMS MASTER WRITES    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "14",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_writ_claims_mstr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "15",Col = 20,Data1 = "# OF CORRECTE PAT  WRITES    =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-3.",Line = "15",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_write_corrected_pat",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "16",Col = 20,Data1 = "# OF BATCH CONTROL RE-WRITES =",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "16",Col = 55,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(7)",MaxLength = 7,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "ctr_rewrit_batctrl_file",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "21",Col = 20,Data1 = "PROGRAM D001 ENDING",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "21",Col = 38,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "9(4)",MaxLength = 4,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_yy",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "21",Col = 42,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "21",Col = 43,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_mm",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "21",Col = 45,Data1 = "/",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "21",Col = 46,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_dd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "21",Col = 50,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_hrs",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "21",Col = 52,Data1 = ":",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "scr-closing-screen-4.",Line = "21",Col = 53,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "99",MaxLength = 2,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "sys_min",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

         new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ENTER ! AND [NL] TO CONTINUE:",Line = "23",Col = 1,Data1 = "ENTER ! AND [NL] TO CONTINUE:",RowStatus = rowStatus.Display,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "continue_reply",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "INVALID RESPONSE PLEASE ENTER AN ! TO CONTINUE:",Line = "24",Col = 1,Data1 = "INVALID RESPONSE PLEASE ENTER AN ! TO CONTINUE:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay.",Line = "3",Col = 1,Data1 = "           !!!!! WARNING !!!!!",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay.",Line = "4",Col = 1,Data1 = "An OUTSTANDING BATCH was found - ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay.",Line = "4",Col = 34,Data1 = "",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 8,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "d001_batch_nbr_grp",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},


          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay1.",Line = "5",Col = 1,Data1 = "LOCATION was: ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay1.",Line = "5",Col = 15,Data1 = "",RowStatus = rowStatus.Display,NumericFormat = "x(8)",MaxLength = 8,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_loc",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay1.",Line = "6",Col = 1,Data1 = "AGENT    was: ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay1.",Line = "6",Col = 15,Data1 = "",RowStatus = rowStatus.Display,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "batctrl_agent_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay1.",Line = "7",Col = 1,Data1 = "PAT I/O  was: ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay1.",Line = "7",Col = 15,Data1 = "",RowStatus = rowStatus.Display,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_i_o_pat_ind",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay1.",Line = "8",Col = 1,Data1 = "PAYROLL  was: ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay1.",Line = "8",Col = 15,Data1 = "",RowStatus = rowStatus.Display,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "batctrl_payroll",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},


          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay2.",Line = "5",Col = 1,Data1 = "LOCATION was: ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay2.",Line = "5",Col = 15,Data1 = "",RowStatus = rowStatus.Display,NumericFormat = "x(8)",MaxLength = 8,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "d001_loc",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay2.",Line = "6",Col = 1,Data1 = "AGENT    was: ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay2.",Line = "6",Col = 15,Data1 = "",RowStatus = rowStatus.Display,NumericFormat = "9",MaxLength = 1,RowDataType = rowDataType.Numeric,IsRequired = false,InputVariableName = "d001_agent_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay2.",Line = "7",Col = 1,Data1 = "PAT I/O  was: ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay2.",Line = "7",Col = 15,Data1 = "",RowStatus = rowStatus.Display,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "d001_i_o_pat_ind",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay2.",Line = "8",Col = 1,Data1 = "PAYROLL  was: ",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay2.",Line = "8",Col = 15,Data1 = "",RowStatus = rowStatus.Display,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "d001_payroll",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "5",Col = 1,Data1 = "Unfortunately all required parameters were not available.",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "6",Col = 1,Data1 = "For the displayed batch, please re-enter the parameters, as prompted below:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0 ,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "7",Col = 1,Data1 = "Enter a 6 character BATCH NUMBER:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "7",Col = 35,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(8)",MaxLength = 8,RowDataType = rowDataType.AlphaNumeric,IsRequired = true,InputVariableName = "d001_batch_nbr",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "8",Col = 1,Data1 = "Enter a 4 character LOCATION:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "8",Col = 35,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x(4)",MaxLength = 4,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "d001_loc",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "9",Col = 1,Data1 = "Enter a 1 character AGENT:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "9",Col = 35,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "d001_agent_cd",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "10",Col = 1,Data1 = "Enter a 1 character Patient IN/OUT:",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "10",Col = 35,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "d001_i_o_pat_ind",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "11",Col = 1,Data1 = "Enter a 1 character Payroll:",RowStatus = rowStatus.Display ,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay3.",Line = "11",Col = 35,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "d001_payroll",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay4.",Line = "12",Col = 1,Data1 = "Recovery of the batch will now commence - Press ENTER to BEGIN Process ...",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay4.",Line = "12",Col = 78,Data1 = "",RowStatus = rowStatus.Input,NumericFormat = "x",MaxLength = 1,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "process_batch",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay5.",Line = "13",Col = 1,Data1 = "Thank you!",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},

          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay6.",Line = "15",Col = 1,Data1 = "           !!!!! ERROR !!!!!",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay6.",Line = "16",Col = 1,Data1 = "The file which stores the batch you were working on CAN'T BE READ!",RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""},
          new ScreenData {GroupNumberLevel1 = "01",GroupNameLevel1 = "ConsoleDisplay6.",Line = "17",Col = 1,Data1 = "Report this error to DYAD." ,RowStatus = rowStatus.Display,NumericFormat = "",MaxLength = 0,RowDataType = rowDataType.AlphaNumeric,IsRequired = false,InputVariableName = "",RowClassType = rowClassType.Simple,GroupNumberLevel2 = "",GroupNameLevel2 = ""}

        };
            return ScreenDataCollection;
        }

        #endregion

        #region Procedure Divsion
        private async Task declaratives()
        {

        }

        private async Task err_batctrl_mstr_file() // section()
        {

            //     use after standard error procedure on batch-ctrl-file.;
        }

        private async Task err_batctrl_file()
        {

            // status_common = status_cobol_batctrl_file;
            //     display file-status-display.;
            //     display "ERROR IN ACCESSING BATCH CONTROL FILE".;
            //continue_reply = "";
            //     perform za1-make-them-notice-error  thru    za1-99-exit;
            //                 until continue-reply = "!".;
        }

        private async Task err_claims_mstr_file() // section()
        {

            //     use after standard error procedure on claims-mstr.;
        }

        private async Task err_claims_mstr()
        {

            /*  status_common = status_cobol_claims_mstr;
               //     display file-status-display.;
               //     display "COBOL - ERROR IN ACCESSING CLAIMS MASTER".;
               //continue_reply = "";
               //     perform za1-make-them-notice-error  thru    za1-99-exit;
               //                 until continue-reply = "!".;
               status_common = status_cobol_claims_mstr;
               //     display file-status-display.;
               //     display "COBOL - ERROR IN ACCESSING CLAIMS MASTER".;
              // continue_reply = "";
               //     perform za1-make-them-notice-error  thru    za1-99-exit;
               //                 until continue-reply = "!".; */
        }

        private async Task err_pat_mstr_file() // section()
        {

            //     use after standard error procedure on pat-mstr.;
        }

        private async Task err_pat_mstr()
        {

            /*status_cobol_display1 = status_cobol_pat_mstr1;
             //     if   status-cobol-pat-mstr1 <> 9;
             //     then;
             //status_cobol_display2 = status_cobol_pat_mstr2;
             //     else;
             //status_cobol_pat_mstr1 = low_values;
             status_cobol_display2 = status_cobol_pat_mstr_binary;
             //     if status-cobol-pat-mstr1 <> 0;
             //     then;
             //         display "Patient error = ", status-cobol-display.;
             //continue_reply = "";
             //     perform za1-make-them-notice-error  thru    za1-99-exit;
             //                 until continue-reply = "!".;
             */
        }

        private async Task err_doc_mstr_file() // section()
        {

            //     use after standard error procedure on doc-mstr.;
        }

        private async Task err_doc_mstr()
        {

            /* status_common = status_cobol_doc_mstr;
             //     display file-status-display.;
             //     display "ERROR IN ACCESSING DOCTOR MASTER".;
            // continue_reply = "";
             //     perform za1-make-them-notice-error  thru za1-99-exit;
             //                 until continue-reply = "!".; */
        }

        private async Task err_oma_fee_mstr_file() // section()
        {

            //     use after standard error procedure on oma-fee-mstr.;
        }

        private async Task err_oma_fee_mstr()
        {

            /*   status_common = status_cobol_oma_mstr;
               //     display file-status-display.;
               //     display "ERROR IN ACCESSING OMA FEE MASTER".;
               //continue_reply = "";
               //     perform za1-make-them-notice-error  thru za1-99-exit;
               //                 until continue-reply = "!".; */
        }

        private async Task err_constants_mstr_file() // section()
        {

            //     use after standard error procedure on iconst-mstr.;
        }

        private async Task err_constants_mstr()
        {
            /*
            //     if status-iconst-mstr = "7015";
            //     then;
            err_ind = 15;
            //         perform za0-common-error        thru    za0-99-exit;
            flag_lock = "Y";
            //     else;
            status_common = status_iconst_mstr;
            //         display file-status-display;
            //         display "ERROR IN ACCESSING CONSTANTS MASTER";
            //continue_reply = "";
            //         perform za1-make-them-notice-error      thru za1-99-exit;
            //                         until continue-reply = "!".;
             */
        }

        private async Task err_diagnostics_mstr_file() // section()
        {

            //     use after standard error procedure on diag-mstr.;
        }

        private async Task err_diagnostics_mstr()
        {
            /*
            status_common = status_diag_mstr;
            //     display file-status-display.;
            //     display "ERROR IN ACCESSING DIAGNOSTIC CODES MASTER".;
            //continue_reply = "";
            //     perform za1-make-them-notice-error  thru za1-99-exit;
            //                 until continue-reply = "!".;
            */
        }

        // f094_msg_sub_mstr.ds
        private async Task err_msg_sub_mstr_file() // section()
        {

            //     use after standard error procedure on msg-sub-mstr.;
        }

        // f094_msg_sub_mstr.ds
        private async Task err_msg_sub_mstr()
        {

            //     display "       - msg-sub-mstr cobol status : ",status-cobol-msg-sub-mstr.;
            //     stop " ".;
            //     stop run.;
        }

        private async Task end_declaratives()
        {

        }

        public async Task initialize_objects()
        {

            objD001_batch_in_progress_rec = null;
            objD001_batch_in_progress_rec = new D001_batch_in_progress_rec();

            D001_batch_in_progress_rec_Collection = null;
            D001_batch_in_progress_rec_Collection = new ObservableCollection<D001_batch_in_progress_rec>();

            objBatctrl_rec = null;
            objBatctrl_rec = new F001_BATCH_CONTROL_FILE();

            Batctrl_rec_Collection = null;
            Batctrl_rec_Collection = new ObservableCollection<F001_BATCH_CONTROL_FILE>();

            objClaims_mstr_rec = null;
            objClaims_mstr_rec = new Claims_mstr_rec();

            Claims_mstr_rec_Collection = null;
            Claims_mstr_rec_Collection = new ObservableCollection<Claims_mstr_rec>();

            objClaims_mstr_hdr_rec = null;
            objClaims_mstr_hdr_rec = new F002_CLAIMS_MSTR_HDR();

            Claims_mstr_hdr_rec_Collection = null;
            Claims_mstr_hdr_rec_Collection = new ObservableCollection<F002_CLAIMS_MSTR_HDR>();

            objClaims_mstr_dtl_rec = null;
            objClaims_mstr_dtl_rec = new F002_CLAIMS_MSTR_DTL();

            Claims_mstr_dtl_rec_Collection = null;
            Claims_mstr_dtl_rec_Collection = new ObservableCollection<F002_CLAIMS_MSTR_DTL>();

            objF002_CLAIMS_MSTR_DTL_DESC = null;
            F002_CLAIMS_MSTR_DTL_DESC_Collection = new ObservableCollection<F002_CLAIMS_MSTR_DTL_DESC>();

            objPat_mstr_rec = null;
            objPat_mstr_rec = new F010_PAT_MSTR();

            Pat_mstr_rec_Collection = null;
            Pat_mstr_rec_Collection = new ObservableCollection<F010_PAT_MSTR>();

            objDoc_mstr_rec = null;
            objDoc_mstr_rec = new F020_DOCTOR_MSTR();

            Doc_mstr_rec_Collection = null;
            Doc_mstr_rec_Collection = new ObservableCollection<F020_DOCTOR_MSTR>();

            objLoc_mstr_rec = null;
            objLoc_mstr_rec = new F030_LOCATIONS_MSTR();

            Loc_mstr_rec_Collection = null;
            Loc_mstr_rec_Collection = new ObservableCollection<F030_LOCATIONS_MSTR>();

            objFee_mstr_rec = null;
            objFee_mstr_rec = new F040_OMA_FEE_MSTR();

            Fee_mstr_rec_Collection = null;
            Fee_mstr_rec_Collection = new ObservableCollection<F040_OMA_FEE_MSTR>();

            objIconst_mstr_rec = null;
            objIconst_mstr_rec = new ICONST_MSTR_REC();

            Iconst_mstr_rec_Collection = null;
            Iconst_mstr_rec_Collection = new ObservableCollection<ICONST_MSTR_REC>();

            objConstants_mstr_rec_2 = null;
            objConstants_mstr_rec_2 = new CONSTANTS_MSTR_REC_2
            {
                WhereConst_rec_nbr = 2
            }.Collection().FirstOrDefault();

            Constants_mstr_rec_2_Collection = null;
            Constants_mstr_rec_2_Collection = new ObservableCollection<CONSTANTS_MSTR_REC_2>();

            objDiag_rec = null;
            objDiag_rec = new F091_DIAG_CODES_MSTR();

            Diag_rec_Collection = null;
            Diag_rec_Collection = new ObservableCollection<F091_DIAG_CODES_MSTR>();

            objPat_id_rec = null;
            objPat_id_rec = new Pat_id_rec();     // not in the database. "$HOME/f086_pat_id.d001"

            objF011_pat_mstr_elig_history_rec = null;
            objF011_pat_mstr_elig_history_rec = new F011_PAT_MSTR_ELIG_HISTORY();

            F011_pat_mstr_elig_history_rec_Collection = null;
            F011_pat_mstr_elig_history_rec_Collection = new ObservableCollection<F011_PAT_MSTR_ELIG_HISTORY>();

            objRejected_claims_rec = null;
            objRejected_claims_rec = new REJECTED_CLAIMS();

            Rejected_claims_rec_Collection = null;
            Rejected_claims_rec_Collection = new ObservableCollection<REJECTED_CLAIMS>();

            objMsg_sub_mstr_rec = null;
            objMsg_sub_mstr_rec = new F094_MSG_MSTR();

            Msg_sub_mstr_rec_Collection = null;
            Msg_sub_mstr_rec_Collection = new ObservableCollection<F094_MSG_MSTR>();

            objSli_oma_code_suff_rec = null;
            objSli_oma_code_suff_rec = new F201_SLI_OMA_CODE_SUFF();

            Sli_oma_code_suff_rec_Collection = null;
            Sli_oma_code_suff_rec_Collection = new ObservableCollection<F201_SLI_OMA_CODE_SUFF>();
        }

        public async void mainline()
        {
            await Exit_Trakker();
            // // Util.Trakker(++ctr, "mainline");
            try
            {

                // accept sys-date                     from date.;
                sys_date_grp = Sysdate();
                sys_date_long_child = sys_date_grp.Substring(0, 4) + sys_date_grp.Substring(4, 2) + sys_date_grp.Substring(6, 2);
                sys_date_long_r_child_redefines = sys_date_long_child;
                sys_yy = Util.NumInt(sys_date_grp.Substring(0, 4));
                sys_yy_alpha_child_redefines = sys_yy_child.ToString();
                sys_y1 = Util.NumInt(sys_date_grp.Substring(0, 1));
                sys_y2 = Util.NumInt(sys_date_grp.Substring(1, 1));
                sys_y3 = Util.NumInt(sys_date_grp.Substring(2, 1));
                sys_y4 = Util.NumInt(sys_date_grp.Substring(3, 1));
                sys_mm = Util.NumInt(sys_date_grp.Substring(4, 2));
                sys_dd = Util.NumInt(sys_date_grp.Substring(6, 2));

                // perform y2k-default-sysdate		thru y2k-default-sysdate-exit.;
                await y2k_default_sysdate();
                await y2k_default_sysdate_exit();

                run_mm = sys_mm;
                run_dd = sys_dd;
                run_yy = sys_yy;
                temp_yyyy_grp = new string(' ', 2) + Util.Str(sys_yy).PadLeft(2, '0');
                expiry_test_to_date_yy = temp_yy;
                expiry_test_to_date_mm = sys_mm;
                //  accept sys-time                     from time.;
                sys_time_grp = DateTime.Now.ToString("h:mm:ss tt");

                //move sys-hrs            to run-hrs.
                sys_hrs = Convert.ToInt32(DateTime.Now.ToString("HH"));
                //move sys - min            to run-min.
                sys_min = Convert.ToInt32(DateTime.Now.ToString("mm"));
                //move sys - sec            to run-sec.
                sys_sec = Convert.ToInt32(DateTime.Now.ToString("ss"));

                run_hrs = sys_hrs;
                run_min = sys_min;
                run_sec = sys_sec;
                //  display scr-title-batch-control-data.;
                Display("scr-title-batch-control-data.");

                //     open i-o    batch-ctrl-file;
                //                 claims-mstr;
                //                 pat-mstr;
                // 	        pat-elig-history;

                // 		rejected-claims;
                //                 doc-mstr.;

                //     open input  oma-fee-mstr;
                //                 diag-mstr;
                //                 loc-mstr;
                //                 iconst-mstr;
                //                 sli-oma-code-suff-mstr;
                //                 msg-sub-mstr.;
                //     open extend corrected-pat.; */

                await mainline_process_next_batch();
            }
            catch (Exception e)
            {
                if (!e.Message.Contains(endOfJob))
                {
                    err_msg_comment = " Runtime error : " + e.Message.ToString();
                    Display("err-msg-line.");
                    Write_ErrorLog("D001", e.Message, e.StackTrace);
                }
            }
            finally
            {
                if (option.Equals(stop_option))
                {
                    if (ExitCobol != null)
                    {
                        ExitCobol();
                    }
                }
            }
        }

        private async Task mainline_process_next_batch()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "mainline_process_next_batch");

            _mainline_process_next_batch:
            ws_batctrl_amt_act = 0;
            nbr_of_services = 0;


            await initialize_objects();

            //  perform zh0-initialization          thru    zh0-99-exit.;
            await zh0_initialization();
            await zh0_10_acpt_old_new_batch_opt();
            await zh0_99_exit();

            // if not stop-option then            
            if (!option.Equals(stop_option))
            {
                //     objIconst_mstr_rec.iconst_clinic_nbr_1_2 = 2;
                iconst_clinic_nbr_1_2 = 2;
                //     perform uj1-read-isam-const-mstr thru   uj1-99-exit;
                await uj1_read_isam_const_mstr();
                await uj1_99_exit();
                //     if not-ok then            
                if (Util.Str(flag).Equals(not_ok))
                {
                    err_ind = 21;
                    //  perform za0-common-error    thru    za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //         go to mainline-shutdown;
                    await mainline_shutdown();
                    return;
                }
                else
                {
                    flag_eoj = "N";
                    //   perform ab0-processing      thru    ab0-99-exit;

                    _ab0_processing:

                    await ab0_processing();
                    string retvalue = await ab0_10_enter_claim();
                    if (retvalue.ToLower().Equals("ab0_99_exit"))
                    {
                        goto _ab0_99_exit;
                    }

                    if (Util.Str(reply_create_pat).ToUpper().Equals(new_patient))
                    {
                        do
                        {
                            reply_create_pat = "";
                            await ab0_processing();
                            retvalue = await ab0_10_enter_claim();
                            if (retvalue.ToLower().Equals("ab0_99_exit"))
                            {
                                goto _ab0_99_exit;
                            }
                        } while (Util.Str(reply_create_pat).ToUpper().Equals(new_patient));
                    }

                    _ab0_20_enter_claim_details:
                    await ab0_20_enter_claim_details();

                    _ab0_25_enter_claim_desc:
                    await ab0_25_enter_claim_desc();

                    _ab0_30_accept_verification:
                    retvalue = await ab0_30_accept_verification();

                    if (retvalue.ToLower().Equals("ab0_processing"))
                    {
                        goto _ab0_processing;
                    }
                    else if (retvalue.ToLower().Equals("ab0_20_enter_claim_details"))
                    {
                        goto _ab0_20_enter_claim_details;
                    }
                    else if (retvalue.ToLower().Equals("ab0_25_enter_claim_desc"))
                    {
                        goto _ab0_25_enter_claim_desc;
                    }

                    retvalue = await ab0_35_nbr_serv_check();
                    if (retvalue.ToLower().Equals("ab0_30_accept_verification"))
                    {
                        goto _ab0_30_accept_verification;
                    }
                    else if (retvalue.ToLower().Equals("ab0_processing"))
                    {
                        goto _ab0_processing;
                    }

                    _ab0_99_exit:
                    await ab0_99_exit();

                    //   perform zz0-end-of-batch    thru    zz0-99-exit;
                    await zz0_end_of_batch();
                    await zz0_10();
                    await zz0_99_exit();
                    //  go to mainline-process-next-batch;                                                            
                    goto _mainline_process_next_batch;
                }
            }
            else
            {
                //         next sentence.; 
            }
        }

        private async Task mainline_shutdown()
        {           
            // Util.Trakker(++ctr, "mainline_shutdown");

            //     display blank-screen.;
            Display("blank-screen.");

            //     close       batch-ctrl-file;
            //                 claims-mstr;
            //                 pat-mstr;
            //                 doc-mstr;
            //                 loc-mstr;
            //                 oma-fee-mstr;
            //                 iconst-mstr;
            //                 corrected-pat;
            // 		pat-elig-history;
            // 		rejected-claims;
            //                 sli-oma-code-suff-mstr;
            //                 diag-mstr;
            //                 msg-sub-mstr.;
            //     chain "$obj/menu".;
            //     stop run.;

            throw new Exception(endOfJob);
        }

        private async Task ab0_processing()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab0_processing");

            //     perform uk0-zero-claim-hold-area    thru uk0-99-exit.;
            await uk0_zero_claim_hold_area();
            await uk0_99_exit();

            //move batctrl-batch-nbr to clmhdr-batch-nbr
            //                          clmhdr-orig-batch-nbr.

            batctrl_batch_nbr_grp = Util.Str(batctrl_bat_clinic_nbr_1_2).PadLeft(2, '0') + Util.Str(batctrl_bat_doc_nbr).PadRight(3) + Util.Str(batctrl_bat_week_day_r).PadLeft(3, '0');
            clmhdr_batch_nbr = batctrl_batch_nbr_grp;
            clmhdr_clinic_nbr_1_2 = Util.NumInt(Util.Str(clmhdr_batch_nbr).PadRight(8, ' ').Substring(0, 2));
            clmhdr_doc_nbr = Util.Str(clmhdr_batch_nbr).PadRight(8, ' ').Substring(2, 3);
            clmhdr_week = Util.NumInt(Util.Str(clmhdr_batch_nbr).PadRight(8, ' ').Substring(5, 2));
            clmhdr_day = Util.NumInt(Util.Str(clmhdr_batch_nbr).PadRight(8, ' ').Substring(7, 1));

            clmhdr_batch_nbr_3_6 = clmhdr_doc_nbr;
            clmhdr_batch_nbr_7_9 = Util.NumInt(Util.Str(clmhdr_week) + Util.Str(clmhdr_day));

            clmhdr_orig_batch_nbr_grp = batctrl_batch_nbr_grp;
            clmhdr_orig_batch_nbr_1_2 = Util.NumInt(Util.Str(clmhdr_orig_batch_nbr_grp).PadRight(8, ' ').Substring(0, 2));
            clmhdr_orig_batch_nbr_4_9 = Util.Str(clmhdr_orig_batch_nbr_grp).PadRight(8, ' ').Substring(2, 6);

            clmhdr_zeroed_oma_suff_adj_grp = "0";
            clmhdr_adj_oma_cd = "0";
            clmhdr_adj_oma_suff = "0";
            clmhdr_adj_adj_nbr = 0;

            clmhdr_batch_type = batctrl_batch_type;
            clmhdr_doc_nbr_ohip = batctrl_doc_nbr_ohip;

            //objClaim_header_rec.Clmhdr_loc = objBatctrl_rec.batctrl_loc;
            clmhdr_loc = Util.Str(batctrl_loc);

            clmhdr_agent_cd = batctrl_agent_cd;
            clmhdr_date_period_end_grp = Util.Str(batctrl_date_period_end_grp);
            clmhdr_period_end_yy = Util.NumInt(Util.Str(clmhdr_date_period_end_grp).PadRight(8, '0').Substring(0, 4));
            clmhdr_period_end_mm = Util.NumInt(Util.Str(clmhdr_date_period_end_grp).PadRight(8, '0').Substring(4, 2));
            clmhdr_period_end_dd = Util.NumInt(Util.Str(clmhdr_date_period_end_grp).PadRight(8, '0').Substring(6, 2));

            clmhdr_cycle_nbr = batctrl_cycle_nbr;
            clmhdr_i_o_pat_ind = batctrl_i_o_pat_ind;
            clmhdr_payroll = batctrl_payroll;

            first_diag_cd = "Y";
            flag_no_verif = "N";

            clmhdr_pat_ohip_id_or_chart = "";  // clmhdr-pat-ohip-id-or-chart of claim-header-rec
            clmhdr_confidential_flag = "";
            clmhdr_manual_review = "";
            ws_scr_health_nbr = "";
            hold_version_cd = "";
            name_change_flag = "";
            last_claim_flag = "";

            ws_ohip_chart_flag = "";

            clmhdr_refer_doc_nbr = 0;
            clmhdr_diag_cd = 0;
            clmhdr_date_admit_grp = "0";
            clmhdr_date_admit_yy = "0";
            clmhdr_date_admit_mm = 0;
            clmhdr_date_admit_dd = 0;

            claim_nbr_serv = 0;
            ws_pat_health_nbr = 0;
            ws_pat_ohip_mmyy = "0";
            ws_pat_mstr_rec_grp = "";
            ws_pat_acronym_grp = "";
            ws_pat_acronym_first6 = "";
            ws_pat_acronym_last3 = "";
            ws_pat_ohip_mmyy_grp = "";
            ws_pat_ohip_out_prov_grp = "";
            ws_pat_ohip_nbr = 0;
            ws_pat_ohip_nbr_r_alpha = "";
            ws_pat_ohip_nbr_MB_def_grp = "";
            ws_pat_ohip_nbr_MB = 0;
            ws_pat_ohip_nbr_NT_def_grp = "";
            ws_pat_ohip_nbr_NT_1_char = "";
            ws_pat_ohip_nbr_NT = 0;
            ws_pat_mm = 0;
            ws_pat_yy = 0;
            ws_pat_ohip_mmyy_r_grp = "";
            ws_pat_direct_alpha_grp = "";
            ws_pat_alpha1 = "";
            ws_pat_alpha2_3 = "";
            ws_pat_direct_yy = "";
            ws_pat_direct_mm = "";
            ws_pat_direct_dd = "";
            ws_pat_direct_filler = "";
            ws_pat_chart_nbr_grp = "";


            hold_last_birth_yy_grp = "0";
            hold_last_birth_yy_12 = 0;
            hold_last_birth_yy_34 = 0;

            hold_last_birth_mm = 0;
            hold_last_birth_dd = 0;
            hold_last_elig_maint_yy = 0;
            hold_last_elig_maint_mm = 0;
            hold_last_elig_maint_dd = 0;
            hold_last_elig_mail_yy = 0;
            hold_last_elig_mail_mm = 0;
            hold_last_elig_mail_dd = 0;

            //if batctrl-last-claim-nbr > 98 then            
            if (batctrl_last_claim_nbr > 98)
            {
                //         display scr-acpt-clmhdr;
                Display("scr-acpt-clmhdr.");
                err_ind = 52;
                //  perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                flag_eoj = "E";
                // go to ab0-99-exit.;
                await ab0_99_exit();
                return;
            }

            // if batctrl-nbr-claims-in-batch not numeric then;  
            if (!Util.IsNumeric(batctrl_nbr_claims_in_batch.ToString()))
            {
                batctrl_nbr_claims_in_batch = 0;
            }

            //     add 1                               to      batctrl-nbr-claims-in-batch.;
            batctrl_nbr_claims_in_batch += 1;

            //     add 1 , batctrl-last-claim-nbr      giving batctrl-last-claim-nbr;
            //                                                clmhdr-claim-nbr;
            //                                                clmhdr-orig-claim-nbr.;

            clmhdr_claim_nbr = batctrl_last_claim_nbr + 1;
            clmhdr_orig_claim_nbr = batctrl_last_claim_nbr + 1;
            batctrl_last_claim_nbr = batctrl_last_claim_nbr + 1;

            batctrl_batch_nbr_grp = Util.Str(batctrl_bat_clinic_nbr_1_2).PadLeft(2, '0') + Util.Str(batctrl_bat_doc_nbr).PadRight(3) + Util.Str(batctrl_bat_week_day_r).PadLeft(3, '0');
            clmhdr_batch_nbr = batctrl_batch_nbr_grp;
            clmhdr_claim_nbr = batctrl_last_claim_nbr;
            clmhdr_zeroed_oma_suff_adj_grp = "0";
            clmhdr_adj_oma_cd = "0";
            clmhdr_adj_oma_suff = "";
            clmhdr_adj_adj_nbr = 0;

            clmhdr_claim_id_grp = Util.Str(clmhdr_batch_nbr).PadRight(8, ' ') + Util.Str(clmhdr_claim_nbr).PadLeft(2, '0') + Util.Str(clmhdr_adj_oma_cd).PadRight(4, ' ') + Util.Str(clmhdr_adj_oma_suff).PadRight(1, ' ') + Util.Str(clmhdr_adj_adj_nbr).PadLeft(1, '0');
            clmdtl_b_data_grp = clmhdr_claim_id_grp;
            clmdtl_b_batch_num = Util.Str(clmdtl_b_data_grp).Substring(0, 8);
            clmdtl_b_claim_nbr = Util.NumInt(Util.Str(clmdtl_b_data_grp).Substring(8, 2));
            clmdtl_b_oma_cd = Util.Str(clmdtl_b_data_grp).Substring(10, 4);
            clmdtl_b_oma_suff = Util.Str(clmdtl_b_data_grp).Substring(14, 1);
            clmdtl_b_adj_nbr = Util.Str(clmdtl_b_data_grp).Substring(15, 1);
            clmdtl_b_key_type = "B";

            //     perform ai0-read-claims-mstr        thru    ai0-99-exit.;
            await ai0_read_claims_mstr();
            await ai0_99_exit();

            // if  ok then            
            if (flag.Equals(ok))
            {
                //   perform ab1-subtract-1-from-claim-nbr   thru ab1-99-exit;            
                await ab1_subtract_1_from_claim_nbr();
                await ab1_99_exit();
                //         display ring-bell;
                Display("ring-bell.");
                err_ind = 53;
                //  perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                flag_eoj = "E";

                //        open output d001-batch-in-progress;   // Note: this is clearing file containing batch in progress.
                // 	       close       d001-batch-in-progress;
                if (File.Exists(Environment.GetEnvironmentVariable("HOMEDIR") + "\\batch_in_progress.d001"))
                {
                    File.Delete(Environment.GetEnvironmentVariable("HOMEDIR") + "\\batch_in_progress.d001");
                }

                //go to ab0-99-exit.;
                await ab0_99_exit();
                return;
            }

            flag_accept = "N";
        }

        private async Task<string> ab0_10_enter_claim()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab0_10_enter_claim");

            //     perform ca0-acpt-hdr-data           thru    ca0-99-exit.;
            _ca0_acpt_hdr_data:           
            await ca0_acpt_hdr_data();

            string retval = await ca0_acpt_last_claim_flag();
            if (retval.ToLower().Equals("ca0_99_exit"))
            {
                goto _ca0_99_exit;
            }

            _ca0_10_input_health_nbr:
            retval = await ca0_10_input_health_nbr();
            if (retval.ToLower().Equals("ca0_30_invalid_pat"))
            {
                goto _ca0_30_invalid_pat;
            }

            retval = await ca0_20_input_id_chart();
            if (retval.ToLower().Equals("ca0_acpt_hdr_data"))
            {
                goto _ca0_acpt_hdr_data;
            }

            _ca0_30_invalid_pat:
            retval = await ca0_30_invalid_pat();
            if (retval.ToLower().Equals("ca0_10_input_health_nbr"))
            {
                goto _ca0_10_input_health_nbr;
            }
            else if (retval.ToLower().Equals("ca0_acpt_hdr_data"))
            {
                reply_create_pat = string.Empty;
                goto _ca0_acpt_hdr_data;
            }

            _ca0_99_exit:
            await ca0_99_exit();

            // if last-claim = '*' then            
            //         go to ab0-99-exit.;
            if (last_claim.Equals("*"))
            {
                //  go to ab0-99-exit.;                
                return "ab0_99_exit";
            }
            return string.Empty;
        }

        private async Task ab0_20_enter_claim_details()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab0_20_enter_claim_details");

            flag_err_data = "Y";

            //  perform va0-acpt-dtl  thru    va0-99-exit.;
            await va0_acpt_dtl();
            await va0_99_exit();

            // if err-data then            
            if (flag_err_data.Equals(err_data))
            {
                //         go to ab0-10-enter-claim.;
                await ab0_10_enter_claim();
                await ab0_20_enter_claim_details();
                return;
            }

            ss_basic_times_desc_rec = 1;
            ss_basic_times = 0;

            // perform ya0-price-claim             thru	ya0-99-exit.;
            string retvalue = await ya0_price_claim();
            if (retvalue.ToLower().Equals("ya0_98_display_fees"))
            {
                goto _ya0_98_display_fees;
            }

            await ya0_calc_sectional_reductions();
            await ya0_increment_ss_from();
            _ya0_98_display_fees:
            await ya0_98_display_fees();
            await ya0_99_exit();

            // if ss-basic-times = 0 then            
            if (ss_basic_times == 0)
            {
                //         subtract  1                     from ss-basic-times-desc-rec.;
                ss_basic_times_desc_rec = ss_basic_times_desc_rec - 1;
            }

            // if flag-no-verif = "N" then            
            if (flag_no_verif == "N")
            {
                flg_omacd_possible_addon_found = "N";
                flg_diag_possible_addon_found = "N";
                flg_addon_possible_addon_found = "N";
                //     perform la3-check-4-missing-addon-cd	thru la3-99-exit;
                //                 varying   ss;
                //                 from       1;
                //                 by         1;
                //                 until ss > 10;

                ss = 1;
                do
                {
                    await la3_check_4_missing_addon_cd();
                    await la3_99_exit();
                    ss++;
                } while (ss <= 10);


                //    	if   ( flg-omacd-possible-addon-found =  "Y";
                // 	    	and flg-diag-possible-addon-found  =  "Y";
                // 	        and flg-addon-possible-addon-found not = "Y");
                //    	   or     ( flg-omacd-possible-addon-found =  "Y";
                // 	    	and flg-diag-possible-addon-found  not =  "Y";
                // 	        and flg-addon-possible-addon-found =  "Y");
                //  	then;
                //          err_ind = 111;
                // 	        perform za0-common-error            thru za0-99-exit.;

                if ((Util.Str(flg_omacd_possible_addon_found).ToUpper().Equals("Y") && Util.Str(flg_diag_possible_addon_found).ToUpper().Equals("Y") && Util.Str(flg_addon_possible_addon_found).ToUpper() != "Y") ||
                     (Util.Str(flg_omacd_possible_addon_found).ToUpper().Equals("Y") && Util.Str(flg_diag_possible_addon_found).ToUpper() != "Y" && Util.Str(flg_addon_possible_addon_found).ToUpper().Equals("Y"))
                    )
                {
                    err_ind = 111;
                    await za0_common_error();
                    await za0_99_exit();
                }



                //  if flag-no-verif = "N" then;         
                if (Util.Str(flag_no_verif).ToUpper().Equals("N"))
                {
                    //  perform  ab0a-oma-code-reset		thru ab0a-99-exit;
                    await ab0a_oma_code_reset();
                    await ab0a_99_exit();

                    ws_sv_date_c1 = 0;
                    ws_sv_date_c2 = 0;
                }

                //         perform la4-oma-code-edit              	thru la4-99-exit;
                //                 varying   ss-clmdtl-oma;
                //                 from       1;
                //                 by         1;
                //                 until ss-clmdtl-oma > 10;

                ss_clmdtl_oma = 1;
                do
                {
                    await la4_oma_code_edit();
                    await la4_99_exit();
                    ss_clmdtl_oma++;
                } while (ss_clmdtl_oma <= 10);

                //         perform la5-oma-code-edit-check		thru la5-99-exit.;
                await la5_oma_code_edit_check();
                await la5_99_exit();
            }

        }

        private async Task ab0_25_enter_claim_desc()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab0_25_enter_claim_desc");

            ss_clmdtl_desc = ss_basic_times_desc_rec;

            // if report-desc-required then      
            if (Util.Str(flag_desc_report_required).Equals(report_desc_required))
            {
                //         add 1                           to ss-clmdtl-desc;
                ss_clmdtl_desc++;
                hold_desc[ss_clmdtl_desc] = "REPORT";

                await display_hold_desc();
                //         display scr-acpt-det-desc;
                Display("scr-acpt-det-desc.");
            }
            //  else if adjudication-desc-required then            
            else if (Util.Str(flag_adjudication_required).Equals(adjudication_desc_required))
            {
                // 	    add 1			 to ss-clmdtl-desc;
                ss_clmdtl_desc++;
                hold_desc[ss_clmdtl_desc] = "G259ABILLEDAT85%";

                await display_hold_desc();
                //      display scr-acpt-det-desc.;
                Display("scr-acpt-det-desc.");
            }

            //     perform la0-acpt-clmdtl-desc        thru la0-99-exit.; 
            await la0_acpt_clmdtl_desc();
            string retvalue = await la0_acpt_desc_1();
            if (retvalue.ToLower().Equals("la0_99_exit"))
            {
                goto _la0_99_exit;
            }

            retvalue = await la0_acpt_desc_2();
            if (retvalue.ToLower().Equals("la0_99_exit"))
            {
                goto _la0_99_exit;
            }

            retvalue = await la0_acpt_desc_3();
            if (retvalue.ToLower().Equals("la0_99_exit"))
            {
                goto _la0_99_exit;
            }
            retvalue = await la0_acpt_desc_4();
            if (retvalue.ToLower().Equals("la0_99_exit"))
            {
                goto _la0_99_exit;
            }
            await la0_acpt_desc_5();
            _la0_99_exit:
            await la0_99_exit();
        }

        private async Task<string> ab0_30_accept_verification()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab0_30_accept_verification");

            flag = "2";

            //     perform ma0-acpt-verification       thru ma0-99-exit.;
            await ma0_acpt_verification();
            await ma0_99_exit();

            // if flag-accept = "M" then            
            if (Util.Str(flag_accept).ToUpper().Equals("M"))
            {
                //         perform ca0-acpt-hdr-data       thru ca0-99-exit;
                _ca0_acpt_hdr_data:
                await ca0_acpt_hdr_data();
                string retvalue = await ca0_acpt_last_claim_flag();
                if (retvalue.ToLower().Equals("ca0_99_exit"))
                {
                    goto _ca0_99_exit;
                }

                _ca0_10_input_health_nbr:
                retvalue = await ca0_10_input_health_nbr();
                if (retvalue.ToLower().Equals("ca0_30_invalid_pat"))
                {
                    goto _ca0_30_invalid_pat;
                }
                retvalue = await ca0_20_input_id_chart();
                if (retvalue.ToLower().Equals("ca0_acpt_hdr_data"))
                {
                    goto _ca0_acpt_hdr_data;
                }

                _ca0_30_invalid_pat:
                retvalue = await ca0_30_invalid_pat();
                if (retvalue.ToLower().Equals("ca0_10_input_health_nbr"))
                {
                    goto _ca0_10_input_health_nbr;
                }
                else if (retvalue.ToLower().Equals("ca0_acpt_hdr_data"))
                {
                    goto _ca0_acpt_hdr_data;
                }

                _ca0_99_exit:
                await ca0_99_exit();

                //         go to ab0-30-accept-verification;
                await ab0_30_accept_verification();
                return string.Empty;
            }
            //  else if flag-accept = "D" then            
            else if (Util.Str(flag_accept).ToUpper().Equals("D"))
            {
                flag_accept = "M";
                //    go to ab0-20-enter-claim-details;                
                return "ab0_20_enter_claim_details";
            }
            // else  if flag-accept = "R" then            
            else if (Util.Str(flag_accept).ToUpper().Equals("R"))
            {
                //        go to ab0-25-enter-claim-desc;                
                return "ab0_25_enter_claim_desc";
            }
            // else if flag-accept = "P"  then    
            else if (Util.Str(flag_accept).ToUpper().Equals("P"))
            {
                //       perform ab2-scr-acpt-pat thru ab2-99-exit;  ..
                await ab2_scr_acpt_pat();
                await ab2_acpt_version_cd();
                await ab2_acpt_expiry_date();
                await ab2_acpt_name();
                await ab2_verify_birth_date();
                await ab2_acpt_subscr_addr();
                await ab2_99_exit();
                //       go to ab0-30-accept-verification;
                await ab0_30_accept_verification();
            }
            // else  if flag-accept = "N"  then        
            else if (Util.Str(flag_accept).ToUpper().Equals("N"))
            {
                Display("blank-line-24.");
                //      display scr-reject-entry;
                Display("scr-reject-entry.");
                //      display confirm;
                Display("confirm.");
                //      accept confirm;
                await Prompt("continue_reply");
                //      display blank-line-24;
                Display("blank-line-24.");
                //      perform ab1-subtract-1-from-claim-nbr   thru ab1-99-exit;
                await ab1_subtract_1_from_claim_nbr();
                await ab1_99_exit();
                //      go to ab0-processing;                
                return "ab0_processing";
            }
            // else if flag-accept = "S"  then;            
            else if (Util.Str(flag_accept).ToUpper().Equals("S"))
            {
                //      accept scr-last-claim;
                Display("scr-last-claim-lit.");
                await Prompt("last_claim_flag");
                //      go to ab0-30-accept-verification;
                await ab0_30_accept_verification();
            }
            // else if flag-accept not = "Y" then            
            else if (Util.Str(flag_accept).ToUpper() != "Y")
            {
                //      go to ab0-30-accept-verification.; 
                await ab0_30_accept_verification();
            }

            return string.Empty;
        }

        private async Task<string> ab0_35_nbr_serv_check()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab0_35_nbr_serv_check");

            ss_clmdtl_oma = ss_hold_clmdtl_oma;

            claim_nbr_serv = 0;

            save_clmdtl_oma = ss_clmdtl_oma;

            //     perform ga9-sum-clmdtl-serv         thru ga9-99-exit;
            //         varying ss-det-nbr from 1 by 1;
            //          until  ss-det-nbr > ss-clmdtl-oma.;

            ss_det_nbr = 1;
            do
            {
                await ga9_sum_clmdtl_serv();
                await ga9_99_exit();
                ss_det_nbr++;
            } while (ss_det_nbr <= ss_clmdtl_oma);


            // if nbr-of-services not equal claim-nbr-serv then
            nbr_of_services = Util.NumInt(last_claim_flag);
            if (nbr_of_services != claim_nbr_serv)
            {
                err_ind = 77;
                //    perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  go to ab0-30-accept-verification.;                
                return "ab0_30_accept_verification";
            }

            //     perform ga1-check-for-confidentiality thru ga1-99-exit.;
            await ga1_check_for_confidentiality();
            await ga1_99_exit();

            // if clmhdr-confidential-flag = "Y" then         
            if (Util.Str(clmhdr_confidential_flag).ToUpper().Equals("Y"))
            {
                flag_confidential_desc_rec = "N";
                //         perform gc1-find-confidential-desc-rec	thru gc1-99-exit;
                //                 varying  ss-desc;
                //                 from 1 by 1;
                //                 until    ss-desc    > ss-clmdtl-desc;
                ss_desc = 1;
                do
                {
                    await gc1_find_confidential_desc_rec();
                    await gc1_99_exit();
                    ss_desc++;
                } while (ss_desc <= ss_clmdtl_desc);

                //         if confidential-desc-not-found then          
                if (Util.Str(flag_confidential_desc_rec).Equals(confidential_desc_not_found))
                {
                    //             if ss-clmdtl-desc < ss-max-nbr-of-desc-rec-allow then            
                    if (ss_clmdtl_desc < ss_max_nbr_of_desc_rec_allow)
                    {
                        // 	              add 1				to            ss-clmdtl-desc;
                        ss_clmdtl_desc += 1;
                        //                move "NO VERIFICATION PLEASE"	to  hold-desc(ss-clmdtl-desc)
                        hold_desc[ss_clmdtl_desc] = "NO VERIFICATION PLEASE";
                    }
                    else
                    {
                        //                move "NO VERIFICATION PLEASE"	to  hold-desc(ss-clmdtl-desc)    
                        hold_desc[ss_clmdtl_desc] = "NO VERIFICATION PLEASE";
                    }
                }
                else
                {
                    // 	          next sentence;
                }
            }
            else
            {
                // 	      next sentence.;
            }

            flag_refer_doc = "N";
            //     perform ga2-check-refer-doc-needed  thru ga2-99-exit;
            //         varying ss-det-nbr from 1 by 1;
            //          until  ss-det-nbr > ss-clmdtl-oma.;

            ss_det_nbr = 1;
            do
            {
                await ga2_check_refer_doc_needed();
                await ga2_99_exit();
                ss_det_nbr++;
            } while (ss_det_nbr <= ss_clmdtl_oma);


            // if refer-doc-not-require and clmhdr-refer-doc-nbr not = zeroes then       
            if (Util.StrUpper(flag_refer_doc).Equals(refer_doc_not_require) && Util.NumInt(clmhdr_refer_doc_nbr) != 0)
            {
                //     clmhdr_refer_doc_nbr = 0;
                clmhdr_refer_doc_nbr = 0;
            }

            ss_clmdtl_oma = save_clmdtl_oma;

            //  perform na0-write-clmhdr            thru na0-99-exit.;
            await na0_write_clmhdr();
            await na0_99_exit();

            //  objClaims_mstr_rec.clmdtl_desc_rec = "";


            //     perform zl2-preset-clmdtl-data       thru zl2-99-exit.;
            await zl2_preset_clmdtl_data();
            await zl2_99_exit();

            ws_tot_claim_nbr_sv = 0;
            //     perform pa0-write-clmdtl            thru pa0-99-exit;
            //                 varying  ss-det-nbr;
            //                 from 1 by 1;
            //                 until    ss-det-nbr > ss-clmdtl-oma.;

            ss_det_nbr = 1;
            do
            {
                await pa0_write_clmdtl();
                await pa0_99_exit();
                ss_det_nbr++;
            } while (ss_det_nbr <= ss_clmdtl_oma);


            //     perform ra0-write-clmdtl-desc       thru ra0-99-exit;
            //                 varying  ss-desc;
            //                 from 1 by 1;
            //                 until    ss-desc    > ss-clmdtl-desc.;

            ss_desc = 1;
            do
            {
                await ra0_write_clmdtl_desc();
                await ra0_99_exit();
                ss_desc++;
            } while (ss_desc <= ss_clmdtl_desc);

            clmdtl_desc_rec_grp = "";
            clmdtl_desc = "";
            clmdtl_filler = "";
            clmdtl_orig_batch_id_grp = "";
            clmdtl_orig_batch_nbr = "";
            clmdtl_orig_batch_nbr_r = "";
            clmdtl_orig_batch_nbr_1_2 = 0;
            clmdtl_orig_batch_nbr_4_9 = "";
            clmdtl_orig_claim_nbr_in_batch = 0;
            clmdtl_orig_batch_id_r = "";
            clmdtl_orig_complete_batch_nbr = "";


            //  if elig-flag = 'Y' then;            
            if (Util.Str(elig_flag).ToUpper().Equals("Y"))
            {
                //   perform yy0-process-pat-elig-change thru  yy0-99-exit;
                await yy0_process_pat_elig_change();
                await yy0_99_exit();

                //  perform yy3-update-rejected-claim   thru    yy3-99-exit;
                await yy3_update_rejected_claim();
                await yy3_99_exit();

                elig_flag = "N";
            }

            //  if name-change-flag = 'Y'  then;
            if (Util.Str(name_change_flag).ToUpper().Equals("Y"))
            {
                //  perform ta0-update-patient-rec thru ta0-99-exit;
                await ta0_update_patient_rec();
                await ta0_99_exit();

                //  perform ua0-create-new-acronym thru ua0-99-exit;
                await ua0_create_new_acronym();
                await ua0_99_exit();
            }
            else
            {
                //   perform ta0-update-patient-rec   thru ta0-99-exit.;
                await ta0_update_patient_rec();
                await ta0_99_exit();
            }

            //     add ws-tot-claim-nbr-sv             to batctrl-svc-act,;
            //                                            batctrl-svc-est.;
            batctrl_svc_act += ws_tot_claim_nbr_sv;
            batctrl_svc_est += ws_tot_claim_nbr_sv;

            //     add clmhdr-tot-claim-ar-oma         to batctrl-amt-act,;
            //                                            batctrl-amt-est.;
            batctrl_amt_act += Util.NumDec(clmhdr_tot_claim_ar_oma);
            batctrl_amt_est += Util.NumDec(clmhdr_tot_claim_ar_oma);

            //     add clmhdr-tot-claim-ar-ohip        to batctrl-calc-ar-due;
            //                                            batctrl-calc-tot-rev.;
            batctrl_calc_ar_due += Util.NumDec(clmhdr_tot_claim_ar_ohip);
            batctrl_calc_tot_rev += Util.NumDec(clmhdr_tot_claim_ar_ohip);

            //     go to ab0-processing.;             
            return "ab0_processing";
        }

        private async Task ab0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab0_99_exit");

            //     exit.;
        }

        private async Task ab0a_oma_code_reset()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab0a_oma_code_reset");

            ws_e078_premium = "N";
            ws_e020 = "N";
            ws_e719 = "N";
            ws_e720 = "N";
            ws_e717 = "N";
            ws_e702 = "N";
            ws_g123 = "N";
            ws_g223 = "N";
            ws_g265 = "N";
            ws_g385 = "N";
            ws_g281 = "N";
            ws_e793 = "N";
            ws_e022_e017_e016 = "N";
            ws_z570 = "N";
            ws_z571 = "N";
            ws_z555_z580 = "N";
            ws_z515_z760 = "N";
            ws_g228 = "N";
            ws_g231 = "N";
            ws_g264 = "N";
            ws_g384 = "N";
            ws_g381 = "N";
            ws_r905_s800 = "N";
            ws_annna = "N";
            ws_gnnna = "N";
            ws_k991_u997 = "N";
            ws_c998 = "N";
            ws_c999 = "N";
            ws_e798 = "N";
            ws_z400 = "N";
            ws_g400_other_codes = "N";
            ws_e409_e410 = "N";
            ws_c990_to_c997 = "N";
            ws_cnnn = "N";
            ws_e450 = "N";
            ws_j315 = "N";
            ws_c985 = "N";
            ws_g248_g062 = "N";
            ws_g222 = "N";
            ws_a770_a775 = "N";
            ws_X9nn = "N";
            ws_h112_h113 = "N";
            ws_hnnn = "N";
            ws_g489_s323 = "N";
            ws_g222_z805 = "N";
            ws_p014_p016 = "N";
            ws_g221 = "N";
            ws_g220 = "N";
            ws_s322_a198 = "N";
            ws_a765_c765 = "N";
            ws_g521_g395 = "N";
            ws_h104_h124 = "N";
            ws_g345_g339 = "N";
            ws_g431_g479 = "N";
            ws_gnnn = "N";
            ws_annn = "N";
            ws_c983 = "N";
            ws_j025 = "N";
            ws_j021 = "N";
            ws_j022 = "N";
            ws_z608 = "N";
            ws_z611_z602 = "N";
            ws_z403 = "N";
            ws_z408 = "N";
            ws_a195 = "N";
            ws_k002 = "N";
            ws_c122_c143 = "N";
            ws_e083 = "N";
            ws_c122_c982 = "N";
            ws_g489_g376 = "N";
            ws_a197_a198 = "N";
            ws_k189 = "N";
            ws_a190_a795 = "N";
            ws_k960 = "N";
            ws_k990 = "N";
            ws_k961 = "N";
            ws_k992 = "N";
            ws_k962 = "N";
            ws_k994 = "N";
            ws_k963 = "N";
            ws_k998 = "N";
            ws_k964 = "N";
            ws_k996 = "N";
            ws_c960 = "N";
            ws_c990 = "N";
            ws_c961 = "N";
            ws_c992 = "N";
            ws_c962 = "N";
            ws_c994 = "N";
            ws_c963 = "N";
            ws_c986 = "N";
            ws_c964 = "N";
            ws_c996 = "N";
            ws_e676 = "N";
            ws_g556 = "N";
            ws_g400_g620 = "N";
            ws_a120 = "N";
            ws_z491_to_z499 = "N";
        }

        private async Task ab0a_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab0a_99_exit");

            //     exit.;
        }

        private async Task ab1_subtract_1_from_claim_nbr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab1_subtract_1_from_claim_nbr");

            //     subtract 1                          from    batctrl-nbr-claims-in-batch.;
            batctrl_nbr_claims_in_batch -= 1;

            //     subtract 1                          from    batctrl-last-claim-nbr;
            //                                         giving  batctrl-last-claim-nbr;
            //                                                 clmhdr-claim-nbr;
            //                                                 clmhdr-orig-claim-nbr.;

            clmhdr_claim_nbr = batctrl_last_claim_nbr - 1;
            clmhdr_orig_claim_nbr = batctrl_last_claim_nbr - 1;
            batctrl_last_claim_nbr = batctrl_last_claim_nbr - 1;
        }

        private async Task ab1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab1_99_exit");

            //     exit.;
        }

        private async Task ab2_scr_acpt_pat()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab2_scr_acpt_pat");

            elig_flag = "N";
            name_change_flag = "N";
        }

        private async Task ab2_acpt_version_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab2_acpt_version_cd");

            //     display scr-acpt-version-cd.;
            //     accept  scr-acpt-version-cd.;
            Display("scr-acpt-clmhdr.", "scr-acpt-version-cd");
            await Prompt("ws_pat_version_cd");

            // if ws-pat-version-cd not = spaces then        
            if (!string.IsNullOrWhiteSpace(ws_pat_version_cd))
            {
                err_ind = 0;
                //    perform dd0-check-version-cd     thru dd0-99-exit;
                await dd0_check_version_cd();
                await dd0_99_exit();
                //    display scr-acpt-version-cd;
                Display("scr-acpt-clmhdr.", "scr-acpt-version-cd");
                await Prompt("ws_pat_version_cd");
                // 	  if err-ind not = 0 then     
                if (err_ind != 0)
                {
                    // 	    perform za0-common-error	thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	    go to ab2-acpt-version-cd.;
                    await ab2_acpt_version_cd();
                    return;
                }
            }
        }

        private async Task ab2_acpt_expiry_date()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab2_acpt_expiry_date");

            //     display scr-acpt-expiry-yy.;
            //     accept  scr-acpt-expiry-yy.;
            Display("scr-acpt-clmhdr.", "scr-acpt-expiry-yy");
            await Prompt("ws_pat_expiry_yy");

            //     display scr-acpt-expiry-mm.;
            //     accept  scr-acpt-expiry-mm.;
            Display("scr-acpt-clmhdr.", "scr-acpt-expiry-mm");
            await Prompt("ws_pat_expiry_mm");

            // if ws-pat-expiry-date = '0000' then;       
            ws_pat_expiry_date_grp = Util.Str(ws_pat_expiry_yy).PadLeft(2, '0') + Util.Str(ws_pat_expiry_mm).PadLeft(2, '0');
            if (ws_pat_expiry_date_grp == "0000")
            {
                //         next sentence;
            }
            // else if ws-pat-expiry-mm < 1  or ws-pat-expiry-mm > 12  then            
            else if (Util.NumInt(ws_pat_expiry_mm) < 1 || Util.NumInt(ws_pat_expiry_mm) > 12)
            {
                err_ind = 75;
                //  perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  go to ab2-acpt-expiry-date.;
                await ab2_acpt_expiry_date();
                return;
            }

        }

        private async Task ab2_acpt_name()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab2_acpt_name");

            //     display scr-acpt-last-name.;
            //     accept  scr-acpt-last-name.;
            Display("scr-acpt-clmhdr.", "scr-acpt-last-name");
            await Prompt("ws_pat_surname");

            //     display scr-acpt-given-name.;
            //     accept  scr-acpt-given-name.;
            Display("scr-acpt-clmhdr.", "scr-acpt-given-name");
            await Prompt("ws_pat_given_name");
        }

        private async Task ab2_verify_birth_date()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab2_verify_birth_date");

            //     display scr-acpt-birth-yy.;
            //     accept  scr-acpt-birth-yy.;
            Display("scr-acpt-clmhdr.", "scr-acpt-birth-yy");
            await Prompt("ws_pat_birth_date_yy");

            // if ws-pat-birth-date-yy <> zeros then          
            if (Util.NumInt(ws_pat_birth_date_yy) != 0)
            {
                century_year = Util.NumInt(ws_pat_birth_date_yy);
                //  perform y2k-add-century-to-year     thru    y2k-99-exit;
                await y2k_add_century_to_year();
                await y2k_99_exit();

                ws_pat_birth_date_yy = century_year;
            }

            //     display scr-acpt-birth-mm.;
            //     accept  scr-acpt-birth-mm.;
            Display("scr-acpt-clmhdr.", "scr-acpt-birth-mm");
            await Prompt("ws_pat_birth_date_mm");

            //     display scr-acpt-birth-dd.;
            //     accept  scr-acpt-birth-dd.;
            Display("scr-acpt-clmhdr.", "scr-acpt-birth-dd");
            await Prompt("ws_pat_birth_date_dd");

            flag = "Y";

            // if  ws-pat-birth-date-mm < 01  or ws-pat-birth-date-mm > 12  then            
            if (Util.NumInt(ws_pat_birth_date_mm) < 01 || Util.NumInt(ws_pat_birth_date_mm) > 12)
            {
                flag = "N";
            }
            // else if   ws-pat-birth-date-dd < 01  or ws-pat-birth-date-dd > max-nbr-days (ws-pat-birth-date-mm)  then            
            else if (Util.NumInt(ws_pat_birth_date_dd) < 01 || Util.NumInt(ws_pat_birth_date_dd) > max_nbr_days[Util.NumInt(ws_pat_birth_date_mm)])
            {
                flag = "N";
            }

            // if not-ok then then 
            if (flag.Equals(not_ok))
            {
                err_ind = 5;
                //    perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //    go to ab2-verify-birth-date.; 
                await ab2_verify_birth_date();
                return;
            }
        }

        private async Task ab2_acpt_subscr_addr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab2_acpt_subscr_addr");

            //     display scr-acpt-subscr-addr1.;
            //     accept  scr-acpt-subscr-addr1.;
            Display("scr-acpt-clmhdr.", "scr-acpt-subscr-addr1");
            await Prompt("ws_subscr_addr1");

            //     display scr-acpt-subscr-addr2.;
            //     accept  scr-acpt-subscr-addr2.;
            Display("scr-acpt-clmhdr.", "scr-acpt-subscr-addr2");
            await Prompt("ws_subscr_addr2");

            //     display scr-acpt-subscr-addr3.;
            //     accept  scr-acpt-subscr-addr3.;
            Display("scr-acpt-clmhdr.", "scr-acpt-subscr-addr3");
            await Prompt("ws_subscr_addr3");

            //     perform ac0-city-prov-check thru ac0-99-exit.;
            await ac0_city_prov_check();
            await ac0_10_check_addr_loop();
            await ac0_99_exit();


            //     display scr-acpt-postal-code.;
            //     accept  scr-acpt-postal-code.;
            Display("scr-acpt-clmhdr.", "scr-acpt-postal-code");
            await Prompt("ws_subscr_postal_cd");

            // if  ws-pat-surname not = pat-old-surname or ws-pat-given-name not = pat-old-given-name then      
            if (ws_pat_surname != pat_old_surname || ws_pat_given_name != pat_old_given_name)
            {
                name_change_flag = "Y";
                this.ws_pat_acronym_grp = ws_pat_acronym_first6 + ws_pat_acronym_last3;
                old_acronym = this.ws_pat_acronym_grp;
                new_pat_surname = ws_pat_surname;
                new_pat_surname6 = ws_pat_surname;
                new_pat_given_name = ws_pat_given_name;
                new_pat_given_name3 = ws_pat_given_name;
            }

            // if ws-pat-birth-date not = hold-pat-birth-date then;         
            hold_pat_birth_yy_grp = Util.Str(hold_pat_birth_yy_12).PadLeft(2, '0') + Util.Str(hold_pat_birth_yy_34).PadLeft(2, '0');
            this.hold_pat_birth_date_grp = hold_pat_birth_yy_grp + hold_pat_birth_mm + hold_pat_birth_dd;
            if (ws_pat_birth_date != Util.NumInt(this.hold_pat_birth_date_grp))
            {
                elig_flag = "Y";
                ws_pat_last_birth_date = Util.NumInt(this.hold_pat_birth_date_grp);
            }

            // if ws-pat-version-cd not = hold-version-cd then            
            if (ws_pat_version_cd != hold_version_cd)
            {
                elig_flag = "Y";
                ws_pat_last_version_cd = hold_version_cd;
            }

            // if elig-flag = 'Y' then            
            if (Util.Str(elig_flag).ToUpper().Equals("Y"))
            {
                sys_date_grp = Util.Str(sys_yy).PadLeft(4, '0') + Util.Str(sys_mm).PadLeft(2, '0') + Util.Str(sys_dd).PadLeft(2, '0');
                pat_date_last_elig_maint = Util.NumInt(sys_date_grp);
                ws_pat_mess_code = "";
                ws_pat_no_of_letter_sent = 0;

                //move clmhdr-pat-ohip-id-or-chart of claim-header - rec
                //    to clmhdr-pat-ohip-id-or-chart of pat-id-rec

                clmhdr_pat_ohip_id_or_chart = Util.Str(objClaims_mstr_hdr_rec.CLMHDR_PAT_KEY_TYPE).PadRight(1, ' ') + Util.Str(objClaims_mstr_hdr_rec.CLMHDR_PAT_KEY_DATA).PadRight(15, ' ');  //clmhdr_pat_ohip_id_or_chart;

                //  move ws-pat-last-birth-date to pat-last - birth - date of pat-id - rec      
                objPat_id_rec.Pat_last_birth_date = ws_pat_last_birth_date;
                pat_last_birth_date = ws_pat_last_birth_date;

                // move ws-pat-last-version-cd to pat-last-version-cd of pat-id-rec.
                objPat_id_rec.Pat_last_version_cd = ws_pat_last_version_cd;
                pat_last_version_cd = ws_pat_last_version_cd;
            }
        }

        private async Task ab2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ab2_99_exit");
            //     exit.;
        }

        private async Task ac0_city_prov_check()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ac0_city_prov_check");

            subs_table_addr = 1;
        }

        private async Task ac0_10_check_addr_loop()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ac0_10_check_addr_loop");

            // if ws-subscr-addr3 = city-prov-short (subs-table-addr)  then            
            if (ws_subscr_addr3 == city_prov_short[subs_table_addr])
            {
                ws_subscr_addr3 = city_prov_name[subs_table_addr];
                //  display scr-acpt-subscr-addr3;
                Display("scr-acpt-clmhdr.", "scr-acpt-subscr-addr3");
            }
            else
            {
                //     add 1                           to subs-table-addr;
                subs_table_addr++;
                // if subs-table-addr > max-nbr-addr then            
                if (subs_table_addr > max_nbr_addr)
                {
                    //         next sentence;
                }
                else
                {
                    //  go to ac0-10-check-addr-loop.;
                    await ac0_10_check_addr_loop();
                    return;
                }
            }
        }

        private async Task ac0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ac0_99_exit");

            //     exit.;
        }

        private async Task ai0_read_claims_mstr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ai0_read_claims_mstr");

            claims_occur = 0;
            feedback_claims_mstr = "0";

            //     read claims-mstr    into claim-header-rec     key is key-claims-mstr;
            //         invalid key;
            //                 flag = "N";
            //                 go to ai0-99-exit.;

            Claims_mstr_dtl_rec_Collection = new F002_CLAIMS_MSTR_DTL
            {
                WhereKey_clm_type = clmdtl_b_key_type,
                WhereKey_clm_batch_nbr = clmdtl_b_batch_num,
                WhereKey_clm_claim_nbr = clmdtl_b_claim_nbr
            }.Collection_HDR_DTL_INNERJOIN_UsingTop(1000, false);


            if (Claims_mstr_dtl_rec_Collection.Count() == 0)
            {
                flag = "N";
                await ai0_99_exit();
                objClaims_mstr_dtl_rec = new F002_CLAIMS_MSTR_DTL();
                return;
            }

            F002_CLAIMS_MSTR_DTL_DESC_Collection = new F002_CLAIMS_MSTR_DTL_DESC
            {
                WhereKey_clm_type = clmdtl_b_key_type,
                WhereKey_clm_batch_nbr = clmdtl_b_batch_num,
                WhereKey_clm_claim_nbr = clmdtl_b_claim_nbr
            }.Collection();

            if (F002_CLAIMS_MSTR_DTL_DESC_Collection.Count() > 0)
            {
                foreach (var obj in F002_CLAIMS_MSTR_DTL_DESC_Collection)
                {
                    ss_clmdtl_desc++;
                    clmdtl_desc = Util.Str(obj.CLMDTL_DESC);
                    hold_desc[ss_clmdtl_desc] = clmdtl_desc;
                }
            }

            objClaims_mstr_dtl_rec = Claims_mstr_dtl_rec_Collection[ctr_read_claims_mstr];

            await clmhdr_record_to_screenVariables();
            await clmdtl_record_to_screenVariables();

            flag = "Y";
        }

        private async Task ai0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ai0_99_exit");

            //     exit.;
        }

        private async Task ba1_verify_mm_dd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ba1_verify_mm_dd");

            flag = "Y";
            //if ws-mm < 1  or ws-mm > 12 then            
            if (ws_mm < 1 || ws_mm > 12)
            {
                flag = "N";
            }
            // else if   ws-dd < 1  or ws-dd > max-nbr-days (ws-mm) then            
            else if (ws_dd < 1 || ws_dd > max_nbr_days[ws_mm])
            {
                flag = "N";
            }
        }

        private async Task ba1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ba1_99_exit");
            //     exit.;
        }

        private async Task ca0_acpt_hdr_data()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca0_acpt_hdr_data");

            // if flag-accept = 'M'  or flag-accept = 'D'  or flag-accept = 'R'  or flag-accept = 'P' then            
            if (flag_accept == "M" || flag_accept == "D" || flag_accept == "R" || flag_accept == "P")
            {
                //         next sentence;
            }
            else
            {
                clmhdr_refer_doc_nbr = 0;
                clmhdr_diag_cd = 0;
                clmhdr_msg_nbr = "00";
                clmhdr_sub_nbr = "0";

                clmhdr_date_admit_grp = "0";
                clmhdr_date_admit_yy = "";
                clmhdr_date_admit_yy_12 = 0;
                clmhdr_date_admit_yy_34 = 0;
                clmhdr_date_admit_mm = 0;
                clmhdr_date_admit_dd = 0;
                clmhdr_date_admit_dd_r = "";
                ws_pat_health_nbr = 0;

                clmhdr_pat_acronym6 = "";
                // ws_pat_mstr_rec = "";
                await initialize_ws_pat_mstr_rec();
                ws_pat_ohip_mmyy = "";
                ws_pat_version_cd = "";
                ws_scr_health_nbr = "";
                clmhdr_confidential_flag = "";

                nbr_of_services = 1;
                last_claim_flag = "001";

                ws_pat_last_doc_nbr_seen = "";
                ws_pat_birth_date = 0;
                ws_pat_date_last_maint = 0;
                ws_pat_date_last_visit = 0;
                ws_pat_date_last_admit = 0;

                ws_pat_phone_nbr_grp = "0";
                ws_pat_phone_nbr_first3 = 0;
                ws_pat_phone_nbr_last4 = 0;
                ws_pat_phone_nbr_remainder = "0";

                ws_pat_total_nbr_visits = 0;
                ws_pat_total_nbr_claims = 0;
                ws_pat_total_nbr_claims = 0;
                ws_pat_nbr_outstanding_claims = 0;
                ws_pat_health_nbr = 0;
                ws_pat_expiry_mm = 0;
                ws_pat_expiry_yy = 0;
                ws_subscr_dt_msg_no_eff_to = 0;
                ws_subscr_date_last_statement = 0;
                ws_pat_date_last_elig_mailing = 0;
                ws_pat_date_last_elig_maint = 0;
                ws_pat_last_birth_date = 0;
                ws_pat_birth_date_yy = 0;
                ws_pat_birth_date_mm = 0;
                ws_pat_birth_date_dd = 0;

                hold_last_birth_yy_grp = "0000";
                hold_last_birth_yy_12 = 0;
                hold_last_birth_yy_34 = 0;

                hold_last_birth_mm = 0;
                hold_last_birth_dd = 0;

                ws_pat_no_of_letter_sent = 0;
                ws_pat_birth_date_yy = 0;
                ws_pat_birth_date_mm = 0;
                ws_pat_birth_date_dd = 0;
                hold_last_elig_maint_yy = 0;
                hold_last_elig_maint_mm = 0;
                hold_last_elig_maint_dd = 0;
                hold_last_elig_mail_yy = 0;
                hold_last_elig_mail_mm = 0;
                hold_last_elig_mail_dd = 0;

                //        perform ca11-zero-variables thru        ca11-99-exit;
                //                 varying ss;
                //                 from   1;
                //                 by     1;
                //                 until  ss > 10;
                ss = 1;
                do
                {
                    await ca11_zero_variables();
                    await ca11_99_exit();
                    ss++;
                } while (ss <= 10);

                //  display scr-acpt-clmhdr;
                Display("scr-acpt-clmhdr.");

                //  display scr-acpt-pat-surname;
                Display("scr-acpt-pat-surname.");
                //await Prompt("clmhdr_pat_acronym6");


                //  display blank-detail-lines;
                Display("blank-detail-lines.");

                ws_highest_grp_nbr = 0;
                ws_highest_grp_tot = 0;

                await display_hold_desc();

                //  display scr-acpt-det-desc.; 
                Display("scr-acpt-det-desc.");
            }
        }

        private async Task<string> ca0_acpt_last_claim_flag()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca0_acpt_last_claim_flag");

            //     display scr-last-claim-lit.;
            //     accept  scr-last-claim.;
            Display("scr-last-claim-lit.");
            await Prompt("last_claim_flag");

            // if last-claim = '*'  or last-claim is numeric then   
            last_claim = Util.Str(last_claim_flag).Trim().PadRight(3).Substring(0, 1);
            nbr_of_services = Util.NumInt(last_claim_flag);
            if (last_claim == "*" || (last_claim != null && Util.IsNumeric(last_claim)))
            {
                //         next sentence;
            }
            else
            {
                err_ind = 76;
                //  perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  go to ca0-acpt-last-claim-flag.;
                await ca0_acpt_last_claim_flag();
                return string.Empty;
            }

            // if last-claim = '*'  then;          
            if (last_claim == "*")
            {
                //  perform ab1-subtract-1-from-claim-nbr   thru ab1-99-exit;
                await ab1_subtract_1_from_claim_nbr();
                await ab1_99_exit();

                //         open output d001-batch-in-progress;   // (2006/sep/30 b.e. clear file containing batch in progress)  // todo: ??????
                //       	close       d001-batch-in-progress;
                if (File.Exists(Environment.GetEnvironmentVariable("HOMEDIR") + "\\batch_in_progress.d001"))
                {
                    File.Delete(Environment.GetEnvironmentVariable("HOMEDIR") + "\\batch_in_progress.d001");
                }

                //         go to ca0-99-exit.;                 
                return "ca0_99_exit";
            }
            return string.Empty;
        }

        private async Task<string> ca0_10_input_health_nbr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca0_10_input_health_nbr");

            //     accept scr-pat-health-nbr.;
            Display("scr-acpt-clmhdr.");
            await Prompt("ws_scr_health_nbr");

            // if ws-scr-health-nbr not = " " and ws-scr-health-nbr not = zeroes then            
            if (!string.IsNullOrWhiteSpace(ws_scr_health_nbr) && Util.NumLongInt(ws_scr_health_nbr) != 0)
            {
                //      if ws-scr-health-nbr is alphabetic  then            
                if (!Util.IsNumeric(ws_scr_health_nbr))
                {   // todo: verify Alpahbetic...???
                    flag = "Y";
                    pat_acronym_grp = ws_scr_health_nbr;
                    pat_acronym_first6 = Util.Str(pat_acronym_grp).PadRight(9, ' ').Substring(0, 6);
                    pat_acronym_last3 = Util.Str(pat_acronym_grp).PadRight(9, ' ').Substring(6, 3);

                    //  perform da7-read-acr-pat-mstr-approx thru da7-99-exit;
                    await da7_read_acr_pat_mstr_approx();
                    await da7_not_dialysis();
                    await da7_99_exit();

                    //          go to ca0-30-invalid-pat;                    
                    return "ca0_30_invalid_pat";
                }
                else
                {
                    ws_pat_health_nbr = Util.NumLongInt(ws_scr_health_nbr);
                    ws_chk_nbr_10 = ws_pat_health_nbr;
                    ws_chk_nbr_1_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 0, 1));
                    ws_chk_nbr_2_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 1, 1));
                    ws_chk_nbr_3_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 2, 1));
                    ws_chk_nbr_4_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 3, 1));
                    ws_chk_nbr_5_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 4, 1));
                    ws_chk_nbr_6_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 5, 1));
                    ws_chk_nbr_7_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 6, 1));
                    ws_chk_nbr_8_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 7, 1));
                    ws_chk_nbr_9_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 8, 1));
                    ws_chk_nbr_10_10 = Util.NumInt(Util.Substring(ws_scr_health_nbr, 9, 1));

                    //  perform db0a-mod10-check-digit-10       thru db0a-99-exit;
                    await db0a_mod10_check_digit_10();
                    await db0a_99_exit();

                    //          if ok then      
                    if (flag.Equals(ok))
                    {
                        flag = "Y";
                        pat_health_nbr = ws_pat_health_nbr;
                        //  perform da4-read-hc-pat-mstr    thru da4-99-exit;
                        await da4_read_hc_pat_mstr();
                        await da4_99_exit();
                        //  go to ca0-30-invalid-pat;                        
                        return "ca0_30_invalid_pat";
                    }
                    else
                    {
                        err_ind = 69;
                        //  perform za0-common-error            thru za0-99-exit;
                        await za0_common_error();
                        await za0_99_exit();
                        //  go to ca0-10-input-health-nbr.; 
                        return await ca0_10_input_health_nbr();
                       
                    }
                }
            }
            return string.Empty;
        }

        private async Task<string> ca0_20_input_id_chart()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca0_20_input_id_chart");

            // if flag-accept not = "M" then;           
            if (Util.Str(flag_accept).ToUpper() != "M")
            {
                ws_pat_ohip_mmyy = "";
            }

            //  perform da0-acpt-id-access-pat-subscr       thru da0-99-exit.;
            await da0_acpt_id_access_pat_subscr();
            await da0_99_exit();

            // if ws-pat-ohip-nbr-r-alpha  =  "11111119" then     
            if (ws_pat_ohip_nbr_r_alpha == "11111119")
            {
                //     if not def-agent-alternate-funding then            
                if (!def_agent_code.Equals(def_agent_alternate_funding))
                {
                    err_ind = 26;
                    flag = "N";
                }
                else
                {
                    //             next sentence;
                }
            }
            // else if  ( ( not def-agent-ifhp-direct  and not def-agent-ontario-direct   and not def-agent-foreign-direct  and not def-agent-quebec-direct  and site-id = "HSC" )  or site-id = "RMA"  )            
            // 	  and (   ws-pat-ohip-nbr = spaces  or ws-pat-ohip-nbr = zeros  )  and ws-pat-health-nbr = 0  then;           
            else if (
                      ((!def_agent_code.Equals(def_agent_ifhp_direct) && !def_agent_code.Equals(def_agent_ontario_direct) && !def_agent_code.Equals(def_agent_foreign_direct) && !def_agent_code.Equals(def_agent_quebec_direct) && site_id == "HSC") || site_id == "RMA")
                      && (string.IsNullOrWhiteSpace(Util.Str(ws_pat_ohip_mmyy).PadRight(8).Substring(0, 8).ToString()) || Util.Str(ws_pat_ohip_mmyy).PadRight(8).Substring(0, 8).Trim() == "0") && ws_pat_health_nbr == 0
                )
            {
                err_ind = 85;
                //    perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                flag_accept = "M";
                ws_pat_health_nbr = 0;
                //  go to ca0-acpt-hdr-data.;                
                return "ca0_acpt_hdr_data";
            }

            // 	if  (def-agent-reciprocal  and	ws-pat-prov-cd =  'ON'  and 	site-id = "HSC"  )   then 
            if (def_agent_code.Equals(def_agent_reciprocal) && ws_pat_prov_cd == "ON" && site_id == "HSC")
            {
                err_ind = 115;
                //   perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  go to ca0-acpt-hdr-data.;                
                return "ca0_acpt_hdr_data";
            }

            // 	if  (def-agent-alternate-funding  and	ws-pat-prov-cd not =  'ON'  and 	site-id = "HSC"  )  then     
            if (def_agent_code.Equals(def_agent_alternate_funding) && ws_pat_prov_cd != "ON" && site_id == "HSC")
            {
                err_ind = 117;
                //  perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //   go to ca0-acpt-hdr-data.;                 
                return "ca0_acpt_hdr_data";
            }
            return string.Empty;
        }

        private async Task<string> ca0_30_invalid_pat()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca0_30_invalid_pat");

            // if not-ok then            
            if (Util.Str(flag).ToUpper().Equals(not_ok))
            {
                //         perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //         display scr-acpt-patient-verif;
                Display("scr-acpt-patient-verif.");

                //         perform ca2-verify-new-err-pat  thru ca2-99-exit;
                await ca2_verify_new_err_pat();
                await ca2_99_exit();

                //         if err-patient then            
                if (Util.Str(reply_create_pat).ToUpper().Equals(err_patient))
                {
                    reply_create_pat = "";
                    //             display scr-clear-pat-verif;
                    Display("scr-clear-pat-verif.");

                    ws_scr_health_nbr = "";
                    //             display scr-pat-health-nbr;
                    Display("scr-acpt-clmhdr.", "scr-pat-health-nbr");

                    //   go to ca0-10-input-health-nbr;                    
                    return "ca0_10_input_health_nbr";
                }
                //         else if new-patient then            
                else if (Util.Str(reply_create_pat).ToUpper().Equals(new_patient))
                {
                    //                 display scr-clear-pat-verif;
                    Display("scr-clear-pat-verif.");
                    //                 go to ca0-acpt-hdr-data;                    
                    return "ca0_acpt_hdr_data";
                }
                //          else if request-pgm-m010  then            
                else if (Util.Str(reply_create_pat).ToUpper().Equals(request_pgm_m010))
                {
                    //                     display scr-loading-message;
                    Display("scr-loading-message.");

                    //                      macro = ""quick auto =$pb_obj / m010.qkc"";   
                    //                     call "SYSTEM" using macro-line;                

                    if (RunExternalScreen != null)
                    {
                        RunExternalScreen();
                    }

                    ws_pat_health_nbr = Util.NumLongInt(ws_scr_health_nbr);
                    pat_health_nbr = ws_pat_health_nbr;
                    //  perform da4-read-hc-pat-mstr    thru da4-99-exit;
                    await da4_read_hc_pat_mstr();
                    await da4_99_exit();

                    //                     display scr-title-claim-rec-data;
                    Display("scr-title-claim-rec-data.");
                    //                     display scr-last-claim-lit;
                    Display("scr-last-claim-lit.");
                    //                     display scr-claim-lit;
                    Display("scr-claim-lit.");
                    //                     display scr-acpt-clmhdr;
                    Display("scr-acpt-clmhdr.");

                    await display_hold_desc();
                    //                     display scr-acpt-det-desc;
                    Display("scr-acpt-det-desc.");
                    //                     go to ca0-10-input-health-nbr;                    
                    return "ca0_10_input_health_nbr";
                }
                else
                {
                    //                     next sentence.;
                }
            }

            //     perform ca1-display-pat-info        thru ca1-99-exit.;
            await ca1_display_pat_info();
            await ca1_99_exit();


            // if  def-agent-ohip or def-agent-alternate-funding  or (    def-agent-ohip-wcb  and site-id = "RMA" )  then
            if (def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_alternate_funding) || (def_agent_code.Equals(def_agent_ohip_wcb) && site_id == "RMA"))
            {
                //    
                //         if   (    ( ws-pat-ohip-nbr  not numeric or ws-pat-ohip-nbr  = zeroes)  and ws-pat-health-nbr = 0  and (    ws-pat-prov-cd not = "NT" and ws-pat-prov-cd not = "MB") )

                //           or (  (   ws-pat-ohip-nbr-MB  not numeric  or ws-pat-ohip-nbr  = zeroes)  and ws-pat-health-nbr = 0  and ws-pat-prov-cd  = "MB" );
                //             
                //           or (    (   ws-pat-ohip-nbr-NT  not numeric  or ws-pat-ohip-nbr  = zeroes) and ws-pat-ohip-nbr-NT-1-char <> "N"  and ws-pat-ohip-nbr-NT-1-char <> "D"  and ws-pat-ohip-nbr-NT-1-char <> "M"            
                //                                                                                      and ws-pat-ohip-nbr-NT-1-char <> "T";
                //                                                                                      and ws-pat-health-nbr = 0;
                //                                                                                      and ws-pat-prov-cd = "NT";
                //              ) then            
                if (
                    ((!Util.IsNumeric(ws_pat_ohip_nbr.ToString()) || ws_pat_ohip_nbr == 0) && ws_pat_health_nbr == 0 && (ws_pat_prov_cd != "NT" && ws_pat_prov_cd != "MB"))

                    || ((!Util.IsNumeric(ws_pat_ohip_nbr_MB.ToString()) || ws_pat_ohip_nbr == 0) && ws_pat_health_nbr == 0 && ws_pat_prov_cd == "MB")

                    || ((!Util.IsNumeric(ws_pat_ohip_nbr_NT.ToString()) || ws_pat_ohip_nbr == 0) && ws_pat_ohip_nbr_NT_1_char != "N" && ws_pat_ohip_nbr_NT_1_char != "D" && ws_pat_ohip_nbr_NT_1_char != "M"
                         && ws_pat_ohip_nbr_NT_1_char != "T" && ws_pat_health_nbr == 0 && ws_pat_prov_cd == "NT")
                    )
                {
                    err_ind = 14;
                    //    perform za0-common-error    thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();

                    flag_accept = "M";
                    //  go to ca0-acpt-hdr-data;                    
                    return "ca0_acpt_hdr_data";
                }
                else
                {
                    //    display scr-pat-health-nbr;
                    Display("scr-acpt-clmhdr.", "scr-pat-health-nbr");
                }
            }
            else
            {
                //     next sentence.;
            }

            // if def-agent-ohip or def-agent-alternate-funding  or (    def-agent-ohip-wcb   and site-id = "RMA"  )  and ws-pat-prov-cd not = "NT"  then   
            if (def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_alternate_funding) || (def_agent_code.Equals(def_agent_ohip_wcb) && site_id == "RMA") && ws_pat_prov_cd != "NT")
            {
                //         if ws-pat-prov-cd = 'PQ';
                if (Util.Str(ws_pat_prov_cd) == "PQ")
                {
                    err_ind = 65;
                    //  perform za0-common-error    thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //   go to ca0-acpt-hdr-data;                    
                    return "ca0_acpt_hdr_data";
                }
                else
                {
                    hc_expiry_date_yy = ws_pat_expiry_yy;
                    hc_expiry_date_mm = Util.NumInt(ws_pat_expiry_mm);
                    //   if  ws-pat-expiry-date not = '0000' and hc-expiry-date < expiry-test-to-date and ws-pat-prov-cd = 'ON' then    
                    ws_pat_expiry_date_grp = Util.Str(ws_pat_expiry_yy).PadLeft(2, '0') + Util.Str(ws_pat_expiry_mm).PadLeft(2, '0');
                    hc_expiry_date_grp = Util.Str(hc_expiry_date_yy).PadLeft(2, '0') + Util.Str(hc_expiry_date_mm).PadLeft(2, '0');
                    expiry_test_to_date_grp = Util.Str(expiry_test_to_date_yy).PadLeft(2, '0') + Util.Str(expiry_test_to_date_mm).PadLeft(2, '0');
                    if (ws_pat_expiry_date_grp != "0000" && Util.NumInt(hc_expiry_date_grp) < Util.NumInt(expiry_test_to_date_grp) && ws_pat_prov_cd == "ON")
                    {
                        err_ind = 66;
                        //   perform za0-common-error    thru za0-99-exit;
                        await za0_common_error();
                        await za0_99_exit();
                        //   go to ca0-acpt-hdr-data.;                        
                        return "ca0_acpt_hdr_data";
                    }
                }
            }

            // move ws-key-pat-mstr                to clmhdr-pat-ohip-id-or-chart
            //                                           of claim-header - rec
            //                                        clmhdr - p - data
            //                                        clmdtl - p - data.

            ws_key_pat_mstr_grp = Util.Str(ws_pat_i_key).PadRight(1, ' ') + Util.Str(ws_pat_con_nbr).PadLeft(2, '0') + Util.Str(ws_pat_i_nbr).PadLeft(12, '0') + new string(' ', 1);
            objClaims_mstr_hdr_rec.CLMHDR_PAT_KEY_TYPE = Util.Str(ws_pat_i_key).PadRight(1, ' ');
            clmhdr_pat_key_type = Util.Str(ws_pat_i_key).PadRight(1, ' ');
            objClaims_mstr_hdr_rec.CLMHDR_PAT_KEY_DATA = Util.Str(ws_pat_con_nbr).PadLeft(2, '0') + Util.Str(ws_pat_i_nbr).PadLeft(12, '0') + new string(' ', 1);
            clmhdr_pat_key_data_grp = Util.Str(ws_pat_con_nbr).PadLeft(2, '0') + Util.Str(ws_pat_i_nbr).PadLeft(12, '0') + new string(' ', 1);
            clmhdr_pat_ohip_id_or_chart = ws_key_pat_mstr_grp;
            clmhdr_p_data_grp = ws_key_pat_mstr_grp;

            clmhdr_p_batch_nbr_grp = Util.Str(clmhdr_p_data_grp).Substring(0, 8);
            clmhdr_p_clinic_nbr_1_2 = Util.NumInt(Util.Str(clmhdr_p_data_grp).Substring(0, 2));
            clmhdr_p_doc_nbr = Util.Str(clmhdr_p_data_grp).Substring(2, 3);
            clmhdr_p_week = Util.NumInt(Util.Str(clmhdr_p_data_grp).Substring(5, 2));
            clmhdr_p_day = Util.NumInt(Util.Str(clmhdr_p_data_grp).Substring(7, 1));
            clmhdr_p_claim_nbr = Util.NumInt(Util.Str(clmhdr_p_data_grp).Substring(8, 2));
            clmhdr_p_oma_cd = Util.Str(Util.Str(clmhdr_p_data_grp).Substring(10, 4));
            clmhdr_p_oma_suff = Util.Str(Util.Str(clmhdr_p_data_grp).Substring(14, 1));
            clmhdr_p_adj_nbr = Util.Str(Util.Str(clmhdr_p_data_grp).Substring(15, 1));

            clmdtl_p_data_grp = ws_key_pat_mstr_grp;
            clmhdr_p_batch_nbr_grp = Util.Str(clmdtl_p_data_grp).Substring(0, 8);
            clmdtl_p_clinic_nbr_1_2 = Util.NumInt(Util.Str(clmdtl_p_data_grp).Substring(0, 2));
            clmdtl_p_doc_nbr = Util.Str(clmdtl_p_data_grp).Substring(2, 3);
            clmdtl_p_week = Util.NumInt(Util.Str(clmdtl_p_data_grp).Substring(5, 2));
            clmdtl_p_day = Util.NumInt(Util.Str(clmdtl_p_data_grp).Substring(7, 1));

            clmdtl_p_claim_nbr = Util.NumInt(Util.Str(clmdtl_p_data_grp).Substring(8, 2));
            clmdtl_p_oma_cd = Util.Str(Util.Str(clmdtl_p_data_grp).Substring(10, 4));
            clmdtl_p_oma_suff = Util.Str(Util.Str(clmdtl_p_data_grp).Substring(14, 1));
            clmdtl_p_adj_nbr = Util.Str(Util.Str(clmdtl_p_data_grp).Substring(15, 1));

            clmhdr_pat_acronym6 = ws_pat_surname_first6;
            //  display scr-clmhdr-pat-surname.;
            Display("scr-acpt-pat-surname.");

            //   perform ea0-acpt-pat-surname        thru ea0-99-exit.;
            await ea0_acpt_pat_surname();
            await ea0_99_exit();

            //  if not-ok then            
            if (flag.Equals(not_ok))
            {
                //      go to ca0-30-invalid-pat.;                
                string retval = await ca0_30_invalid_pat();
                return retval;
            }

            ws_pat_acronym_grp = Util.Str(ws_pat_acronym_first6).PadRight(6, ' ') + Util.Str(ws_pat_acronym_last3).PadRight(3, ' ');
            clmhdr_pat_acronym_grp = ws_pat_acronym_grp;
            clmhdr_pat_acronym6 = clmhdr_pat_acronym_grp.Substring(0, 6);
            clmhdr_pat_acronym3 = clmhdr_pat_acronym_grp.Substring(6, 3);

            //     display scr-payroll.;
            Display("scr-acpt-clmhdr.", "scr-payroll");

            //     perform ga0-acpt-refer-doc          thru ga0-99-exit.;
            await ga0_acpt_refer_doc();
            await ga0_99_exit();

            //     perform ia0-acpt-loc                thru ia0-99-exit.;
            await ia0_acpt_loc();
            await ia0_99_exit();

            //     perform ja0-acpt-hosp               thru ja0-99-exit;
            await ja0_acpt_hosp();
            await ja0_99_exit();

            //     perform ka0-acpt-i-o-pat-ind        thru ka0-99-exit.;
            await ka0_acpt_i_o_pat_ind();
            await ka0_99_exit();

            //     perform fa0-acpt-admit-date         thru fa0-99-exit.;
            await fa0_acpt_admit_date();
            await fa0_99_exit();

            // if  def-agent-bill-direct or def-agent-foreign-direct  or def-agent-ifhp-direct  or def-agent-ontario-direct   or def-agent-quebec-direct  then            
            if (def_agent_code.Equals(def_agent_bill_direct) || def_agent_code.Equals(def_agent_foreign_direct) || def_agent_code.Equals(def_agent_ifhp_direct) || def_agent_code.Equals(def_agent_ontario_direct) || def_agent_code.Equals(def_agent_quebec_direct))
            {
                //         perform ca5-acpt-msg            thru ca5-99-exit;
                await ca5_acpt_msg();
                await ca5_99_exit();
                //   perform ca6-acpt-sub            thru ca6-99-exit.;
                await ca6_acpt_sub();
                await ca6_99_exit();
            }

            // if site-id = 'RMA'  then            
            if (site_id == "RMA")
            {
                //      perform laa-acpt-payroll	thru laa-99-exit.; 
                await laa_acpt_payroll();
                await laa_99_exit();
            }
            return string.Empty;
        }

        private async Task ca0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca0_99_exit");

            //     exit.;
        }

        private async Task ca1_display_pat_info()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca1_display_pat_info");

            //pat_id_rec = "";
            pat_last_birth_date = 0;
            pat_last_version_cd = "";
            pat_old_surname = "";
            pat_old_given_name = "";
            pat_old_health_nbr = 0;
            pat_old_chart_nbr = "";
            pat_old_chart_nbr_2 = "";
            pat_old_chart_nbr_3 = "";
            pat_old_chart_nbr_4 = "";
            pat_old_chart_nbr_5 = "";
            pat_old_addr1 = "";
            pat_old_addr2 = "";
            pat_old_addr3 = "";

            pat_old_surname = ws_pat_surname;
            pat_old_given_name = ws_pat_given_name;
            pat_old_health_nbr = ws_pat_health_nbr;
            ws_pat_chart_nbr_grp = Util.Str(pat_chart_1st_char).PadRight(1, ' ') + Util.Str(pat_chart_remainder).PadRight(9, ' ');
            pat_old_chart_nbr = ws_pat_chart_nbr_grp;
            pat_old_addr1 = ws_subscr_addr1;
            pat_old_addr2 = ws_subscr_addr2;
            pat_old_addr3 = ws_subscr_addr3;
            ws_pat_chart_nbr_2_grp = Util.Str(pat_chart_1st_char).PadRight(1, ' ') + Util.Str(pat_chart_remainder).PadRight(9, ' ');
            pat_old_chart_nbr_2 = ws_pat_chart_nbr_2_grp;
            ws_pat_chart_nbr_3_grp = Util.Str(pat_chart_1st_char).PadRight(1, ' ') + Util.Str(pat_chart_remainder).PadRight(9, ' ');  // todo: note the same name child variables.
            pat_old_chart_nbr_3 = ws_pat_chart_nbr_3_grp;
            ws_pat_chart_nbr_4_grp = Util.Str(pat_chart_1st_char).PadRight(1, ' ') + Util.Str(pat_chart_remainder).PadRight(9, ' ');
            pat_old_chart_nbr_4 = ws_pat_chart_nbr_4_grp;
            ws_pat_chart_nbr_5_grp = Util.Str(pat_chart_1st_char).PadRight(1, ' ') + Util.Str(pat_chart_remainder).PadRight(10, ' ');
            pat_old_chart_nbr_5 = ws_pat_chart_nbr_5_grp;
            hold_pat_birth_date_grp = Util.Str(ws_pat_birth_date);
            hold_pat_birth_yy_12 = Util.NumInt(Util.Str(hold_pat_birth_date_grp).PadLeft(8, '0').Substring(0, 2));
            hold_pat_birth_yy_34 = Util.NumInt(Util.Str(hold_pat_birth_date_grp).PadLeft(8, '0').Substring(2, 2));
            hold_pat_birth_mm = Util.NumInt(Util.Str(hold_pat_birth_date_grp).PadLeft(8, '0').Substring(4, 2));
            hold_pat_birth_dd = Util.NumInt(Util.Str(hold_pat_birth_date_grp).PadLeft(8, '0').Substring(6, 2));
            hold_version_cd = ws_pat_version_cd;
            // ws_pat_ohip_mmyy = Util.Str(ws_pat_ohip_nbr).PadLeft(8, '0') + Util.Str(ws_pat_mm).PadLeft(2, '0') + Util.Str(ws_pat_yy).PadLeft(2, '0');     

            clmhdr_pat_acronym6 = Util.Str(ws_pat_surname_first6);

            // if ws-pat-last-birth-date not = 0 then            
            if (ws_pat_last_birth_date != 0)
            {
                hold_last_birth_date_grp = Util.Str(ws_pat_last_birth_date);
                hold_last_birth_yy_12 = Util.NumInt(Util.Str(hold_last_birth_date_grp).PadLeft(8, '0').Substring(0, 2));
                hold_last_birth_yy_34 = Util.NumInt(Util.Str(hold_last_birth_date_grp).PadLeft(8, '0').Substring(2, 2));
                hold_last_birth_mm = Util.NumInt(Util.Str(hold_last_birth_date_grp).PadLeft(8, '0').Substring(4, 2));
                hold_last_birth_dd = Util.NumInt(Util.Str(hold_last_birth_date_grp).PadLeft(8, '0').Substring(6, 2));
            }

            // if ws-pat-date-last-elig-maint not = 0 then            
            if (ws_pat_date_last_elig_maint != 0)
            {
                hold_last_elig_maint_date_grp = Util.Str(ws_pat_date_last_elig_maint);
                hold_last_elig_maint_yy = Util.NumInt(Util.Str(hold_last_elig_maint_date_grp).PadLeft(8, '0').Substring(0, 4));
                hold_last_elig_maint_yy_12 = Util.NumInt(Util.Str(hold_last_elig_maint_yy).Substring(0, 2));
                hold_last_elig_maint_yy_34 = Util.NumInt(Util.NumInt(Util.Str(hold_last_elig_maint_yy).Substring(2, 2)));
                hold_last_elig_maint_mm = Util.NumInt(Util.Str(hold_last_elig_maint_date_grp).PadLeft(8, '0').Substring(4, 2));
                hold_last_elig_maint_dd = Util.NumInt(Util.Str(hold_last_elig_maint_date_grp).PadLeft(8, '0').Substring(6, 2));
            }

            // if ws-pat-date-last-elig-mailing not = 0 then            
            if (ws_pat_date_last_elig_mailing != 0)
            {
                hold_last_elig_mail_date_grp = Util.Str(ws_pat_date_last_elig_mailing);
                hold_last_elig_mail_yy = Util.NumInt(Util.Str(hold_last_elig_mail_date_grp).PadLeft(8, '0').Substring(0, 4));
                hold_last_elig_mail_yy_12 = Util.NumInt(Util.Str(hold_last_elig_mail_yy).Substring(0, 2));
                hold_last_elig_mail_yy_34 = Util.NumInt(Util.Str(hold_last_elig_mail_yy).Substring(2, 2));
                hold_last_elig_mail_mm = Util.NumInt(Util.Str(hold_last_elig_mail_date_grp).PadLeft(8, '0').Substring(4, 2));
                hold_last_elig_mail_dd = Util.NumInt(Util.Str(hold_last_elig_mail_date_grp).PadLeft(8, '0').Substring(6, 2));
            }

            // if hold-last-birth-date not numeric then    
            hold_last_birth_date_grp = Util.Str(hold_last_birth_yy_12) + Util.Str(hold_last_birth_yy_34) + Util.Str(hold_last_birth_mm) + Util.Str(hold_last_birth_dd);
            if (!Util.IsNumeric(hold_last_birth_date_grp))
            {
                hold_last_birth_date_grp = "0";
            }

            //     display scr-acpt-clmhdr.; 
            Display("scr-acpt-clmhdr.");
        }

        private async Task ca1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca1_99_exit");

            //     exit.;
        }

        private async Task ca11_zero_variables()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca11_zero_variables");

            hold_sv_date_yy[ss] = 0;
            hold_sv_date_mm[ss] = 0;
            hold_sv_date_dd[ss] = 0;
            hold_sv_nbr_serv[ss] = 0;

            //Todo: this is for the screen with 2 dim arrays
            //hold_sv_nbr[ss, 1] = 0;
            //hold_sv_nbr[ss, 2] = 0;
            //hold_sv_nbr[ss, 3] = 0;

            hold_fee_oma[ss] = 0;
            hold_fee_ohip[ss] = 0;
            hold_flag_sec_group[ss] = "0";
        }

        private async Task ca11_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca11_99_exit");
            //     exit.;
        }

        private async Task ca2_verify_new_err_pat()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca2_verify_new_err_pat");

            //accept scr-clmhdr-pat-verif.;
            Display("scr-acpt-patient-verif.");
            await Prompt("reply_create_pat");

            if (Util.Str(reply_create_pat).ToUpper().Equals(new_patient) || Util.Str(reply_create_pat).ToUpper().Equals(err_patient) || Util.Str(reply_create_pat).ToUpper().Equals(request_pgm_m010))
            {
                //next sentence;
            }
            else
            {
                err_ind = 1;
                //perform za0-common - error        thru za0-99 - exit;
                await za0_common_error();
                await za0_99_exit();
                //go to ca2 - verify - new- err - pat.
                await ca2_verify_new_err_pat();
                return;
            }
        }

        private async Task ca2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca2_99_exit");

            //     exit.;
        }

        private async Task ca5_acpt_msg()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca5_acpt_msg");

            //     accept scr-msg-nbr.;
            Display("scr-acpt-clmhdr.");
            await Prompt("clmhdr_msg_nbr");

            // if clmhdr-msg-nbr not = zero then            
            if (Util.NumInt(clmhdr_msg_nbr) != 0)
            {
                msg_sub_key_1 = msg_indexer;
                msg_sub_key_23 = clmhdr_msg_nbr;
                //      perform ca7-read-msg-sub-mstr           thru ca7-99-exit;
                await ca7_read_msg_sub_mstr();
                await ca7_99_exit();

                // if msg-sub-missing then     
                if (flag_msg_sub.Equals(msg_sub_missing))
                {
                    err_ind = 56;
                    //  perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //  go to ca5-acpt-msg;
                    await ca5_acpt_msg();
                    return;
                }
                else
                {
                    clmhdr_reprint_flag = msg_reprint_flag;
                }
            }
            else
            {
                clmhdr_reprint_flag = "Y";
            }
        }

        private async Task ca5_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca5_99_exit");

            //     exit.;
        }

        private async Task ca6_acpt_sub()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca6_acpt_sub");

            //  accept scr-sub-nbr.;
            Display("scr-acpt-clmhdr.");
            await Prompt("clmhdr_sub_nbr");

            msg_sub_key_1 = sub_indexer;
            msg_sub_key_2 = "";
            msg_sub_key_3 = clmhdr_sub_nbr;

            // perform ca7-read-msg-sub-mstr       thru ca7-99-exit.;
            await ca7_read_msg_sub_mstr();
            await ca7_99_exit();

            // if msg-sub-missing  then       
            if (flag_msg_sub.Equals(msg_sub_missing))
            {
                err_ind = 57;
                //  perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  go to ca6-acpt-sub;
                await ca6_acpt_sub();
                return;
            }
            else
            {
                clmhdr_fee_complex = sub_fee_complex;
                clmhdr_auto_logout = sub_auto_logout;
            }
        }

        private async Task ca6_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca6_99_exit");

            //     exit.;
        }

        private async Task ca7_read_msg_sub_mstr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca7_read_msg_sub_mstr");

            //  read msg-sub-mstr;
            //         invalid key;
            //             flag_msg_sub = "N";
            //             go to ca7-99-exit.;

            msg_sub_key_23 = Util.Str(msg_sub_key_2) + Util.Str(msg_sub_key_3);

            Msg_sub_mstr_rec_Collection = new F094_MSG_MSTR
            {
                WhereMsg_sub_key_1 = msg_sub_key_1,
                WhereMsg_sub_key_23 = msg_sub_key_23
            }.Collection();

            if (Msg_sub_mstr_rec_Collection.Count() == 0)
            {
                flag_msg_sub = "N";
                //go to ca7-99-exit.;
                await ca7_99_exit();
                return;
            }

            objMsg_sub_mstr_rec = Msg_sub_mstr_rec_Collection.FirstOrDefault();
            await msgSubMstr_record_to_screenVariables();

            flag_msg_sub = "Y";
            //   add 1                               to ctr-read-msg-sub-mstr.;
            ctr_read_msg_sub_mstr++;
        }

        private async Task ca7_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ca7_99_exit");
            //     exit.;
        }

        private async Task da0_acpt_id_access_pat_subscr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da0_acpt_id_access_pat_subscr");

            // if site-id = 'RMA' then            
            if (site_id == "RMA")
            {
                ws_ohip_chart_flag = "$";
                //      accept scr-ohip-chart-flag;
                Display("scr-acpt-clmhdr.");
                await Prompt("ws_ohip_chart_flag");

                //      if ws-ohip-chart-flag = ' ' or '*' then            
                if (string.IsNullOrWhiteSpace(ws_ohip_chart_flag) || ws_ohip_chart_flag == "*")
                {
                    // 	        go to da0-99-exit;
                    await da0_99_exit();
                    return;
                }
                //      else if ws-ohip-chart-flag = '!' or '$' then            
                else if (ws_ohip_chart_flag == "!" || ws_ohip_chart_flag == "$")
                {
                    // 	        next sentence;
                }
                else
                {
                    err_ind = 108;
                    // 	         perform za0-common-error	thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	go to da0-acpt-id-access-pat-subscr.;
                    await da0_acpt_id_access_pat_subscr();
                    return;
                }
            }

            //     accept scr-clmhdr-ohip-chart.;
            Display("scr-acpt-clmhdr.");
            await Prompt("ws_pat_ohip_mmyy");

            ws_pat_ohip_nbr = Util.NumInt(Util.Str(ws_pat_ohip_mmyy).PadRight(12).Substring(0, 8));
            ws_pat_mm = Util.NumInt(Util.Str(ws_pat_ohip_mmyy).PadRight(12).Substring(8, 2));
            ws_pat_yy = Util.NumInt(Util.Str(ws_pat_ohip_mmyy).PadRight(12).Substring(10, 2));

            pat_ohip_mmyy = ws_pat_ohip_mmyy;
            // if (ws-pat-ohip-nbr = spaces or ws-pat-ohip-nbr = zeros) then        

            if (string.IsNullOrWhiteSpace(Util.Str(ws_pat_ohip_mmyy).PadRight(12).Substring(0, 8)) || (Util.IsNumeric(Util.Str(ws_pat_ohip_mmyy).PadRight(12).Substring(0, 8)) && Util.NumInt(Util.Str(ws_pat_ohip_mmyy).PadRight(12).Substring(0, 8)) == 0))
            {
                //         go to da0-99-exit.;
                await da0_99_exit();
                return;
            }

            flag_valid_ohip_or_chart = "";
            //  perform da1-chk-if-chart-or-valid-ohip      thru da1-99-exit.;
            await da1_chk_if_chart_or_valid_ohip();
            await da1_99_exit();

            // if  invalid-chart then            
            if (flag_valid_ohip_or_chart.Equals(invalid_chart))
            {
                err_ind = 13;
                // perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // go to da0-acpt-id-access-pat-subscr.;
                await da0_acpt_id_access_pat_subscr();
                return;
            }

            flag = "Y";
            err_ind = 0;

            // if direct or qhip then;            
            if (flag_ohip_vs_chart.Equals(direct) || flag_ohip_vs_chart.Equals(qhip))
            {
                //pat_ohip_mmyy = ws_pat_ohip_mmyy;
                //ws_pat_ohip_mmyy = Util.Str(ws_pat_ohip_nbr).PadLeft(8, '0') + Util.Str(ws_pat_mm).PadLeft(2, '0') + Util.Str(ws_pat_yy).PadLeft(2, '0');
                pat_ohip_mmyy = ws_pat_ohip_mmyy;
                pat_ohip_nbr = Util.NumInt(Util.Str(ws_pat_ohip_mmyy).PadLeft(15, '0').Substring(0, 8));
                pat_yy = Util.NumInt(Util.Str(ws_pat_ohip_mmyy).PadLeft(15, '0').Substring(8, 2));
                pat_mm = Util.NumInt(Util.Str(ws_pat_ohip_mmyy).PadLeft(15, '0').Substring(10, 2));

                //  perform da5-read-od-pat-mstr            thru da5-99-exit;
                await da5_read_od_pat_mstr();
                await da5_99_exit();

                // go to da0-99-exit;
                await da0_99_exit();
                return;
            }
            //  else if chart then            
            else if (flag_ohip_vs_chart.Equals(chart))
            {
                // 	    if site-id = 'RMA' then            
                if (Util.Str(site_id).Equals("RMA"))
                {
                    // 		     perform da61-read-chrt-pat-mstr	thru da61-99-exit;
                    await da61_read_chrt_pat_mstr();
                    await da61_99_exit();
                }
                else
                {
                    pat_chart_nbr_grp = ws_pat_ohip_mmyy;
                    pat_chart_1st_char = pat_chart_nbr_grp.PadRight(10).Substring(0, 1);
                    pat_chart_remainder = pat_chart_nbr_grp.PadRight(10).Substring(1, 9);
                    objPat_mstr_rec.PAT_CHART_NBR = pat_chart_1st_char + pat_chart_remainder;
                    //  perform da6-read-chrt-pat-mstr      thru da6-99-exit.;
                    await da6_read_chrt_pat_mstr();
                    await da6_99_exit();
                }
            }

            //  if  def-agent-ohip or def-agent-alternate-funding  or (    def-agent-ohip-wcb  and site-id = "RMA"  )  then         
            if (
                  def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_alternate_funding) || (def_agent_code.Equals(def_agent_ohip_wcb) && site_id.Equals("RMA"))
                )
            {
                // if (   (site-id = "HSC"  )  or (    ( pat-ohip-mmyy =   zero  or spaces  )  and site-id = "RMA"  )  )   and  pat-health-nbr of pat-mstr-rec = 0   then;            
                if (
                       ((site_id.Equals("HSC")) || ((Util.NumInt(pat_ohip_mmyy) == 0 || string.IsNullOrWhiteSpace(pat_ohip_mmyy)) && site_id == "RMA")) && objPat_mstr_rec.PAT_HEALTH_NBR == 0
                    )
                {
                    err_ind = 14;
                    flag = "N";
                }
                else
                {
                    //            display scr-pat-health-nbr.; 
                    Display("scr-acpt-clmhdr.", "scr-pat-health-nbr");
                }
            }
        }

        private async Task da0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da0_99_exit");

            //     exit.;
        }

        private async Task da1_chk_if_chart_or_valid_ohip()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da1_chk_if_chart_or_valid_ohip");

            // if site-id = 'RMA' then            
            if (site_id.Equals("RMA"))
            {
                // if ws-ohip-chart-flag = '!' then            
                if (ws_ohip_chart_flag.Equals("!"))
                {
                    flag_ohip_vs_chart = "O";
                    flag_valid_ohip_or_chart = "Y";
                    // 	  go to da1-99-exit;
                    await da1_99_exit();
                    return;
                }
                // else if ws-ohip-chart-flag = '$' then            
                else if (ws_ohip_chart_flag.Equals("$"))
                {
                    flag_ohip_vs_chart = "C";
                    flag_valid_ohip_or_chart = "Y";
                    // 	     go to da1-99-exit.;
                    await da1_99_exit();
                    return;
                }
            }

            // if ws-pat-direct-alpha is alphabetic then    
            ws_pat_direct_alpha_grp = Util.Str(ws_pat_alpha1).PadRight(1, ' ') + Util.Str(ws_pat_alpha2_3).PadRight(2, ' ');
            if (!Util.IsNumeric(ws_pat_direct_alpha_grp))
            {
                flag_ohip_vs_chart = "D";
                flag_valid_ohip_or_chart = "Y";
            }
            //     else if ws-pat-alpha1 = "*"  then            
            else if (Util.Str(ws_pat_alpha1).Equals("*"))
            {
                flag_valid_ohip_or_chart = "N";
            }
            else
            {
                c_1 = 0;
                //            inspect ws-pat-ohip-mmyy tallying c-1 for all " ";
                c_1 = ws_pat_ohip_mmyy.Count(s => s == ' ');
                //  if ws-pat-alpha1 is alphabetic and (  (    c-1 < 7   and site-id = "RMA"  )  or (    c-1 = 7  and site-id = "HSC" ) )  then      
                if (
                     !Util.IsNumeric(ws_pat_alpha1) && ((c_1 < 7 & site_id == "RMA") || (c_1 == 7 && site_id == "HSC"))
                    )
                {
                    flag_ohip_vs_chart = "C";
                }
                else
                {
                    flag_ohip_vs_chart = "O";
                }
            }
        }

        private async Task da1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da1_99_exit");

            //     exit.;
        }

        private async Task da4_read_hc_pat_mstr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da4_read_hc_pat_mstr");

            //  read    pat-mstr into ws-pat-mstr-rec;
            //         key is pat-health-nbr of pat-mstr;
            //              invalid key;
            //                err_ind = 16;
            //               flag = "N";
            //             go to da4-99-exit.;

            Pat_mstr_rec_Collection = new F010_PAT_MSTR
            {
                WherePat_health_nbr = pat_health_nbr
            }.Collection();

            if (Pat_mstr_rec_Collection.Count() == 0)
            {
                err_ind = 16;
                flag = "N";
                //  go to da4-99-exit.;
                await da4_99_exit();
                return;
            }

            objPat_mstr_rec = Pat_mstr_rec_Collection.FirstOrDefault();
            await patMstr_record_to_wsPatmstrRec_screenVariables();  //move to ws-pat-mstr-rec

            //   add  1                              to ctr-read-pat-mstr.;
            ctr_read_pat_mstr++;
            save_feedback_pat_mstr = feedback_pat_mstr_hc;
            ws_scr_health_nbr = Util.Str(pat_health_nbr);
        }

        private async Task da4_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da4_99_exit");

            //     exit.;
        }

        private async Task da5_read_od_pat_mstr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da5_read_od_pat_mstr");

            //     read    pat-mstr into ws-pat-mstr-rec;
            //         key is pat-ohip-mmyy;
            //         invalid key;
            //            err_ind = 16;
            //             flag = "N";
            //             go to da5-99-exit.;

            Pat_mstr_rec_Collection = new F010_PAT_MSTR
            {
                WherePat_direct_alpha = Util.Str(pat_ohip_mmyy).PadRight(15, ' ').Substring(0, 3),
                WherePat_direct_yy = Util.NumInt(Util.Str(pat_ohip_mmyy).PadRight(15, ' ').Substring(3, 2)),
                WherePat_direct_mm = Util.NumInt(Util.Str(pat_ohip_mmyy).PadRight(15, ' ').Substring(5, 2)),
                WherePat_direct_dd = Util.NumInt(Util.Str(pat_ohip_mmyy).PadRight(15, ' ').Substring(7, 2)),
                WherePat_direct_last_6 = Util.Str(pat_ohip_mmyy).PadRight(15, ' ').Substring(9, 6)
            }.Collection();

            if (Pat_mstr_rec_Collection.Count() == 0)
            {
                err_ind = 16;
                flag = "N";
                //  go to da5-99-exit.;
                await da5_99_exit();
                return;
            }

            objPat_mstr_rec = Pat_mstr_rec_Collection.FirstOrDefault();
            await patMstr_record_to_wsPatmstrRec_screenVariables();

            //     add  1  to ctr-read-pat-mstr.;
            ctr_read_pat_mstr++;

            save_feedback_pat_mstr = feedback_pat_mstr_od;
            ws_scr_health_nbr = Util.Str(pat_health_nbr).PadLeft(10, '0');
        }

        private async Task da5_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da5_99_exit");

            //     exit.;
        }

        private async Task da6_read_chrt_pat_mstr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da6_read_chrt_pat_mstr");

            //     read      pat-mstr into ws-pat-mstr-rec;
            //         key is pat-chart-nbr;
            //         invalid key;
            //         err_ind = 16;
            //         flag = "N";
            //         go to da6-99-exit.;

            Pat_mstr_rec_Collection = new F010_PAT_MSTR
            {
                WherePat_chart_nbr = pat_chart_nbr_grp
            }.Collection();

            if (Pat_mstr_rec_Collection.Count() == 0)
            {
                err_ind = 16;
                flag = "N";
                //  go to da6-99-exit.;
                await da6_99_exit();
                return;
            }

            objPat_mstr_rec = Pat_mstr_rec_Collection.FirstOrDefault();
            await patMstr_record_to_wsPatmstrRec_screenVariables();
            //     add  1                              to ctr-read-pat-mstr.;
            ctr_read_pat_mstr++;
            save_feedback_pat_mstr = feedback_pat_mstr_chrt;
            ws_scr_health_nbr = Util.Str(pat_health_nbr);
        }

        private async Task da6_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da6_99_exit");

            //     exit.;
        }

        private async Task da61_read_chrt_pat_mstr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da61_read_chrt_pat_mstr");

            // if ws-pat-alpha1 = 'M' then            
            if (ws_pat_alpha1.Equals("M"))
            {
                pat_chart_nbr_grp = ws_pat_ohip_mmyy;
                pat_chart_1st_char = pat_chart_nbr_grp.PadRight(10).Substring(0, 1);
                pat_chart_remainder = pat_chart_nbr_grp.PadRight(10).Substring(1, 9);
                objPat_mstr_rec.PAT_CHART_NBR = pat_chart_1st_char + pat_chart_remainder;
                //   read      pat-mstr into ws-pat-mstr-rec;
                //         key is pat-chart-nbr;
                //         invalid key;
                //               err_ind = 16;
                //               flag = "N";
                //             go to da61-99-exit;

                Pat_mstr_rec_Collection = new F010_PAT_MSTR
                {
                    WherePat_chart_nbr = pat_chart_nbr_grp
                }.Collection();

                if (Pat_mstr_rec_Collection.Count() == 0)
                {
                    err_ind = 16;
                    flag = "N";
                    //  go to da61-99-exit;
                    await da61_99_exit();
                    return;
                }

                objPat_mstr_rec = Pat_mstr_rec_Collection.FirstOrDefault();
                await patMstr_record_to_wsPatmstrRec_screenVariables();

            }
            // else if ws-pat-alpha1 = 'K' then            
            else if (ws_pat_alpha1.Equals("K"))
            {
                pat_chart_nbr_2_grp = ws_pat_ohip_mmyy;
                pat_chart_1st_char = pat_chart_nbr_2_grp.PadRight(10).Substring(0, 1);
                pat_chart_remainder = pat_chart_nbr_2_grp.PadRight(10).Substring(1, 9);
                objPat_mstr_rec.PAT_CHART_NBR_2 = pat_chart_1st_char + pat_chart_remainder;
                //        read      pat-mstr into ws-pat-mstr-rec;
                //         key is pat-chart-nbr-2;
                //         invalid key;
                //             err_ind = 16;
                //             flag = "N";
                //             go to da61-99-exit;

                Pat_mstr_rec_Collection = new F010_PAT_MSTR
                {
                    WherePat_chart_nbr_2 = pat_chart_nbr_2_grp
                }.Collection();

                if (Pat_mstr_rec_Collection.Count() == 0)
                {
                    err_ind = 16;
                    flag = "N";
                    // go to da61-99-exit;
                    await da61_99_exit();
                    return;
                }

                objPat_mstr_rec = Pat_mstr_rec_Collection.FirstOrDefault();
                await patMstr_record_to_wsPatmstrRec_screenVariables();
            }
            // else if ws-pat-alpha1 = 'H' then            
            else if (ws_pat_alpha1.Equals("H"))
            {
                pat_chart_nbr_3_grp = ws_pat_ohip_mmyy;
                pat_chart_1st_char = pat_chart_nbr_3_grp.PadRight(10).Substring(0, 1);
                pat_chart_remainder = pat_chart_nbr_3_grp.PadRight(10).Substring(1, 9);
                objPat_mstr_rec.PAT_CHART_NBR_3 = pat_chart_1st_char + pat_chart_remainder;
                //  read      pat-mstr into ws-pat-mstr-rec;
                //         key is pat-chart-nbr-3;
                //         invalid key;
                //             err_ind = 16;
                //             flag = "N";
                //             go to da61-99-exit;

                Pat_mstr_rec_Collection = new F010_PAT_MSTR
                {
                    WherePat_chart_nbr_3 = pat_chart_nbr_3_grp
                }.Collection();

                if (Pat_mstr_rec_Collection.Count() == 0)
                {
                    err_ind = 16;
                    flag = "N";
                    //  go to da61-99-exit;
                    await da61_99_exit();
                    return;
                }

                objPat_mstr_rec = Pat_mstr_rec_Collection.FirstOrDefault();
                await patMstr_record_to_wsPatmstrRec_screenVariables();
            }
            // else if ws-pat-alpha1 = 'J'  then            
            else if (ws_pat_alpha1.Equals("J"))
            {
                pat_chart_nbr_5_grp = ws_pat_ohip_mmyy;
                pat_chart_1st_char = pat_chart_nbr_5_grp.PadRight(10).Substring(0, 1);
                pat_chart_remainder = pat_chart_nbr_5_grp.PadRight(10).Substring(1, 9);
                objPat_mstr_rec.PAT_CHART_NBR_5 = pat_chart_1st_char + pat_chart_remainder;
                //        read      pat-mstr into ws-pat-mstr-rec;
                //         key is pat-chart-nbr-5;
                //         invalid key;
                //              err_ind = 16;
                //              flag = "N";
                //              go to da61-99-exit;

                Pat_mstr_rec_Collection = new F010_PAT_MSTR
                {
                    WherePat_chart_nbr_5 = pat_chart_nbr_5_grp
                }.Collection();

                if (Pat_mstr_rec_Collection.Count() == 0)
                {
                    err_ind = 16;
                    flag = "N";
                    //  go to da61-99-exit;
                    await da61_99_exit();
                    return;
                }
                objPat_mstr_rec = Pat_mstr_rec_Collection.FirstOrDefault();
                await patMstr_record_to_wsPatmstrRec_screenVariables();
            }
            else
            {
                pat_chart_nbr_4_grp = ws_pat_ohip_mmyy;
                pat_chart_1st_char = pat_chart_nbr_4_grp.PadRight(10).Substring(0, 1);
                pat_chart_remainder = pat_chart_nbr_4_grp.PadRight(10).Substring(1, 9);
                objPat_mstr_rec.PAT_CHART_NBR_4 = pat_chart_1st_char + pat_chart_remainder;
                //        read      pat-mstr into ws-pat-mstr-rec;
                //         key is pat-chart-nbr-4;
                //         invalid key;
                //              err_ind = 16;
                //             flag = "N";
                //            go to da61-99-exit.;

                Pat_mstr_rec_Collection = new F010_PAT_MSTR
                {
                    WherePat_chart_nbr_4 = pat_chart_nbr_4_grp
                }.Collection();

                if (Pat_mstr_rec_Collection.Count() == 0)
                {
                    err_ind = 16;
                    flag = "N";
                    //  go to da61-99-exit.;
                    await da61_99_exit();
                    return;
                }
                objPat_mstr_rec = Pat_mstr_rec_Collection.FirstOrDefault();
                await patMstr_record_to_wsPatmstrRec_screenVariables();
            }

            //     add  1                              to ctr-read-pat-mstr.;
            ctr_read_pat_mstr++;
            save_feedback_pat_mstr = feedback_pat_mstr_chrt;
            ws_scr_health_nbr = Util.Str(pat_health_nbr);
        }

        private async Task da61_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da61_99_exit");

            //     exit.;
        }

        private async Task da7_read_acr_pat_mstr_approx()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da7_read_acr_pat_mstr_approx");

            pat_occur_acr = 0;
            feedback_pat_mstr_acr = "0";
            ws_hold_acronym = pat_acronym;

            //     start    pat-mstr;
            //         key is greater than or equal to    pat-acronym;
            //         invalid key;
            //                  flag = "N";
            //                 go to da7-99-exit.;

            //     read pat-mstr;
            //             key is  pat-acronym;
            //             invalid key;
            //                 flag = "N";
            //                 go to da7-99-exit.; 

            bool isRetrieve = false;
            Pat_mstr_rec_Collection = new F010_PAT_MSTR
            {
                WherePat_acronym_first6 = Util.Str(pat_acronym).PadRight(9, ' ').Substring(0, 6),
                WherePat_acronym_last3 = Util.Str(pat_acronym).PadRight(9, ' ').Substring(6, 3),
            }.Collection_UsingStart(ref isRetrieve, Pat_mstr_rec_Collection);

            if (Pat_mstr_rec_Collection.Count() == 0)
            {
                flag = "N";
                //go to da7-99-exit.; 
                await da7_99_exit();
                return;
            }
            else
            {
                // TODO: Watch for the row counter  for move next ??? (NO rowcounter yet for this code. I'm using using the first record.

                if (pat_Mstr_Rec_Ctr >= Pat_mstr_rec_Collection.Count())
                {
                    objPat_mstr_rec = new F010_PAT_MSTR();
                    return;
                }
                else
                {
                    if (isRetrieve) pat_Mstr_Rec_Ctr = 0;
                    objPat_mstr_rec = Pat_mstr_rec_Collection[pat_Mstr_Rec_Ctr]; // todo:  pat_Mstr_Rec_Ctr???
                    pat_Mstr_Rec_Ctr++;
                    await patMstr_record_to_wsPatmstrRec_screenVariables();

                }
            }
        }

        private async Task da7_not_dialysis()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da7_not_dialysis");

            bool exit = false;

            while (exit == false)
            {

                //  if  pat-acronym  not = ws-hold-acronym then      
                pat_acronym = Util.Str(pat_acronym_first6).PadRight(6, ' ') + Util.Str(pat_acronym_last3).PadRight(3, ' ');
                if (pat_acronym != ws_hold_acronym)
                {
                    err_ind = 49;
                    flag = "N";
                    //  go to da7-99-exit;
                    await da7_99_exit();
                    exit = true;
                    return;
                }
                //     else if pat-dialysis = "Y"  then            
                else if (pat_dialysis.Equals("Y"))
                {
                    //ws_pat_mstr_rec = pat_mstr_rec;
                    await move_patMstrRec_to_wsPatMstrRec();   //Todo: Watch this! moving from recordset to another recordset...??
                    ws_scr_health_nbr = Util.Str(ws_pat_health_nbr);
                    //  go to da7-99-exit;
                    await da7_99_exit();
                    exit = true;
                    return;
                }
                else
                {
                    //   read  pat-mstr next at end                
                    //               err_ind = 81;
                    //               flag = "N";
                    //               go to da7-99-exit.;

                    if (pat_Mstr_Rec_Ctr >= Pat_mstr_rec_Collection.Count())
                    {
                        err_ind = 81;
                        flag = "N";
                        //  go to da7-99-exit.;
                        await da7_99_exit();
                        exit = true;
                        return;
                    }

                    objPat_mstr_rec = Pat_mstr_rec_Collection[pat_Mstr_Rec_Ctr]; // todo:  pat_Mstr_Rec_Ctr???
                    pat_Mstr_Rec_Ctr++;
                    await patMstr_record_to_wsPatmstrRec_screenVariables();
                }

                //     go to da7-not-dialysis.;  //this is recursive..
            }
        }

        private async Task da7_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "da7_99_exit");
            //     exit.;
        }

        // db0_mod10_check_digit.rtn
        private async Task db0_mod10_check_digit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "db0_mod10_check_digit");

            // add  ws-chk-nbr-2;
            // 	     ws-chk-nbr-4;
            // 	     ws-chk-nbr-6			giving ws-temp.;

            ws_temp = ws_chk_nbr_2 + ws_chk_nbr_4 + ws_chk_nbr_6;

            // add  ws-chk-nbr-1;
            // 	    ws-chk-nbr-1			giving ws-temp-2.;

            ws_temp_2 = ws_chk_nbr_1 + ws_chk_nbr_1;

            ws_temp_2a = Util.NumInt(Util.Str(ws_temp_2).PadRight(2, '0').Substring(0, 1));
            ws_temp_2b = Util.NumInt(Util.Str(ws_temp_2).PadRight(2, '0').Substring(1, 1));

            // add  ws-temp-2a;
            // 	    ws-temp-2b			to ws-temp.;

            ws_temp = ws_temp_2a + ws_temp_2b;

            // add  ws-chk-nbr-3;
            // 	    ws-chk-nbr-3			giving ws-temp-2.;
            ws_temp_2 = ws_chk_nbr_3 + ws_chk_nbr_3;

            ws_temp_2a = Util.NumInt(Util.Str(ws_temp_2).PadRight(2, '0').Substring(0, 1));
            ws_temp_2b = Util.NumInt(Util.Str(ws_temp_2).PadRight(2, '0').Substring(1, 1));

            // add  ws-temp-2a;
            // 	    ws-temp-2b			to ws-temp.;
            ws_temp = ws_temp_2a + ws_temp_2b;

            // add  ws-chk-nbr-5;
            // 	    ws-chk-nbr-5			giving ws-temp-2.;
            ws_temp_2 = ws_chk_nbr_5 + ws_chk_nbr_5;

            ws_temp_2a = Util.NumInt(Util.Str(ws_temp_2).PadRight(2, '0').Substring(0, 1));
            ws_temp_2b = Util.NumInt(Util.Str(ws_temp_2).PadRight(2, '0').Substring(1, 1));

            // add  ws-temp-2a;
            // 	    ws-temp-2b			to ws-temp.;
            ws_temp = ws_temp_2a + ws_temp_2b;

            // add  ws-chk-nbr-7;
            // 	    ws-chk-nbr-7			giving ws-temp-2.;
            ws_temp_2 = ws_chk_nbr_7 + ws_chk_nbr_7;

            ws_temp_2a = Util.NumInt(Util.Str(ws_temp_2).PadRight(2, '0').Substring(0, 1));
            ws_temp_2b = Util.NumInt(Util.Str(ws_temp_2).PadRight(2, '0').Substring(1, 1));

            // add  ws-temp-2a;
            // 	    ws-temp-2b			to ws-temp.;
            ws_temp = ws_temp_2a + ws_temp_2b;

            // divide   ws-temp    by  10		giving ws-temp-1.;
            ws_temp_1 = ws_temp / 10;

            // multiply ws-temp-1  by  10		giving ws-temp-1.;
            ws_temp_1 = ws_temp_1 * 10;

            //  subtract ws-temp-1			from ws-temp.;
            ws_temp = ws_temp - ws_temp_1;

            //  subtract ws-temp			from 10;
            // 					giving ws-temp.;
            ws_temp = 10 - ws_temp;

            // if ws-temp  = ws-chk-nbr-8 or ( ws-temp = 10   and ws-chk-nbr-8 =  0 )  then            
            if (ws_temp == ws_chk_nbr_8 || (ws_temp == 10 && ws_chk_nbr_8 == 0))
            {
                flag = "y";
            }
            else
            {
                flag = "n";
            }
        }

        // db0_mod10_check_digit.rtn
        private async Task db0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "db0_99_exit");

            //     exit.;
        }

        // db0a_mod10_check_digit_10.rtn
        private async Task db0a_mod10_check_digit_10()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "db0a_mod10_check_digit_10");

            //  add  ws-chk-nbr-2-10;
            // 	 ws-chk-nbr-4-10;
            // 	 ws-chk-nbr-6-10;
            // 	 ws-chk-nbr-8-10		giving ws-temp-10.;

            ws_temp_10 = ws_chk_nbr_2_10 + ws_chk_nbr_4_10 + ws_chk_nbr_6_10 + ws_chk_nbr_8_10;

            //  add ws-chk-nbr-1-10;
            // 	    ws-chk-nbr-1-10		giving ws-temp-2-10.;
            ws_temp_2_10 = ws_chk_nbr_1_10 + ws_chk_nbr_1_10;

            ws_temp_2a_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 0, 1));

            if (ws_temp_2_10 > 9)
            {
                ws_temp_2b_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 1, 1));
            }
            else
            {
                ws_temp_2b_10 = 0;
            }

            //  add  ws-temp-2a-10;
            // 	     ws-temp-2b-10			to ws-temp-10.;
            ws_temp_10 += ws_temp_2a_10 + ws_temp_2b_10;

            //  add  ws-chk-nbr-3-10;
            // 	     ws-chk-nbr-3-10		giving ws-temp-2-10.;
            ws_temp_2_10 = ws_chk_nbr_3_10 + ws_chk_nbr_3_10;

            ws_temp_2a_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 0, 1));

            if (ws_temp_2_10 > 9)
            {
                ws_temp_2b_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 1, 1));
            }
            else
            {
                ws_temp_2b_10 = 0;
            }

            // add  ws-temp-2a-10;
            // 	    ws-temp-2b-10			to ws-temp-10.;
            ws_temp_10 += ws_temp_2a_10 + ws_temp_2b_10;

            // add  ws-chk-nbr-5-10;
            // 	    ws-chk-nbr-5-10		giving ws-temp-2-10.;
            ws_temp_2_10 = ws_chk_nbr_5_10 + ws_chk_nbr_5_10;

            ws_temp_2a_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 0, 1));

            if (ws_temp_2_10 > 9)
            {
                ws_temp_2b_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 1, 1));
            }
            else
            {
                ws_temp_2b_10 = 0;
            }

            // add  ws-temp-2a-10;
            // 	    ws-temp-2b-10			to ws-temp-10.;
            ws_temp_10 += ws_temp_2a_10 + ws_temp_2b_10;

            // add  ws-chk-nbr-7-10;
            // 	    ws-chk-nbr-7-10		giving ws-temp-2-10.;
            ws_temp_2_10 = ws_chk_nbr_7_10 + ws_chk_nbr_7_10;

            ws_temp_2a_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 0, 1));

            if (ws_temp_2_10 > 9)
            {
                ws_temp_2b_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 1, 1));
            }
            else
            {
                ws_temp_2b_10 = 0;
            }

            // add  ws-temp-2a-10;
            // 	    ws-temp-2b-10			to ws-temp-10.;
            ws_temp_10 += ws_temp_2a_10 + ws_temp_2b_10;

            // add  ws-chk-nbr-9-10;
            // 	    ws-chk-nbr-9-10		giving ws-temp-2-10.;
            ws_temp_2_10 = ws_chk_nbr_9_10 + ws_chk_nbr_9_10;

            ws_temp_2a_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 0, 1));

            if (ws_temp_2_10 > 9)
            {
                ws_temp_2b_10 = Util.NumInt(Util.Substring(Util.Str(ws_temp_2_10), 1, 1));
            }
            else
            {
                ws_temp_2b_10 = 0;
            }

            // add  ws-temp-2a-10;
            // 	    ws-temp-2b-10			to ws-temp-10.;
            ws_temp_10 += ws_temp_2a_10 + ws_temp_2b_10;

            // divide   ws-temp-10 by  10		giving ws-temp-1-10.;
            ws_temp_1_10 = ws_temp_10 / 10;

            // multiply ws-temp-1-10 by 10		giving ws-temp-1-10.;
            ws_temp_1_10 = ws_temp_1_10 * 10;

            // subtract ws-temp-1-10		from ws-temp-10.;
            ws_temp_10 = ws_temp_10 - ws_temp_1_10;

            // subtract ws-temp-10			from 10;
            // 					giving ws-temp-10.;
            ws_temp_10 = 10 - ws_temp_10;

            // if ws-temp-10  = ws-chk-nbr-10-10 or (    ws-temp-10   = 10   and ws-chk-nbr-10-10 =  0 )  then            
            if (ws_temp_10 == ws_chk_nbr_10_10 || (ws_temp_10 == 10 && ws_chk_nbr_10_10 == 0))
            {
                flag = "Y";
            }
            else
            {
                flag = "N";
            }
        }

        // db0a_mod10_check_digit_10.rtn
        private async Task db0a_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "db0a_99_exit");

            //     exit.;
        }

        // dc0_mod10_check_digit_alt.rtn
        private async Task dc0_mod10_check_digit_for_1_2()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "dc0_mod10_check_digit_for_1_2");

            //  go to dc0-98-exit.;
            await dc0_98_exit();
            return;

            ws_temp = 0;
            ws_temp_1 = 0;
            ws_temp_2 = 0;

            // add  ws-chk-nbr-2;
            // 	 ws-chk-nbr-4;
            // 	 ws-chk-nbr-6			giving ws-temp.;
            ws_temp = ws_chk_nbr_2 + ws_chk_nbr_4 + ws_chk_nbr_6;

            // add  ws-chk-nbr-1;
            // 	    ws-chk-nbr-1			giving ws-temp-2.;
            ws_temp_2 = ws_chk_nbr_1 + ws_chk_nbr_1;

            //     add  ws-temp-2a			to ws-temp-1.;
            ws_temp_1 = ws_temp_1 + ws_temp_2a;

            //     add  ws-temp-2b			to ws-temp.;
            ws_temp = ws_temp + ws_temp_2b;

            //  add  ws-chk-nbr-3;
            // 	     ws-chk-nbr-3			giving ws-temp-2.;
            ws_temp_2 = ws_chk_nbr_3 + ws_chk_nbr_3;

            //  add  ws-temp-2a			to ws-temp-1.;
            ws_temp_1 = ws_temp_1 + ws_temp_2a;

            //     add	 ws-temp-2b			to ws-temp.;
            ws_temp = ws_temp + ws_temp_2b;

            // add  ws-chk-nbr-5;
            //      ws-chk-nbr-5			giving ws-temp-2.;
            ws_temp_2 = ws_chk_nbr_5 + ws_chk_nbr_5;

            // add  ws-temp-2a			to ws-temp-1.;
            ws_temp_1 = ws_temp_1 + ws_temp_2a;

            // add	 ws-temp-2b			to ws-temp.;
            ws_temp = ws_temp + ws_temp_2b;

            //  add  ws-chk-nbr-7;
            // 	     ws-chk-nbr-7			giving ws-temp-2.;
            ws_temp_2 = ws_chk_nbr_7 + ws_chk_nbr_7;

            //  add  ws-temp-2a			to ws-temp-1.;
            ws_temp_1 = ws_temp_1 + ws_temp_2a;

            //  add	 ws-temp-2b			to ws-temp.;
            ws_temp = ws_temp + ws_temp_2b;

            ws_temp_2 = ws_temp;

            //     add  ws-temp-2b			to ws-temp-1.;
            ws_temp_1 = ws_temp_1 + ws_temp_2b;

            //     subtract ws-temp-1			from 10;
            // 					giving ws-temp.;
            ws_temp = 10 - ws_temp_1;

            // if  ws-temp      = ws-chk-nbr-8 then;            
            if (ws_temp == ws_chk_nbr_8)
            {
                flag = "Y";
            }
            else
            {
                flag = "N";
            }
        }

        // dc0_mod10_check_digit_alt.rtn
        private async Task dc0_98_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "dc0_98_exit");

            flag = "Y";
        }

        // dc0_mod10_check_digit_alt.rtn
        private async Task dc0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "dc0_99_exit");

            //     exit.;
        }

        private async Task dd0_check_version_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "dd0_check_version_cd");

            //   if ws-pat-version-cd-1 = ' ' then 
            if (string.IsNullOrWhiteSpace(ws_pat_version_cd_1))
            {
                //         next sentence                 
            }
            //  else if ws-pat-version-cd-1 = 'a' then 
            else if (ws_pat_version_cd_1 == "a")
            {
                //          move 'A' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "A";
            }
            //   else if ws-pat-version-cd-1 = 'b' then
            else if (ws_pat_version_cd_1 == "b")
            {
                //          move 'B' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "B";
            }
            //   else if ws-pat-version-cd-1 = 'c' then 
            else if (ws_pat_version_cd_1 == "c")
            {
                //          move 'C' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "C";
            }
            //   else if ws-pat-version-cd-1 = 'd' then 
            else if (ws_pat_version_cd_1 == "d")
            {
                //           move 'D' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "D";
            }
            //   else if ws-pat-version-cd-1 = 'e' then 
            else if (ws_pat_version_cd_1 == "e")
            {
                //          move 'E' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "E";
            }
            //   else if ws-pat-version-cd-1 = 'f' then 
            else if (ws_pat_version_cd_1 == "f")
            {
                //          move 'F' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "F";
            }
            //   else if ws-pat-version-cd-1 = 'g' then 
            else if (ws_pat_version_cd_1 == "g")
            {
                //         move 'G' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "G";
            }
            //   else if ws-pat-version-cd-1 = 'h' then 
            else if (ws_pat_version_cd_1 == "h")
            {
                //         move 'H' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "H";
            }
            //   else if ws-pat-version-cd-1 = 'i' then 
            else if (ws_pat_version_cd_1 == "i")
            {
                //         move 'I' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "I";
            }
            //   else if ws-pat-version-cd-1 = 'j' then 
            else if (ws_pat_version_cd_1 == "j")
            {
                //         move 'J' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "J";
            }
            //   else if ws-pat-version-cd-1 = 'k' then 
            else if (ws_pat_version_cd_1 == "k")
            {
                //         move 'K' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "K";
            }
            //   else if ws-pat-version-cd-1 = 'l' then 
            else if (ws_pat_version_cd_1 == "l")
            {
                //        move 'L' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "L";
            }
            //   else if ws-pat-version-cd-1 = 'm' then 
            else if (ws_pat_version_cd_1 == "m")
            {
                //        move 'M' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "M";
            }
            //   else if ws-pat-version-cd-1 = 'n' then 
            else if (ws_pat_version_cd_1 == "n")
            {
                //        move 'N' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "N";
            }
            //   else if ws-pat-version-cd-1 = 'o' then 
            else if (ws_pat_version_cd_1 == "o")
            {
                //        move 'O' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "O";
            }
            //   else if ws-pat-version-cd-1 = 'p' then 
            else if (ws_pat_version_cd_1 == "p")
            {
                //        move 'P' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "P";
            }
            //   else if ws-pat-version-cd-1 = 'q' then 
            else if (ws_pat_version_cd_1 == "q")
            {
                //        move 'Q' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "Q";
            }
            //   else if ws-pat-version-cd-1 = 'r' then 
            else if (ws_pat_version_cd_1 == "r")
            {
                //        move 'R' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "R";
            }
            //   else if ws-pat-version-cd-1 = 's' then 
            else if (ws_pat_version_cd_1 == "s")
            {
                //        move 'S' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "S";
            }
            //   else if ws-pat-version-cd-1 = 't' then 
            else if (ws_pat_version_cd_1 == "t")
            {
                //        move 'T' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "T";
            }
            //   else if ws-pat-version-cd-1 = 'u' then 
            else if (ws_pat_version_cd_1 == "u")
            {
                //        move 'U' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "U";
            }
            //   else if ws-pat-version-cd-1 = 'v' then 
            else if (ws_pat_version_cd_1 == "v")
            {
                //         move 'V' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "V";
            }
            //   else if ws-pat-version-cd-1 = 'w' then 
            else if (ws_pat_version_cd_1 == "w")
            {
                //        move 'W' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "W";
            }
            //   else if ws-pat-version-cd-1 = 'x' then 
            else if (ws_pat_version_cd_1 == "x")
            {
                //        move 'X' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "X";
            }
            //   else if ws-pat-version-cd-1 = 'y' then 
            else if (ws_pat_version_cd_1 == "y")
            {
                //        move 'Y' to ws-pat-version-cd-1 
                ws_pat_version_cd_1 = "Y";
            }
            //   else if ws-pat-version-cd-1 = 'z' then 
            else if (ws_pat_version_cd_1 == "z")
            {
                //        move 'Z' to ws-pat-version-cd-1.;
                ws_pat_version_cd_1 = "Z";
            }


            //   if ws-pat-version-cd-2 = ' ' then 
            if (string.IsNullOrWhiteSpace(ws_pat_version_cd_2))
            {
                //        next sentence 
            }
            //   else if ws-pat-version-cd-2 = 'a' then 
            else if (ws_pat_version_cd_2 == "a")
            {
                //        move 'A' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "A";
            }
            //   else if ws-pat-version-cd-2 = 'b' then 
            else if (ws_pat_version_cd_2 == "b")
            {
                //        move 'B' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "B";
            }
            //   else if ws-pat-version-cd-2 = 'c' then 
            else if (ws_pat_version_cd_2 == "c")
            {
                //        move 'C' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "C";
            }
            //   else if ws-pat-version-cd-2 = 'd' then 
            else if (ws_pat_version_cd_2 == "d")
            {
                //        move 'D' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "D";
            }
            //   else if ws-pat-version-cd-2 = 'e' then 
            else if (ws_pat_version_cd_2 == "e")
            {
                //        move 'E' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "E";
            }
            //   else if ws-pat-version-cd-2 = 'f' then 
            else if (ws_pat_version_cd_2 == "f")
            {
                //        move 'F' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "F";
            }
            //   else if ws-pat-version-cd-2 = 'g' then 
            else if (ws_pat_version_cd_2 == "g")
            {
                //        move 'G' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "G";
            }
            //   else if ws-pat-version-cd-2 = 'h' then 
            else if (ws_pat_version_cd_2 == "h")
            {
                //        move 'H' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "H";
            }
            //   else if ws-pat-version-cd-2 = 'i' then 
            else if (ws_pat_version_cd_2 == "i")
            {
                //        move 'I' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "I";
            }
            //   else if ws-pat-version-cd-2 = 'j' then 
            else if (ws_pat_version_cd_2 == "j")
            {
                //        move 'J' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "J";
            }
            //   else if ws-pat-version-cd-2 = 'k' then 
            else if (ws_pat_version_cd_2 == "k")
            {
                //        move 'K' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "K";
            }
            //   else if ws-pat-version-cd-2 = 'l' then 
            else if (ws_pat_version_cd_2 == "l")
            {
                //        move 'L' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "L";
            }
            //   else if ws-pat-version-cd-2 = 'm' then 
            else if (ws_pat_version_cd_2 == "m")
            {
                //        move 'M' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "M";
            }
            //   else if ws-pat-version-cd-2 = 'n' then 
            else if (ws_pat_version_cd_2 == "n")
            {
                //        move 'N' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "N";
            }
            //   else if ws-pat-version-cd-2 = 'o' then 
            else if (ws_pat_version_cd_2 == "o")
            {
                //        move 'O' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "O";
            }
            //   else if ws-pat-version-cd-2 = 'p' then 
            else if (ws_pat_version_cd_2 == "p")
            {
                //        move 'P' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "P";
            }
            //   else if ws-pat-version-cd-2 = 'q' then 
            else if (ws_pat_version_cd_2 == "q")
            {
                //        move 'Q' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "Q";
            }
            //   else if ws-pat-version-cd-2 = 'r' then 
            else if (ws_pat_version_cd_2 == "r")
            {
                //        move 'R' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "R";
            }
            //   else if ws-pat-version-cd-2 = 's' then 
            else if (ws_pat_version_cd_2 == "s")
            {
                //        move 'S' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "S";
            }
            //   else if ws-pat-version-cd-2 = 't' then 
            else if (ws_pat_version_cd_2 == "t")
            {
                //        move 'T' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "T";
            }
            //   else if ws-pat-version-cd-2 = 'u' then 
            else if (ws_pat_version_cd_2 == "u")
            {
                //        move 'U' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "U";
            }
            //   else if ws-pat-version-cd-2 = 'v' then 
            else if (ws_pat_version_cd_2 == "v")
            {
                //        move 'V' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "V";
            }
            //   else if ws-pat-version-cd-2 = 'w' then 
            else if (ws_pat_version_cd_2 == "w")
            {
                //        move 'W' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "W";
            }
            //   else if ws-pat-version-cd-2 = 'x' then 
            else if (ws_pat_version_cd_2 == "x")
            {
                //        move 'X' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "X";
            }
            //   else if ws-pat-version-cd-2 = 'y' then 
            else if (ws_pat_version_cd_2 == "y")
            {
                //        move 'Y' to ws-pat-version-cd-2 
                ws_pat_version_cd_2 = "Y";
            }
            //   else if ws-pat-version-cd-2 = 'z' then 
            else if (ws_pat_version_cd_2 == "z")
            {
                //        move 'Z' to ws-pat-version-cd-2.;
                ws_pat_version_cd_2 = "Z";
            }

            //   if  ws-pat-version-cd = spaces or  ( ws-pat-version-cd-2 = spaces  and (ws-pat-version-cd-1 >= 'A' and ws-pat-version-cd-1 <= 'Z') )                
            //         or  (    (ws-pat-version-cd-1 >= 'A' and ws-pat-version-cd-1 <= 'Z')  and (ws-pat-version-cd-2 >= 'A' and ws-pat-version-cd-2 <= 'Z')  )  then                     
            if (
                  string.IsNullOrWhiteSpace(ws_pat_version_cd) || (string.IsNullOrWhiteSpace(ws_pat_version_cd_2) && (Util.Str(ws_pat_version_cd_1).CompareTo("A") >= 0 && Util.Str(ws_pat_version_cd_1).CompareTo("Z") <= 0))
                  || ((Util.Str(ws_pat_version_cd_1).CompareTo("A") >= 0 && Util.Str(ws_pat_version_cd_1).CompareTo("Z") <= 0) && (Util.Str(ws_pat_version_cd_2).CompareTo("A") >= 0 && Util.Str(ws_pat_version_cd_2).CompareTo("Z") <= 0))
                )
            {
                //         next sentence;
            }
            else
            {
                //       err_ind = 183;
            }
        }

        private async Task dd0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "dd0_99_exit");

            //     exit.;
        }

        private async Task ea0_acpt_pat_surname()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ea0_acpt_pat_surname");

            //     accept scr-clmhdr-pat-surname.;
            Display("scr-acpt-pat-surname.");
            await Prompt("clmhdr_pat_acronym6");

            // if clmhdr-pat-acronym6 not = ws-pat-surname-first6 then            
            if (Util.Str(clmhdr_pat_acronym6).ToUpper() != Util.Str(ws_pat_surname_first6).ToUpper())
            {
                err_ind = 27;
                flag = "N";
            }
            else
            {
                flag = "Y";
            }
        }

        private async Task ea0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ea0_99_exit");

            //     exit.;
        }

        private async Task fa0_acpt_admit_date()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "fa0_acpt_admit_date");

            //     accept scr-clmhdr-date-admit-yy-12.;
            Display("scr-acpt-clmhdr.");
            await Prompt("clmhdr_date_admit_yy_12");


            // if clmhdr-date-admit-yy-12 <> zeros then  
            if (Util.NumInt(clmhdr_date_admit_yy_12) != 0)
            {
                // 	   if clmhdr-date-admit-yy-12 = "19" or = "20" then            
                if (clmhdr_date_admit_yy_12 == 19 || clmhdr_date_admit_yy_12 == 20)
                {
                    // 	       accept scr-clmhdr-date-admit-yy-34;
                    Display("scr-acpt-clmhdr.");
                    await Prompt("clmhdr_date_admit_yy_34");
                }
                else
                {
                    clmhdr_date_admit_yy_34 = clmhdr_date_admit_yy_12;
                    clmhdr_date_admit_yy_12 = 0;
                    clmhdr_date_admit_yy = Util.Str(clmhdr_date_admit_yy_12.ToString()) + Util.Str(clmhdr_date_admit_yy_34.ToString());
                    century_year = Util.NumInt(clmhdr_date_admit_yy);
                    //      perform y2k-add-century-to-year     thru y2k-99-exit;
                    await y2k_add_century_to_year();
                    await y2k_99_exit();
                    clmhdr_date_admit_yy = Util.Str(century_year);
                    clmhdr_date_admit_yy_12 = Util.NumInt(Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0').Substring(0, 2));
                    clmhdr_date_admit_yy_34 = Util.NumInt(Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0').Substring(2, 2));
                }
            }

            // display scr-clmhdr-date-admit-yy-12;
            Display("scr-acpt-clmhdr.", "scr-clmhdr-date-admit-yy-12");

            //     display scr-clmhdr-date-admit-yy-34.;
            Display("scr-acpt-clmhdr.", "scr-clmhdr-date-admit-yy-34");

            // if site-id = 'RMA' and clmhdr-clinic-nbr-1-2 > "60" and clmhdr-clinic-nbr-1-2 < "67" and (clmhdr-loc of claim-header-rec = 'M500' or 'M549' or 'M558') and clmhdr-i-o-pat-ind = 'I' and clmhdr-date-admit = zeroes then;                         
            clmhdr_date_admit_yy = Util.Str(clmhdr_date_admit_yy_12).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_yy_34).PadLeft(2, '0');
            clmhdr_date_admit_grp = Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0') + Util.Str(clmhdr_date_admit_mm).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_dd).PadLeft(2, '0');
            if (
                 Util.Str(site_id) == "RMA" && Util.NumInt(clmhdr_clinic_nbr_1_2) > 60 && Util.NumInt(clmhdr_clinic_nbr_1_2) < 67 && (Util.Str(objClaims_mstr_hdr_rec.CLMHDR_LOC) == "M500" || Util.Str(objClaims_mstr_hdr_rec.CLMHDR_LOC) == "M549" || Util.Str(objClaims_mstr_hdr_rec.CLMHDR_LOC) == "M558") && Util.Str(clmhdr_i_o_pat_ind) == "I" && Util.NumInt(clmhdr_date_admit_grp) == 0
                )
            {
                err_ind = 114;
                //  perform za0-common-error	thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  go to fa0-acpt-admit-date.;
                await fa0_acpt_admit_date();
                return;
            }

            // if site-id = 'RMA' and clmhdr-clinic-nbr-1-2 > "70"  and clmhdr-clinic-nbr-1-2 < "76"   and (clmhdr-loc of claim-header-rec = 'M500' or 'M549' or 'M558') and clmhdr-i-o-pat-ind = 'I'  and clmhdr-date-admit = zeroes  then            
            clmhdr_date_admit_grp = Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0') + Util.Str(clmhdr_date_admit_mm).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_dd).PadLeft(2, '0');
            if (
                site_id == "RMA" && Util.NumInt(clmhdr_clinic_nbr_1_2) > 70 && Util.NumInt(clmhdr_clinic_nbr_1_2) < 76 && (Util.Str(objClaims_mstr_hdr_rec.CLMHDR_LOC) == "M500" || Util.Str(objClaims_mstr_hdr_rec.CLMHDR_LOC) == "M549" || Util.Str(objClaims_mstr_hdr_rec.CLMHDR_LOC) == "M558") && Util.Str(clmhdr_i_o_pat_ind) == "I" && Util.NumInt(clmhdr_date_admit_grp) == 0
                )
            {
                err_ind = 116;
                // perform za0-common-error	thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // 	     go to fa0-acpt-admit-date.;
                await fa0_acpt_admit_date();
                return;
            }

            //  if clmhdr-date-admit-yy-12 = '00' then        
            if (Util.NumInt(clmhdr_date_admit_yy_12) == 0)
            {
                clmhdr_date_admit_grp = "0";
                clmhdr_date_admit_yy = "0";
                clmhdr_date_admit_mm = 0;
                clmhdr_date_admit_dd = 0;
                //         display scr-clmhdr-date-admit-yy-12;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-date-admit-yy-12");

                //    display scr-clmhdr-date-admit-yy-34;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-date-admit-yy-34");

                //  display scr-clmhdr-date-admit-mm;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-date-admit-mm");

                //         display scr-clmhdr-date-admit-dd;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-date-admit-dd");

                //         go to fa0-99-exit.;
                await fa0_99_exit();
                return;
            }

            //  if  clmhdr-date-admit-yy > sys-yy  then;      
            if (Util.NumInt(clmhdr_date_admit_yy) > sys_yy)
            {
                err_ind = 6;
                //  perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //       go to fa0-acpt-admit-date.;
                await fa0_acpt_admit_date();
                return;
            }

            //     accept scr-clmhdr-date-admit-mm.;
            Display("scr-acpt-clmhdr.");
            await Prompt("clmhdr_date_admit_mm");

            //     accept scr-clmhdr-date-admit-dd.;
            Display("scr-acpt-clmhdr.");
            await Prompt("clmhdr_date_admit_dd");

            clmhdr_date_admit_grp = Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0') + Util.Str(clmhdr_date_admit_mm).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_dd).PadLeft(2, '0');
            ws_date_grp = clmhdr_date_admit_grp;
            ws_yy = Util.NumInt(Util.Str(ws_date_grp).PadLeft(8, '0').Substring(0, 4));
            ws_mm = Util.NumInt(Util.Str(ws_date_grp).PadLeft(8, '0').Substring(4, 2));
            ws_dd = Util.NumInt(Util.Str(ws_date_grp).PadLeft(8, '0').Substring(6, 2));

            //     perform ba1-verify-mm-dd            thru ba1-99-exit.;
            await ba1_verify_mm_dd();
            await ba1_99_exit();

            //  if not-ok;
            if (flag.Equals(not_ok))
            {
                err_ind = 5;
                //         perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //         go to fa0-acpt-admit-date.;
                await fa0_acpt_admit_date();
                return;
            }

            // if clmhdr-date-admit > sys-date then     
            if (Util.NumInt(clmhdr_date_admit_grp) > Util.NumInt(sys_date_grp))
            {
                err_ind = 6;
                //     perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //     go to fa0-acpt-admit-date.;
                await fa0_acpt_admit_date();
                return;
            }

            // if clmhdr-date-admit < ws-pat-birth-date then      
            if (Util.NumInt(clmhdr_date_admit_grp) < ws_pat_birth_date)
            {
                err_ind = 109;
                //     perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //     go to fa0-acpt-admit-date.; 
                await fa0_acpt_admit_date();
                return;
            }
        }

        private async Task fa0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "fa0_99_exit");

            //     exit.;
        }

        private async Task ga0_acpt_refer_doc()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga0_acpt_refer_doc");

            //  accept scr-clmhdr-refer-doc.;
            Display("scr-acpt-clmhdr.");
            await Prompt("clmhdr_refer_doc_nbr");

            // if  ( (clmhdr-clinic-nbr-1-2 > "60" and clmhdr-clinic-nbr-1-2 < "67")  or  (clmhdr-clinic-nbr-1-2 > "70" and clmhdr-clinic-nbr-1-2 < "76")  )  and clmhdr-refer-doc-nbr = 0   then            
            if (
                ((Util.NumInt(clmhdr_clinic_nbr_1_2) > 60 && Util.NumInt(clmhdr_clinic_nbr_1_2) < 67) || (Util.NumInt(clmhdr_clinic_nbr_1_2) > 70 && Util.NumInt(clmhdr_clinic_nbr_1_2) < 76)) && clmhdr_refer_doc_nbr == 0
                )
            {
                clmhdr_refer_doc_nbr = Util.NumInt(objDoc_mstr_rec.DOC_OHIP_NBR);
                //        display scr-clmhdr-refer-doc.;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-refer-doc");
            }

            // if clmhdr-refer-doc-nbr = 0  then           
            if (Util.NumInt(clmhdr_refer_doc_nbr) == 0)
            {
                //         go to ga0-99-exit;
                await ga0_99_exit();
                return;
            }
            else
            {
                ws_chk_nbr = clmhdr_refer_doc_nbr;
                ws_chk_nbr_1 = Util.NumInt(Util.Str(ws_chk_nbr).PadLeft(6, '0').Substring(0, 1));
                ws_chk_nbr_2 = Util.NumInt(Util.Str(ws_chk_nbr).PadLeft(6, '0').Substring(1, 1));
                ws_chk_nbr_3 = Util.NumInt(Util.Str(ws_chk_nbr).PadLeft(6, '0').Substring(2, 1));
                ws_chk_nbr_4 = Util.NumInt(Util.Str(ws_chk_nbr).PadLeft(6, '0').Substring(3, 1));
                ws_chk_nbr_5 = Util.NumInt(Util.Str(ws_chk_nbr).PadLeft(6, '0').Substring(4, 1));
                ws_chk_nbr_6 = Util.NumInt(Util.Str(ws_chk_nbr).PadLeft(6, '0').Substring(5, 1));
                ws_chk_nbr_7 = 0;
                ws_chk_nbr_8 = 0;

                //      if ws-chk-nbr-8 = 1 or  2 then            
                if (Util.NumInt(ws_chk_nbr_8) == 1 || Util.NumInt(ws_chk_nbr_8) == 2)
                {
                    //             perform dc0-mod10-check-digit-for-1-2  thru dc0-99-exit;
                    await dc0_mod10_check_digit_for_1_2();
                    await dc0_98_exit();
                    return;
                }
                else
                {
                    //    perform db0-mod10-check-digit       thru db0-99-exit.;
                    await db0_mod10_check_digit();
                    await db0_99_exit();
                }
            }

            // if not-ok then           
            if (Util.Str(flag).ToUpper().Equals(not_ok))
            {
                err_ind = 84;
                //     perform za0-common-error        thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            // if flag-refer-doc-needed-G-codes = 'Y'  and  clmhdr-refer-doc-nbr = 0   then       
            if (Util.Str(flag_refer_doc_needed_G_codes).ToUpper() == "Y" && clmhdr_refer_doc_nbr == 0)
            {
                clmhdr_refer_doc_nbr = Util.NumInt(objDoc_mstr_rec.DOC_OHIP_NBR);
                //      display scr-clmhdr-refer-doc.;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-refer-doc");
            }
        }

        private async Task ga0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga0_99_exit");

            //     exit.;
        }

        // d001_d003_confidentiality_check.rtn
        private async Task ga1_check_for_confidentiality()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga1_check_for_confidentiality");

            //     if    hold-desc(1)     = 'NO VERIFICATION PLEASE';
            //        or hold-desc(1)     = 'No verification please';
            //        or hold-desc(2)     = 'NO VERIFICATION PLEASE';
            //        or hold-desc(2)     = 'No verification please';
            //        or hold-desc(3)     = 'NO VERIFICATION PLEASE';
            //        or hold-desc(3)     = 'No verification please';
            //        or hold-desc(4)     = 'NO VERIFICATION PLEASE';
            //        or hold-desc(4)     = 'No verification please';
            //        or hold-desc(5)     = 'NO VERIFICATION PLEASE';
            //        or hold-desc(5)     = 'No verification please';
            //     then;
            //        clmhdr_confidential_flag = "Y";
            //        go to ga1-99-exit.;

            if (
                hold_desc[1] == "NO VERIFICATION PLEASE"
                || hold_desc[1] == "No verification please"
                || hold_desc[2] == "NO VERIFICATION PLEASE"
                || hold_desc[2] == "No verification please"
                || hold_desc[3] == "NO VERIFICATION PLEASE"
                || hold_desc[3] == "No verification please"
                || hold_desc[4] == "NO VERIFICATION PLEASE"
                || hold_desc[4] == "No verification please"
                || hold_desc[5] == "NO VERIFICATION PLEASE"
                || hold_desc[5] == "No verification please"
                )
            {
                clmhdr_confidential_flag = "Y";
                // go to ga1-99-exit.;
                await ga1_99_exit();
                return;
            }

            //  perform ga11-check-for-confidentially	thru ga11-99-exit;
            //     	varying ss-clmdtl-oma;
            // 	     from 1;
            // 	     by 1;
            // 	     until   ss-clmdtl-oma > 10;
            // 	     or clmhdr-confidential-flag   = 'Y' or "R";
            // 	     or hold-oma-cd(ss-clmdtl-oma) = ' '.;

            ss_clmdtl_oma = 1;
            do
            {
                await ga11_check_for_confidentially();
                await ga11_99_exit();
                ss_clmdtl_oma++;
            } while (ss_clmdtl_oma <= 10 && Util.StrUpper(clmhdr_confidential_flag) != "Y" && Util.StrUpper(clmhdr_confidential_flag) != "R" && !string.IsNullOrWhiteSpace(hold_oma_cd[ss_clmdtl_oma]));

        }

        // d001_d003_confidentiality_check.rtn
        private async Task ga1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga1_99_exit");

            //     exit.;
        }

        // d001_d003_newu701_confidentiality_check.rtn
        private async Task ga11_check_for_confidentially()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga11_check_for_confidentially");

            // if clmhdr-confidential-flag =    "Y" or "R"  then       
            if (clmhdr_confidential_flag == "Y" || clmhdr_confidential_flag == "R")
            {
                //    	go to ga11-99-exit.;
                await ga11_99_exit();
                return;
            }

            //   perform ga11a-check-conf-ministry		thru ga11a-99-exit.;
            await ga11a_check_conf_ministry();
            await ga11a_99_exit();

            //  if clmhdr-confidential-flag     <> "Y" and <> "R"  then
            if (clmhdr_confidential_flag != "Y" && clmhdr_confidential_flag != "R")
            {
                //   perform ga11b-check-conf-rma		thru ga11b-99-exit.;
                await ga11b_check_conf_rma();
                await ga11b_99_exit();
            }
        }

        // d001_d003_newu701_confidentiality_check.rtn
        private async Task ga11_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga11_99_exit");
            //     exit.;
        }

        // confidentially_check_ministry_codes.rtn
        private async Task ga11a_check_conf_ministry()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga11a_check_conf_ministry");

            // if clmhdr-confidential-flag = "Y" then            
            if (Util.Str(clmhdr_confidential_flag).ToUpper().Equals("Y"))
            {
                // 	go to ga11a-99-exit.;
                await ga11a_99_exit();
                return;
            }

            // if hold-diag-cd (ss-clmdtl-oma) =  099 or 290 or 291 or 292 	or 295 	or 296 	or 297 	or 298 	or 299 	or 634 	or 635 	or 640 	or 895 then        
            if (hold_diag_cd[ss_clmdtl_oma] == 099 || hold_diag_cd[ss_clmdtl_oma] == 290 || hold_diag_cd[ss_clmdtl_oma] == 291 || hold_diag_cd[ss_clmdtl_oma] == 292 || hold_diag_cd[ss_clmdtl_oma] == 295 || hold_diag_cd[ss_clmdtl_oma] == 296 || hold_diag_cd[ss_clmdtl_oma] == 297 || hold_diag_cd[ss_clmdtl_oma] == 298 || hold_diag_cd[ss_clmdtl_oma] == 299 ||
                hold_diag_cd[ss_clmdtl_oma] == 634 || hold_diag_cd[ss_clmdtl_oma] == 635 || hold_diag_cd[ss_clmdtl_oma] == 640 || hold_diag_cd[ss_clmdtl_oma] == 895)
            {
                clmhdr_confidential_flag = "R";
            }
            // else if hold-oma-cd (ss-clmdtl-oma) = 'A777' or 'A902' or 'C777' or 'E108'  	or 'E753' 	or 'K015' or 'K018' or 'K021' 	or 'K051' or 'K052' or 'K053' or 'K061' or 'K620' or 'K623' or 'K624'            
            // 					or 'K629' or 'G100' or 'R200' or 'R872' or 'S274' or 'S436' or 'S626' or 'S738' or 'S741' or 'S752' or 'S756' or 'S768' or 'S783' or 'S785' or 'W777' then            
            else if (hold_oma_cd[ss_clmdtl_oma] == "A777" || hold_oma_cd[ss_clmdtl_oma] == "A902" || hold_oma_cd[ss_clmdtl_oma] == "C777" || hold_oma_cd[ss_clmdtl_oma] == "E108" || hold_oma_cd[ss_clmdtl_oma] == "E753" || hold_oma_cd[ss_clmdtl_oma] == "K015" || hold_oma_cd[ss_clmdtl_oma] == "K018" || hold_oma_cd[ss_clmdtl_oma] == "K021" || hold_oma_cd[ss_clmdtl_oma] == "K051" ||
                     hold_oma_cd[ss_clmdtl_oma] == "K052" || hold_oma_cd[ss_clmdtl_oma] == "K053" || hold_oma_cd[ss_clmdtl_oma] == "K061" || hold_oma_cd[ss_clmdtl_oma] == "K620" || hold_oma_cd[ss_clmdtl_oma] == "K623" || hold_oma_cd[ss_clmdtl_oma] == "K624"
                     || hold_oma_cd[ss_clmdtl_oma] == "K629" || hold_oma_cd[ss_clmdtl_oma] == "G100" || hold_oma_cd[ss_clmdtl_oma] == "R200" || hold_oma_cd[ss_clmdtl_oma] == "R872" || hold_oma_cd[ss_clmdtl_oma] == "S274" || hold_oma_cd[ss_clmdtl_oma] == "S436" || hold_oma_cd[ss_clmdtl_oma] == "S626" || hold_oma_cd[ss_clmdtl_oma] == "S738" || hold_oma_cd[ss_clmdtl_oma] == "S741" ||
                     hold_oma_cd[ss_clmdtl_oma] == "S752" || hold_oma_cd[ss_clmdtl_oma] == "S756" || hold_oma_cd[ss_clmdtl_oma] == "S768" || hold_oma_cd[ss_clmdtl_oma] == "S783" || hold_oma_cd[ss_clmdtl_oma] == "S785" || hold_oma_cd[ss_clmdtl_oma] == "W777"
                )
            {
                clmhdr_confidential_flag = "R";
            }
        }

        // confidentially_check_ministry_codes.rtn
        private async Task ga11a_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga11a_99_exit");

            //     exit.;
        }

        // confidentially_check_rma_codes.rtn
        private async Task ga11b_check_conf_rma()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga11b_check_conf_rma");

            // if hold-diag-cd (ss-clmdtl-oma) =  632  or 302   then     
            if (hold_diag_cd[ss_clmdtl_oma] == 632 || hold_diag_cd[ss_clmdtl_oma] == 302)
            {
                clmhdr_confidential_flag = "R";
            }
            // else  if hold-oma-cd (ss-clmdtl-oma) =  'G362'  then            
            else if (hold_oma_cd[ss_clmdtl_oma] == "G362")
            {
                clmhdr_confidential_flag = "R";
            }
        }

        // confidentially_check_rma_codes.rtn
        private async Task ga11b_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga11b_99_exit");

            //     exit.;
        }

        private async Task ga2_check_refer_doc_needed()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga2_check_refer_doc_needed");

            // if hold-oma-rec-ind (ss-det-nbr,ss-phy-ind) = 'Y' then            
            if (hold_oma_rec_ind[ss_det_nbr, ss_phy_ind] == "Y")
            {
                flag_refer_doc = "Y";
            }
        }

        private async Task ga2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga2_99_exit");

            //     exit.;
        }

        private async Task ga9_sum_clmdtl_serv()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga9_sum_clmdtl_serv");

            //     add hold-sv-nbr-serv (ss-det-nbr);
            //         hold-sv-nbr (ss-det-nbr,1);
            //         hold-sv-nbr (ss-det-nbr,2);
            //         hold-sv-nbr (ss-det-nbr,3)      to  claim-nbr-serv.;

            claim_nbr_serv += hold_sv_nbr_serv[ss_det_nbr] + hold_sv_nbr[ss_det_nbr, 1] + hold_sv_nbr[ss_det_nbr, 2] + hold_sv_nbr[ss_det_nbr, 3];
        }

        private async Task ga9_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ga9_99_exit");
            //     exit.;
        }

        private async Task gc1_find_confidential_desc_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "gc1_find_confidential_desc_rec");

            // if hold-desc (ss-desc) = "NO VERIFICATION PLEASE" then      
            if (hold_desc[ss_desc] == "NO VERIFICATION PLEASE")
            {
                flag_confidential_desc_rec = "Y";
            }
        }

        private async Task gc1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "gc1_99_exit");

            //     exit.;
        }

        private async Task ha0_acpt_diag_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ha0_acpt_diag_cd");

            //  accept scr-hold-diag-cd.;                        
            await accept_hold_diag();

            // if hold-diag-cd(ss-clmdtl-oma) = spaces then           
            if (string.IsNullOrWhiteSpace(Util.Str(hold_diag_cd[ss_clmdtl_oma])))
            {
                hold_diag_cd[ss_clmdtl_oma] = 0;
                //     go to ha0-99-exit;
                await ha0_99_exit();
                return;
            }
            //else if hold-diag-cd(ss-clmdtl-oma) = zero then            
            else if (hold_diag_cd[ss_clmdtl_oma] == 0)
            {
                //   go to ha0-99-exit.;
                await ha0_99_exit();
                return;
            }

            //objDiag_rec.diag_cd = hold_diag_cd[ss_clmdtl_oma];
            objDiag_rec.DIAG_CD = Util.Str(hold_diag_cd[ss_clmdtl_oma]);


            // if hold-diag-cd(ss-clmdtl-oma) = "100"  then          
            if (Util.Str(hold_diag_cd[ss_clmdtl_oma]) == "100")
            {
                clmhdr_manual_review = "Y";
                //     display scr-clmhdr-man-review.;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-man-review");
            }

            //  read  diag-mstr;
            //         invalid key;
            //             err_ind = 44;
            //             perform za0-common-error    thru za0-99-exit;
            //             go to ha0-acpt-diag-cd.;

            objDiag_rec = new F091_DIAG_CODES_MSTR
            {
                WhereDiag_cd = Util.Str(hold_diag_cd[ss_clmdtl_oma]).PadLeft(3, '0')
            }.Collection().FirstOrDefault();

            if (objDiag_rec == null)
            {
                err_ind = 44;
                objDiag_rec = new F091_DIAG_CODES_MSTR();
                //  perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // go to ha0-acpt-diag-cd.;
                await ha0_acpt_diag_cd();
                return;
            }

            // if first-diag-cd = 'Y' then            
            if (first_diag_cd.Equals("Y"))
            {
                first_diag_cd = "N";
                clmhdr_diag_cd = hold_diag_cd[ss_clmdtl_oma];
                //     display scr-clmhdr-diag-cd;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-diag-cd");

                //  perform ha1-preset-diag-cd          thru ha1-99-exit;
                //               varying  ss;
                //               from     ss-clmdtl-oma;
                //               by        1;
                //               until ss > 10.;

                ss = ss_clmdtl_oma;
                do
                {
                    await ha1_preset_diag_cd();
                    await ha1_99_exit();
                    ss++;
                } while (ss <= 10);

            }
        }

        private async Task ha0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ha0_99_exit");

            //     exit.;
        }

        private async Task ha1_preset_diag_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ha1_preset_diag_cd");

            hold_diag_cd[ss] = hold_diag_cd[ss_clmdtl_oma];
        }

        private async Task ha1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ha1_99_exit");

            //     exit.;
        }

        private async Task ia0_acpt_loc()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ia0_acpt_loc");

            //  accept scr-clmhdr-loc.;
            Display("scr-acpt-clmhdr.");
            await Prompt("clmhdr_loc");

            // if clmhdr-loc of claim-header-rec not = batctrl-loc  then            
            if (Util.Str(objClaims_mstr_hdr_rec.CLMHDR_LOC) != Util.Str(batctrl_loc))
            {
                ws_loc_grp = clmhdr_loc; //objClaims_mstr_hdr_rec.CLMHDR_LOC;
                ws_loc_1 = Util.Str(ws_loc_grp).PadRight(4, ' ').Substring(0, 1);
                ws_loc_2 = Util.Str(ws_loc_grp).PadRight(4, ' ').Substring(1, 3);
                //      perform zr0-verify-loc-for-doc          thru zr0-99-exit;
                await zr0_verify_loc_for_doc();
                await zr0_99_exit();

                //      if not-ok then     
                if (flag.Equals(not_ok))
                {
                    err_ind = 10;
                    //  perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //   go to ia0-acpt-loc.;
                    await ia0_acpt_loc();
                    return;
                }
            }

            //    objLoc_mstr_rec.loc_nbr = objClaim_header_rec.Clmhdr_loc;
            objLoc_mstr_rec.LOC_NBR = clmhdr_loc;

            //  perform xb0-verify-location		thru xb0-99-exit.;
            await xb0_verify_location();
            await xb0_99_exit();

            // if loc-not-found then       
            if (Util.Str(flag_loc_code).ToUpper().Equals(loc_not_found))
            {
                err_ind = 102;
                //      perform za0-common-error          	thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  go to ia0-acpt-loc;
                await ia0_acpt_loc();
                return;
            }
            //  else if loc-found  and loc-active-for-entry = "N" then            
            else if (Util.Str(flag_loc_code).ToUpper().Equals(loc_found) && Util.Str(objLoc_mstr_rec.LOC_ACTIVE_FOR_ENTRY).ToUpper().Equals("N"))
            {
                err_ind = 103;
                //   perform za0-common-error          	thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //   go to ia0-acpt-loc.;
                await ia0_acpt_loc();
                return;
            }
        }

        private async Task ia0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ia0_99_exit");

            //     exit.;
        }

        private async Task ja0_acpt_hosp()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ja0_acpt_hosp");

            //     display scr-hosp-nbr.;
            Display("scr-acpt-clmhdr.", "scr-hosp-nbr");
        }

        private async Task ja0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ja0_99_exit");

            //     exit.;
        }

        private async Task ka0_acpt_i_o_pat_ind()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ka0_acpt_i_o_pat_ind");

            //clmhdr_i_o_pat_ind = objLoc_mstr_rec.loc_card_colour;
            clmhdr_i_o_pat_ind = Util.Str(objLoc_mstr_rec.LOC_CARD_COLOUR);
            //     display scr-clmhdr-i-o-pat-ind.;
            Display("scr-acpt-clmhdr.", "scr-clmhdr-i-o-pat-ind");
        }

        private async Task ka0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ka0_99_exit");

            //     exit.;
        }

        private async Task la2_acpt_manual_review()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la2_acpt_manual_review");

            //    accept scr-clmhdr-man-review.;
            Display("scr-acpt-clmhdr.");
            await Prompt("clmhdr_manual_review");

            // if clmhdr-manual-review = ' ' or 'Y' then            
            if (string.IsNullOrWhiteSpace(clmhdr_manual_review) || Util.Str(clmhdr_manual_review).ToUpper().Equals("Y"))
            {
                //        next sentence;
            }
            else
            {
                err_ind = 68;
                //  perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //        go to la2-acpt-manual-review.;
                await la2_acpt_manual_review();
                return;
            }
        }

        private async Task la2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la2_99_exit");

            //    exit.;
        }

        private async Task laa_acpt_payroll()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "laa_acpt_payroll");

            //     accept scr-payroll.;
            Display("scr-acpt-clmhdr.");
            await Prompt("clmhdr_payroll");

            //  if ws-doc-dept = 41 or 42 or 43 or 75 then    
            if (ws_doc_dept == 41 || ws_doc_dept == 42 || ws_doc_dept == 43 || ws_doc_dept == 75)
            {
                //         if clmhdr-payroll  =  '0' or '1' or '2' or '3' or '4' or '5' then            
                if (Util.Str(clmhdr_payroll) == "0" || Util.Str(clmhdr_payroll) == "1" || Util.Str(clmhdr_payroll) == "2" || Util.Str(clmhdr_payroll) == "3" || Util.Str(clmhdr_payroll) == "4" || Util.Str(clmhdr_payroll) == "5")
                {
                    //             next sentence;
                }
                else
                {
                    err_ind = 156;
                    //   perform za0-common-error        thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //             go to laa-acpt-payroll;
                    await laa_acpt_payroll();
                    return;
                }
            }
            //  else if clmhdr-payroll not = "A"  then            
            else if (Util.Str(clmhdr_payroll) != "A")
            {
                err_ind = 157;
                //   perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  go to laa-acpt-payroll.;
                await laa_acpt_payroll();
                return;
            }
        }

        private async Task laa_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "laa_99_exit");

            //    exit.;
        }

        private async Task la0_acpt_clmdtl_desc()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la0_acpt_clmdtl_desc");

            // if flag-no-verif = "N" then
            if (Util.Str(flag_no_verif).Equals("N"))
            {
                //         perform la1-check-for-diag-cd                thru la1-99-exit;
                //                 varying   ss;
                //                 from       1;
                //                 by         1;
                //               until ss > 10.;
                ss = 1;
                do
                {
                    await la1_check_for_diag_cd();
                    await la1_99_exit();
                    ss++;
                } while (ss <= 10);
            }
        }

        private async Task<string> la0_acpt_desc_1()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la0_acpt_desc_1");

            // if ss-clmdtl-desc < 1 then            
            if (ss_clmdtl_desc < 1)
            {
                //         accept scr-hold-desc-1;
                Display("scr-acpt-det-desc.");
                await Prompt("hold_desc_1");

                hold_desc[1] = Util.Str(hold_desc_1);
                test_field_grp = hold_desc[1];
                ws_test_field = test_field_grp;
                flag = "Y";
                //         perform zf0-test-field          thru zf0-99-exit;
                //         	varying i;
                //         	from 1;
                //         	by 1;
                //         	until i > ss-max-field-check or not-ok;

                i = 1;
                do
                {
                    await zf0_test_field();
                    await zf0_99_exit();
                    i++;
                } while (i <= ss_max_field_check && !flag.Equals(not_ok));


                //     	    if not-ok then      
                if (flag.Equals(not_ok))
                {
                    err_ind = 182;
                    //               perform za0-common-error        thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //  go to la0-acpt-desc-1;
                    await la0_acpt_desc_1();
                    return string.Empty;
                }
                // 	        else if hold-desc-1 = spaces then;            
                else if (string.IsNullOrWhiteSpace(hold_desc_1))
                {
                    //   go to la0-99-exit;                    
                    return "la0_99_exit";
                }
                else
                {
                    //             add 1                       to ss-clmdtl-desc;
                    ss_clmdtl_desc++;
                    hold_desc_tmp_grp = hold_desc[1];
                    hold_desc_tmp_start = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(0, 3);
                    hold_desc_tmp_end = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(3, 19);
                    // 	           perform desc-text-translation;
                    // 					thru desc-text-translation-99-exit;

                    await desc_text_translation();
                    await desc_text_translation_99_exit();

                    hold_desc_tmp_grp = hold_desc_tmp_start + hold_desc_tmp_end;
                    hold_desc[1] = hold_desc_tmp_grp;
                    hold_desc_1 = hold_desc_tmp_grp;
                    //     display scr-hold-desc-1.;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-1");
                }
            }
            return string.Empty;
        }

        private async Task<string> la0_acpt_desc_2()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la0_acpt_desc_2");

            // if ss-clmdtl-desc < 2 then            
            if (ss_clmdtl_desc < 2)
            {
                //      accept scr-hold-desc-2;
                Display("scr-acpt-det-desc.");
                await Prompt("hold_desc_2");

                hold_desc[2] = Util.Str(hold_desc_2);
                test_field_grp = hold_desc[2];
                ws_test_field = test_field_grp;
                flag = "Y";
                //      perform zf0-test-field          thru zf0-99-exit;
                //         	varying i;
                //         	from 1;
                //         	by 1;
                //         	until i > ss-max-field-check or not-ok;
                i = 1;
                do
                {
                    await zf0_test_field();
                    await zf0_99_exit();
                    i++;
                } while (i <= ss_max_field_check && !flag.Equals(not_ok));

                //     	if not-ok then            
                if (flag.Equals(not_ok))
                {
                    err_ind = 182;
                    //  perform za0-common-error        thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //          go to la0-acpt-desc-2;
                    await la0_acpt_desc_2();
                    return string.Empty;
                }
                // 	    else if hold-desc-2 = spaces then            
                else if (string.IsNullOrWhiteSpace(hold_desc_2))
                {
                    //             go to la0-99-exit;                    
                    return "la0_99_exit";
                }
                else
                {
                    //          add 1                       to ss-clmdtl-desc;
                    ss_clmdtl_desc++;
                    hold_desc_tmp_grp = hold_desc[2];
                    hold_desc_tmp_start = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(0, 3);
                    hold_desc_tmp_end = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(3, 19);
                    // 	        perform desc-text-translation;
                    // 					thru desc-text-translation-99-exit;
                    await desc_text_translation();
                    await desc_text_translation_99_exit();

                    hold_desc_tmp_grp = hold_desc_tmp_start + hold_desc_tmp_end;
                    hold_desc[2] = hold_desc_tmp_grp;
                    hold_desc_2 = hold_desc_tmp_grp;
                    //  display scr-hold-desc-2.;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-2");
                }
            }
            return string.Empty;
        }

        private async Task<string> la0_acpt_desc_3()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la0_acpt_desc_3");

            // if ss-clmdtl-desc < 3 then            
            if (ss_clmdtl_desc < 3)
            {
                //      accept scr-hold-desc-3;
                Display("scr-acpt-det-desc.");
                await Prompt("hold_desc_3");

                hold_desc[3] = Util.Str(hold_desc_3);
                test_field_grp = hold_desc[3];
                ws_test_field = test_field_grp;
                flag = "Y";
                //      perform zf0-test-field          thru zf0-99-exit;
                //         	varying i;
                //         	from 1;
                //         	by 1;
                //         	until i > ss-max-field-check or not-ok;

                i = 1;
                do
                {
                    await zf0_test_field();
                    await zf0_99_exit();
                    i++;
                } while (i <= ss_max_field_check && !flag.Equals(not_ok));

                //     	if not-ok then            
                if (flag.Equals(not_ok))
                {
                    err_ind = 182;
                    //          perform za0-common-error        thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //          go to la0-acpt-desc-3;
                    await la0_acpt_desc_3();
                    return string.Empty;
                }
                // 	    else if hold-desc-3 = spaces  then            
                else if (string.IsNullOrWhiteSpace(hold_desc_3))
                {
                    //  go to la0-99-exit;                    
                    return "la0_99_exit";
                }
                else
                {
                    //          add 1                       to ss-clmdtl-desc;
                    ss_clmdtl_desc++;
                    hold_desc_tmp_grp = hold_desc[3];
                    hold_desc_tmp_start = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(0, 3);
                    hold_desc_tmp_end = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(3, 19);
                    // 	        perform desc-text-translation;
                    // 					thru desc-text-translation-99-exit;

                    await desc_text_translation();
                    await desc_text_translation_99_exit();

                    hold_desc_tmp_grp = hold_desc_tmp_start + hold_desc_tmp_end;
                    hold_desc[3] = hold_desc_tmp_grp;
                    hold_desc_3 = hold_desc_tmp_grp;
                    //  display scr-hold-desc-3.;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-3");
                }
            }
            return string.Empty;
        }

        private async Task<string> la0_acpt_desc_4()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la0_acpt_desc_4");

            // if ss-clmdtl-desc < 4 then            
            if (ss_clmdtl_desc < 4)
            {
                //       accept scr-hold-desc-4;
                Display("scr-acpt-det-desc.");
                await Prompt("hold_desc_4");

                hold_desc[4] = Util.Str(hold_desc_4);
                test_field_grp = hold_desc[4];
                ws_test_field = test_field_grp;

                flag = "Y";
                //       perform zf0-test-field          thru zf0-99-exit;
                //         	varying i;
                //         	from 1;
                //         	by 1;
                //         	until i > ss-max-field-check or not-ok;

                i = 1;
                do
                {
                    await zf0_test_field();
                    await zf0_99_exit();
                    i++;
                } while (i <= ss_max_field_check && !flag.Equals(not_ok));

                //     	 if not-ok then         
                if (flag.Equals(not_ok))
                {
                    err_ind = 182;
                    //      perform za0-common-error        thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();

                    //  go to la0-acpt-desc-4;
                    await la0_acpt_desc_4();
                    return string.Empty;
                }
                // 	     else if hold-desc-4 = spaces then            
                else if (string.IsNullOrWhiteSpace(hold_desc_4))
                {
                    //    go to la0-99-exit;                    
                    return "la0_99_exit";
                }
                else
                {
                    //           add 1  to ss-clmdtl-desc;
                    ss_clmdtl_desc++;
                    hold_desc_tmp_grp = hold_desc[4];
                    hold_desc_tmp_start = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(0, 3);
                    hold_desc_tmp_end = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(3, 19);
                    // 	         perform desc-text-translation;
                    // 					thru desc-text-translation-99-exit;
                    await desc_text_translation();
                    await desc_text_translation_99_exit();

                    hold_desc_tmp_grp = hold_desc_tmp_start + hold_desc_tmp_end;
                    hold_desc[4] = hold_desc_tmp_grp;
                    hold_desc_4 = hold_desc_tmp_grp;
                    // 	  display scr-hold-desc-4.;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-4");

                }
            }
            return string.Empty;
        }

        private async Task<string> la0_acpt_desc_5()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la0_acpt_desc_5");

            // if ss-clmdtl-desc < 5 then            
            if (ss_clmdtl_desc < 5)
            {
                //         accept scr-hold-desc-5;
                Display("scr-acpt-det-desc.");
                await Prompt("hold_desc_5");

                hold_desc[5] = Util.Str(hold_desc_5);
                test_field_grp = hold_desc[5];
                ws_test_field = test_field_grp;

                flag = "Y";
                //         perform zf0-test-field          thru zf0-99-exit;
                //         	    varying i;
                //          	from 1;
                //         	     by 1;
                //         	    until i > ss-max-field-check or not-ok;

                i = 1;
                do
                {
                    await zf0_test_field();
                    await zf0_99_exit();
                    i++;
                } while (i <= ss_max_field_check && !flag.Equals(not_ok));

                //     	if not-ok then         
                if (flag.Equals(not_ok))
                {
                    err_ind = 182;
                    //   perform za0-common-error        thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();

                    // go to la0-acpt-desc-5;
                    await la0_acpt_desc_5();
                    return string.Empty;
                }
                // 	    else if hold-desc-5 = spaces then            
                else if (string.IsNullOrWhiteSpace(hold_desc_5))
                {
                    //  go to la0-99-exit;                    
                    return "la0_99_exit";
                }
                else
                {
                    //             add 1                       to ss-clmdtl-desc;
                    ss_clmdtl_desc++;
                    hold_desc_tmp_grp = hold_desc[5];
                    hold_desc_tmp_start = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(0, 3);
                    hold_desc_tmp_end = Util.Str(hold_desc_tmp_grp).PadRight(22, ' ').Substring(3, 19);
                    // 	           perform desc-text-translation;
                    // 					thru desc-text-translation-99-exit;

                    await desc_text_translation();
                    await desc_text_translation_99_exit();

                    hold_desc_tmp_grp = hold_desc_tmp_start + hold_desc_tmp_end;
                    hold_desc[5] = hold_desc_tmp_grp;
                    hold_desc_5 = hold_desc_tmp_grp;
                    // 	           display scr-hold-desc-5.;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-5");
                }
            }
            return string.Empty;
        }

        private async Task la0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la0_99_exit");

            //     exit.;
        }

        private async Task la1_check_for_diag_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la1_check_for_diag_cd");

            //  if hold-diag-cd (ss) = 100 then     
            if (hold_diag_cd[ss] == 100)
            {
                flag_no_verif = "Y";
                ss = 9;
                //       if hold-desc-1 = spaces then
                if (string.IsNullOrWhiteSpace(hold_desc_1))
                {
                    //             move "NO VERIFICATION PLEASE"   to   hold-desc-1
                    hold_desc_1 = "NO VERIFICATION PLEASE";
                    //                 display scr-hold-desc-1;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-1");
                    //                 add 1                           to ss-clmdtl-desc;
                    ss_clmdtl_desc++;
                }
                //       elseif hold-desc-2 = spaces then      
                else if (string.IsNullOrWhiteSpace(hold_desc_2))
                {
                    //                 move "NO VERIFICATION PLEASE"   to hold-desc - 2
                    hold_desc_2 = "NO VERIFICATION PLEASE";
                    //                 display scr-hold-desc-2;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-2");
                    //                 add 1                           to ss-clmdtl-desc;
                    ss_clmdtl_desc++;
                }
                //       else if hold-desc-3 = spaces then       
                else if (string.IsNullOrWhiteSpace(hold_desc_3))
                {
                    //                 move "NO VERIFICATION PLEASE"   to hold-desc - 3
                    hold_desc_3 = "NO VERIFICATION PLEASE";
                    //                 display scr-hold-desc-3;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-3");
                    //                 add 1                           to ss-clmdtl-desc;
                    ss_clmdtl_desc++;
                }
                //       else if hold-desc-4 = spaces then
                else if (string.IsNullOrWhiteSpace(hold_desc_4))
                {
                    //                move "NO VERIFICATION PLEASE"   to   hold-desc-4
                    hold_desc_4 = "NO VERIFICATION PLEASE";
                    //                 display scr-hold-desc-4;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-4");
                    //                 add 1                           to ss-clmdtl-desc;
                    ss_clmdtl_desc++;
                }
                //       else  if hold-desc-5 = spaces  then
                else if (string.IsNullOrWhiteSpace(hold_desc_5))
                {
                    //            move "NO VERIFICATION PLEASE"   to   hold-desc-5
                    hold_desc_5 = "NO VERIFICATION PLEASE";
                    //                 display scr-hold-desc-5;
                    Display("scr-acpt-det-desc.", "scr-hold-desc-5");
                    //                 add 1                           to ss-clmdtl-desc.;
                    ss_clmdtl_desc++;
                }
            }
        }

        private async Task la1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la1_99_exit");

            //     exit.;
        }

        private async Task la3_check_4_missing_addon_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la3_check_4_missing_addon_cd");

            //  if hold-oma-cd (ss) = "A071" or "A073"  or "A074"  or "A078" or "A181" or "A183" 	or "A184"	or "A188" 	or "A262"	or "A263" 	or "A264"	or "A283" or "A284" or "A310" or "A311" or "A313"or "A318" or "A340" or "A341"            
            // 				or "A343" or "A348" or "A471" or "A473" or "A474" or "A478" or "A481" or "A483" or "A484" or "A488" or "A611" or "A613"  or "A614" or "A618" or "A623" or "A624" or "A621" or "A628" or "A661" or "A153";            
            // 				or "A154" or "A151" or "A158" or "A443" or "A444" or "A441"  or "A448" or "A463" or "A464" or "A461" or "A468" then            
            if (

                hold_oma_cd[ss] == "A071" || hold_oma_cd[ss] == "A073" || hold_oma_cd[ss] == "A074" || hold_oma_cd[ss] == "A078" || hold_oma_cd[ss] == "A181" || hold_oma_cd[ss] == "A183" || hold_oma_cd[ss] == "A184" || hold_oma_cd[ss] == "A188" || hold_oma_cd[ss] == "A262" || hold_oma_cd[ss] == "A263" || hold_oma_cd[ss] == "A264" || hold_oma_cd[ss] == "A283" || hold_oma_cd[ss] == "A284" || hold_oma_cd[ss] == "A310" || hold_oma_cd[ss] == "A311" || hold_oma_cd[ss] == "A313" || hold_oma_cd[ss] == "A318" || hold_oma_cd[ss] == "A340" || hold_oma_cd[ss] == "A341"
                             || hold_oma_cd[ss] == "A343" || hold_oma_cd[ss] == "A348" || hold_oma_cd[ss] == "A471" || hold_oma_cd[ss] == "A473" || hold_oma_cd[ss] == "A474" || hold_oma_cd[ss] == "A478" || hold_oma_cd[ss] == "A481" || hold_oma_cd[ss] == "A483" || hold_oma_cd[ss] == "A484" || hold_oma_cd[ss] == "A488" || hold_oma_cd[ss] == "A611" || hold_oma_cd[ss] == "A613" || hold_oma_cd[ss] == "A614" || hold_oma_cd[ss] == "A618" || hold_oma_cd[ss] == "A623" || hold_oma_cd[ss] == "A624" || hold_oma_cd[ss] == "A621" || hold_oma_cd[ss] == "A628" || hold_oma_cd[ss] == "A661" || hold_oma_cd[ss] == "A153"
                            || hold_oma_cd[ss] == "A154" || hold_oma_cd[ss] == "A151" || hold_oma_cd[ss] == "A158" || hold_oma_cd[ss] == "A443" || hold_oma_cd[ss] == "A444" || hold_oma_cd[ss] == "A441" || hold_oma_cd[ss] == "A448" || hold_oma_cd[ss] == "A463" || hold_oma_cd[ss] == "A464" || hold_oma_cd[ss] == "A461" || hold_oma_cd[ss] == "A468"

                )
            {
                flg_omacd_possible_addon_found = "Y";
            }



            //  if hold-diag-cd (ss) = 042 or 043 or 044 or 250 or 286 	or 287 or 290 or 299 or 313 or 315 or 332 or 340 or 343 or 345 or 402 or 428 or 491 or 492 or 493 or 515 or 555 or 556 or 571            
            // 				or 585 or 710 or 714 or 720  or 721 or 758 or 765 or 902 then            
            if (
                hold_diag_cd[ss] == 042 || hold_diag_cd[ss] == 043 || hold_diag_cd[ss] == 044 || hold_diag_cd[ss] == 250 || hold_diag_cd[ss] == 286 || hold_diag_cd[ss] == 287 || hold_diag_cd[ss] == 290 || hold_diag_cd[ss] == 299 || hold_diag_cd[ss] == 313 || hold_diag_cd[ss] == 315 || hold_diag_cd[ss] == 332 || hold_diag_cd[ss] == 340 || hold_diag_cd[ss] == 343 || hold_diag_cd[ss] == 345 || hold_diag_cd[ss] == 402 || hold_diag_cd[ss] == 428 || hold_diag_cd[ss] == 491 || hold_diag_cd[ss] == 492 || hold_diag_cd[ss] == 493 || hold_diag_cd[ss] == 515 || hold_diag_cd[ss] == 555 || hold_diag_cd[ss] == 556 || hold_diag_cd[ss] == 571
                             || hold_diag_cd[ss] == 585 || hold_diag_cd[ss] == 710 || hold_diag_cd[ss] == 714 || hold_diag_cd[ss] == 720 || hold_diag_cd[ss] == 721 || hold_diag_cd[ss] == 758 || hold_diag_cd[ss] == 765 || hold_diag_cd[ss] == 902

                )
            {
                flg_diag_possible_addon_found = "Y";
            }

            //  if hold-oma-cd (ss) = "E078" then            
            if (hold_oma_cd[ss] == "E078")
            {
                flg_addon_possible_addon_found = "Y";
            }
        }

        private async Task la3_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la3_99_exit");

            //     exit.;
        }

        private async Task la5_oma_code_edit_check()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la5_oma_code_edit_check");

            // if ws-e020 = "Y" and ws-e022-e017-e016 = "N"  then            
            if (ws_e020 == "Y" && ws_e022_e017_e016 == "N")
            {
                err_ind = 120;
                //  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if  ws-e719 = "Y"  and ws-z570 = "N"  then            
            if (ws_e719 == "Y" && ws_z570 == "N")
            {
                err_ind = 121;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if  ws-e720 = "Y" and ws-z571 = "N"  then            
            if (ws_e720 == "Y" && ws_z571 == "N")
            {
                err_ind = 122;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-e717 = "Y"  and ws-z555-z580 = "N"  and ws-z491-to-z499 = "N"  then          
            if (ws_e717 == "Y" && ws_z555_z580 == "N" && ws_z491_to_z499 == "N")
            {
                err_ind = 123;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-e702 = "Y" and ws-z515-z760 = "N"   then            
            if (ws_e702 == "Y" && ws_z515_z760 == "N")
            {
                err_ind = 124;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-g123 = "Y"  and ws-g228 = "N"   then            
            if (ws_g123 == "Y" && ws_g228 == "N")
            {
                err_ind = 125;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-g223 = "Y"  and ws-g231 = "N"  then            
            if (ws_g223 == "Y" && ws_g231 == "N")
            {
                err_ind = 126;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-g265 = "Y"  and ws-g264 = "N"  then            
            if (ws_g265 == "Y" && ws_g264 == "N")
            {
                err_ind = 127;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-g385 = "Y"  and ws-g384 = "N"  then            
            if (ws_g385 == "Y" && ws_g384 == "N")
            {
                err_ind = 128;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-g281 = "Y"  and ws-g381 = "N"  then            
            if (ws_g281 == "Y" && ws_g381 == "N")
            {
                err_ind = 129;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-c998 = "Y"  or ws-c985 = 'Y'  or ws-c983 = 'Y'  then            
            if (ws_c998 == "Y" || ws_c985 == "Y" || ws_c983 == "Y")
            {
                err_ind = 135;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-c999 = "Y" then            
            if (ws_c999 == "Y")
            {
                err_ind = 136;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-e798 = "Y" and ws-z400 = "N"  then            
            if (ws_e798 == "Y" && ws_z400 == "N")
            {
                err_ind = 137;
                // 	    perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ( ( ws-g400-other-codes = "Y" and (   ws-e409-e410 = "Y"  or ws-g325 = "Y"   ) )  or ( ws-g489-g376 = "Y"  and     ws-e409-e410 = "Y"  ) )  then            
            if (
                ((ws_g400_other_codes == "Y" && (ws_e409_e410 == "Y" || ws_g325 == "Y")) || (ws_g489_g376 == "Y" && ws_e409_e410 == "Y"))
                )
            {
                err_ind = 138;
                // 	    perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-c990-to-c997 = "Y" and ws-cnnn = "Y"  and ws-sv-date-c1 = ws-sv-date-c2  then            
            if (ws_c990_to_c997 == "Y" && ws_cnnn == "Y" && ws_sv_date_c1 == ws_sv_date_c2)
            {
                err_ind = 139;
                // 	    perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-e450 = "Y"  and ws-j315 = "N"  then            
            if (ws_e450 == "Y" && ws_j315 == "N")
            {
                err_ind = 140;
                // 	    perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-g222 = "Y" and ws-g248-g062 = "Y"   then            
            if (ws_g222 == "Y" && ws_g248_g062 == "Y")
            {
                err_ind = 141;
                //    perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-X9nn = "Y" and ws-a770-a775 = "Y"  then            
            if (ws_X9nn == "Y" && ws_a770_a775 == "Y")
            {
                err_ind = 142;
                //      perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-g222-z805 = 'Y' and ws-p014-p016 = "Y"   then            
            if (ws_g222_z805 == "Y" && ws_p014_p016 == "Y")
            {
                err_ind = 146;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-g221 = 'Y' and ws-g220 = "N"  then            
            if (ws_g221 == "Y" && ws_g220 == "N")
            {
                err_ind = 148;
                //    perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-g521-g395 = 'Y'  and ws-h104-h124 = "Y"  then            
            if (ws_g521_g395 == "Y" && ws_h104_h124 == "Y")
            {
                err_ind = 151;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-g345-g339 = 'Y' and ws-annn = "Y"  then            
            if (ws_g345_g339 == "Y" && ws_annn == "Y")
            {
                err_ind = 152;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-j025 = 'Y' and (ws-j021 = 'Y' or ws-j022 = 'Y')  then            
            if (ws_j025 == "Y" && (ws_j021 == "Y" || ws_j022 == "Y"))
            {
                err_ind = 158;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-z608 = 'Y'  and ws-z611-z602 = 'Y'  then            
            if (ws_z608 == "Y" && ws_z611_z602 == "Y")
            {
                err_ind = 162;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-z403 = 'Y'  and ws-z408 = 'Y'  and clmhdr-manual-review not = 'Y'   then            
            if (ws_z403 == "Y" && ws_z408 == "Y" && clmhdr_manual_review != "Y")
            {
                err_ind = 165;
                //      perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-c122-c143 = 'Y' and ws-e083 not = 'Y' then            
            if (ws_c122_c143 == "Y" && ws_e083 != "Y")
            {
                err_ind = 167;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if  ws-c122-c982 not = 'Y' and ws-e083 = 'Y'  then            
            if (ws_c122_c982 != "Y" && ws_e083 == "Y")
            {
                err_ind = 168;
                //      perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-j021 not = 'Y' and ws-j022 = 'Y'  then            
            if (ws_j021 != "Y" && ws_j022 == "Y")
            {
                err_ind = 169;
                //      perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-k189 = 'Y'  and ws-a190-a795 not = 'Y' then            
            if (ws_k189 == "Y" && ws_a190_a795 != "Y")
            {
                err_ind = 174;
                //      perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if  ( ws-k960 = 'Y' and ws-k990 not = 'Y' )  or (  ws-k961 = 'Y'  and ws-k992 not = 'Y'  )  or  ( ws-k962 = 'Y'  and ws-k994 not = 'Y' ) or  (ws-k963 = 'Y'  and ws-k998 not = 'Y')  or  (ws-k964 = 'Y'  and ws-k996 not = 'Y' )            
            //        or  ( ws-c960 = 'Y'  and ws-c990 not = 'Y')  or  ( ws-c961 = 'Y'  and ws-c992 not = 'Y' )  or  ( ws-c962 = 'Y'  and ws-c994 not = 'Y') or  ( ws-c963 = 'Y'  and ws-c986 not = 'Y'  ) or  (ws-c964 = 'Y' and ws-c996 not = 'Y'  ) then
            if (
                 (ws_k960 == "Y" && ws_k990 != "Y") || (ws_k961 == "Y" && ws_k992 != "Y") || (ws_k962 == "Y" && ws_k994 != "Y") || (ws_k963 == "Y" && ws_k998 != "Y") || (ws_k964 == "Y" && ws_k996 != "Y")
                    || (ws_c960 == "Y" && ws_c990 != "Y") || (ws_c961 == "Y" && ws_c992 != "Y") || (ws_c962 == "Y" && ws_c994 != "Y") || (ws_c963 == "Y" && ws_c986 != "Y") || (ws_c964 == "Y" && ws_c996 != "Y")
                )
            {
                err_ind = 175;
                //        perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-g556 = "Y" and ws-g400-g620 = "N"  then            
            if (ws_g556 == "Y" && ws_g400_g620 == "N")
            {
                err_ind = 178;
                // 	  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-a120 = "Y"  and ws-z491-to-z499 = "N"  then            
            if (ws_a120 == "Y" && ws_z491_to_z499 == "N")
            {
                err_ind = 179;
                // 	   perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if  ws-e402-e403 = 'Y'  and ws-g247 not = 'Y'  then            
            if (ws_e402_e403 == "Y" && ws_g247 != "Y")
            {
                err_ind = 180;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-e797 = 'Y' and ws-z491-z580 = 'Y'  then      
            if (ws_e797 == "Y" && ws_z491_z580 == "Y")
            {
                err_ind = 185;
                //    perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if  ws-e409-e410 = 'Y'  and ws-e414 = 'Y'  and clmhdr-manual-review not = 'Y'  then           
            if (ws_e409_e410 == "Y" && ws_e414 == "Y" && clmhdr_manual_review != "Y")
            {
                err_ind = 186;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-p030 = 'Y' and (   ws-annn = 'Y'  or ws-cnnn = 'Y'  )  then      
            if (ws_p030 == "Y" && (ws_annn == "Y" || ws_cnnn == "Y"))
            {
                err_ind = 188;
                //       perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if  ws-a895 = 'Y' and ( ws-cnnn not = 'Y'  and ws-wnnn not = 'Y'  and ws-knnn not = 'Y' )  then       
            if (ws_a895 == "Y" && (ws_cnnn != "Y" && ws_wnnn != "Y" && ws_knnn != "Y"))
            {
                err_ind = 189;
                //      perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if ws-z512 = 'Y'  and ws-z514 = 'Y'  then            
            if (ws_z512 == "Y" && ws_z514 == "Y")
            {
                err_ind = 190;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if  ws-z580 = 'Y'  and ws-z491-to-z499 = 'Y'  then       
            if (ws_z580 == "Y" && ws_z491_to_z499 == "Y")
            {
                err_ind = 191;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            // if  ws-edit-80 = 'Y'  and  ws-total-nbr-svc > 8   then        
            if (ws_edit_80 == "Y" && ws_total_nbr_svc > 8)
            {
                err_ind = 192;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

            //  if ws-X9nn = "Y" and ws-a075 = "Y" then            
            if (ws_X9nn == "Y" && ws_a075 == "Y")
            {
                err_ind = 193;
                //     perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
                return;
            }

        }

        private async Task la5_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la5_99_exit");

            //     exit.;
        }

        private async Task ma0_acpt_verification()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ma0_acpt_verification");

            flag_accept = "";
            // if flag = "1" then            
            if (flag.Equals("1"))
            {
                Display("verification-screen-2.", false);
                //         display verification-screen-1;
                Display("verification-screen-1.");
            }
            else
            {
                Display("verification-screen-1.", false);
                //         display verification-screen-2.;
                Display("verification-screen-2.");
            }

            //     display scr-verification.;
            //     accept  scr-verification.;            
            Display("scr-verification.");
            await Prompt("flag_accept");

            //  if flag-accept = "Y" or "N"  or "M"  or "P"  or "D"  or "S" then          
            if (Util.Str(flag_accept).ToUpper() == "Y" || Util.Str(flag_accept).ToUpper() == "N" || Util.Str(flag_accept).ToUpper() == "M" || Util.Str(flag_accept).ToUpper() == "P" || Util.Str(flag_accept).ToUpper() == "D" || Util.Str(flag_accept).ToUpper() == "S")
            {
                //         if  flag = "2" or (      (flag-accept not = "D")  and (flag-accept not = "R")  ) then            
                if (flag == "2" || ((Util.Str(flag_accept).ToUpper() != "D") && (Util.Str(flag_accept).ToUpper() != "R")))
                {
                    //             go to ma0-99-exit;
                    await ma0_99_exit();
                    return;
                }
                else
                {
                    //             next sentence;
                }
            }
            else
            {
                //         next sentence.;
            }

            err_ind = 1;
            //  perform za0-common-error            thru za0-99-exit.;
            await za0_common_error();
            await za0_99_exit();
            //  go to ma0-acpt-verification.;
            await ma0_acpt_verification();
            return;
        }

        private async Task ma0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ma0_99_exit");

            //     exit.;
        }

        private async Task na0_write_clmhdr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "na0_write_clmhdr");

            clmhdr_tot_claim_ar_oma = 0;
            clmhdr_tot_claim_ar_ohip = 0;
            clmhdr_amt_tech_billed = 0;

            hold_date = 99999999;
            //     perform nb0-add-tot-claim-fees      thru nb0-99-exit;
            //                 varying   ss;
            //                 from 1 by 1;
            //                 until     ss > ss-clmdtl-oma.;

            ss = 1;
            do
            {
                await nb0_add_tot_claim_fees();
                await nb0_99_exit();
                ss++;
            } while (ss <= ss_clmdtl_oma);

            //     add clmhdr-tot-claim-ar-oma                 to ws-batctrl-amt-act.;
            ws_batctrl_amt_act += clmhdr_tot_claim_ar_oma;

            // if  ws-batctrl-amt-act > 99999.99 then;    
            if ((ws_batctrl_amt_act / 100) > 99999.99M)
            {
                //         perform ab1-subtract-1-from-claim-nbr   thru ab1-99-exit;
                await ab1_subtract_1_from_claim_nbr();
                await ab1_99_exit();
                //         display ring-bell;
                Display("ring-bell.");


                err_ind = 61;
                //         perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //         perform zz0-end-of-batch        thru zz0-99-exit;
                await zz0_end_of_batch();
                await zz0_10();
                await zz0_99_exit();

                //   go to mainline-shutdown.;
                await mainline_shutdown();
                return;
            }

            clmhdr_serv_date = 0;
            objRejected_claims_rec.CLMHDR_SUBMIT_DATE = null;

            //clmhdr-submit-date of claim-header-rec. = 0
            clmhdr_submit_date_grp = "0";
            clmhdr_submit_yy = 0;
            clmhdr_submit_mm = 0;
            clmhdr_submit_dd = 0;

            // objClaims_mstr_hdr_rec.CLMHDR_SUBMIT_DATE = 0;


            clmhdr_serv_date = hold_date;
            clmhdr_doc_dept = ws_doc_dept;
            clmhdr_doc_nbr_ohip = ws_doc_ohip_nbr;
            clmhdr_doc_spec_cd = ws_doc_spec_cd;
            sys_date_grp = Util.Str(sys_yy).PadLeft(4, '0') + Util.Str(sys_mm).PadLeft(2, '0') + Util.Str(sys_dd).PadLeft(2, '0');
            clmhdr_date_sys = sys_date_grp;
            clmhdr_reference = "";

            // if  not def-agent-bill-direct and not def-agent-foreign-direct  and not def-agent-ifhp-direct  and not def-agent-ontario-direct  and not def-agent-quebec-direct   then     
            if (!def_agent_code.Equals(def_agent_bill_direct) && !def_agent_code.Equals(def_agent_foreign_direct) && !def_agent_code.Equals(def_agent_ifhp_direct) && !def_agent_code.Equals(def_agent_ontario_direct) && !def_agent_code.Equals(def_agent_quebec_direct))
            {
                clmhdr_date_cash_tape_payment = "0";
            }

            clmhdr_manual_and_tape_paymnts = 0;
            clmhdr_status_ohip = "0";
            clmhdr_curr_payment = 0;

            clmhdr_adj_cd_sub_type = def_claim_source;

            // if (ss-clmdtl-desc  > 0  and ss-clmdtl-desc  not = ss-basic-times-desc-rec)  or ic-entered   then   
            if ((ss_clmdtl_desc > 0 && ss_clmdtl_desc != ss_basic_times_desc_rec) || ic_flag.Equals(ic_entered))
            {
                clmhdr_manual_review = "Y";
                //      display scr-clmhdr-man-review.;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-man-review");
            }

            clmhdr_b_key_type = "B";
            clmhdr_zeroed_oma_suff_adj_grp = Util.Str(clmhdr_adj_oma_cd).PadRight(4, ' ') + Util.Str(clmhdr_adj_oma_suff).PadRight(1, ' ') + Util.Str(clmhdr_adj_adj_nbr).PadLeft(1, '0');
            clmhdr_claim_id_grp = Util.Str(clmhdr_batch_nbr).PadRight(8, ' ') + Util.Str(clmhdr_claim_nbr).PadLeft(2, '0') + Util.Str(clmhdr_adj_oma_cd).PadRight(4, ' ') + Util.Str(clmhdr_adj_oma_suff).PadRight(1, ' ') + Util.Str(clmhdr_adj_adj_nbr).PadLeft(1, '0');
            clmhdr_b_data_grp = clmhdr_claim_id_grp;
            clmhdr_b_batch_num = Util.Str(clmhdr_batch_nbr).PadRight(8, ' ');
            clmhdr_b_claim_nbr = Util.NumInt(Util.Str(clmhdr_claim_nbr).PadLeft(2, '0'));
            clmhdr_b_oma_cd = Util.Str(clmhdr_adj_oma_cd).PadRight(4, '0');
            clmhdr_b_oma_suff = Util.Str(clmhdr_adj_oma_suff).PadRight(1, '0');
            clmhdr_b_adj_nbr = Util.Str(clmhdr_adj_adj_nbr).PadLeft(1, '0');

            clmhdr_key_claims_mstr_grp = clmhdr_b_key_type + clmhdr_b_data_grp;
            //objClaims_mstr_rec.key_claims_mstr = clmhdr_key_claims_mstr;
            Key_claims_mstr = clmhdr_key_claims_mstr_grp;
            clmdtl_b_key_type = clmhdr_b_key_type;
            clmdtl_b_batch_num = Util.Str(clmhdr_batch_nbr).PadRight(8, ' ');
            clmdtl_b_claim_nbr = Util.NumInt(Util.Str(clmhdr_claim_nbr).PadLeft(2, '0'));
            clmdtl_b_oma_cd = Util.Str(clmhdr_adj_oma_cd).PadRight(4, ' ');
            clmdtl_b_oma_suff = Util.Str(clmhdr_adj_oma_suff).PadRight(1, ' ');
            clmdtl_b_adj_nbr = Util.Str(clmhdr_adj_adj_nbr).PadLeft(1, '0');

            clmhdr_p_key_type = "P";
            // clmhdr_pat_key_data_grp = clmhdr_pat_key_ohip + new string(' ', 7);
            // this.clmhdr_p_data_grp = clmhdr_pat_key_data_grp;
            /* clmhdr_p_clinic_nbr_1_2 = Util.NumInt(Util.Str(this.clmhdr_p_data_grp).PadRight(16, ' ').Substring(0, 2));
             clmhdr_p_doc_nbr = Util.Str(this.clmhdr_p_data_grp).PadRight(16, ' ').Substring(2, 3);
             clmhdr_p_week = Util.NumInt(Util.Str(this.clmhdr_p_data_grp).PadRight(16, ' ').Substring(5, 2));
             clmhdr_p_day = Util.NumInt(Util.Str(this.clmhdr_p_data_grp).PadRight(16, ' ').Substring(7, 1));
             clmhdr_p_claim_nbr = Util.NumInt(Util.Str(this.clmhdr_p_data_grp).PadRight(16, ' ').Substring(8, 2));
             clmhdr_p_oma_cd = Util.Str(Util.NumInt(Util.Str(this.clmhdr_p_data_grp).PadRight(16, ' ').Substring(10, 4)));
             clmhdr_p_oma_suff = Util.Str(Util.NumInt(Util.Str(this.clmhdr_p_data_grp).PadRight(16, ' ').Substring(14, 1)));
             clmhdr_p_adj_nbr = Util.Str(this.clmhdr_p_data_grp).PadRight(16, ' ').Substring(15, 1); */

            //objClaims_mstr_rec.clmdtl_p_claims_mstr = clmhdr_p_claims_mstr;
            this.clmhdr_p_batch_nbr_grp = Util.Str(clmhdr_p_clinic_nbr_1_2).PadLeft(2, '0') + Util.Str(clmhdr_p_doc_nbr).PadRight(3, ' ') + Util.Str(clmhdr_p_week).PadLeft(2, '0') + Util.Str(clmhdr_p_day).PadLeft(1, '0');
            clmhdr_p_data_grp = Util.Str(this.clmhdr_p_batch_nbr_grp) + Util.Str(clmhdr_p_claim_nbr).PadLeft(2, '0') + Util.Str(clmhdr_p_oma_cd).PadLeft(4, ' ') + Util.Str(clmhdr_p_oma_suff).PadRight(1, ' ') + Util.Str(clmhdr_p_adj_nbr).PadRight(1, ' ');
            clmhdr_p_claims_mstr_grp = Util.Str(clmhdr_p_key_type) + clmhdr_p_data_grp;

            // write claims-mstr-hdr-rec   from  claim-header-rec;
            //         invalid key;
            //             err_ind = 29;
            //             perform za0-common-error    thru za0-99-exit;
            //             perform zz0-end-of-batch    thru zz0-99-exit;
            //             go to mainline-shutdown.;

            if (await write_claims_hdr_rec() == false)
            {
                err_ind = 29;
                //  perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  perform zz0-end-of-batch    thru zz0-99-exit;
                await zz0_end_of_batch();
                await zz0_10();
                await zz0_99_exit();
                //             go to mainline-shutdown.;
                await mainline_shutdown();
                return;
            }

            //     add  1                              to ctr-writ-claims-mstr.;
            ctr_writ_claims_mstr++;
        }

        private async Task na0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "na0_99_exit");

            //     exit.;
        }

        private async Task nb0_add_tot_claim_fees()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "nb0_add_tot_claim_fees");

            //     add hold-fee-oma  ( ss )            to clmhdr-tot-claim-ar-oma.;
            clmhdr_tot_claim_ar_oma += hold_fee_oma[ss];
            //     add hold-fee-ohip ( ss )            to clmhdr-tot-claim-ar-ohip.;
            clmhdr_tot_claim_ar_ohip += hold_fee_ohip[ss];
            //     add hold-priced-tech(ss)            to clmhdr-amt-tech-billed.;
            clmhdr_amt_tech_billed += hold_priced_tech[ss];

            // if hold-sv-date (ss) < hold-date then        
            if (Util.NumInt(hold_sv_date[ss]) < hold_date)
            {
                hold_date = Util.NumInt(hold_sv_date[ss]);
            }
        }

        private async Task nb0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "nb0_99_exit");

            //     exit.;
        }

        private async Task nc0_set_hdr_diag_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "nc0_set_hdr_diag_cd");

            // if hold-diag-cd(ss) not = zero then            
            if (hold_diag_cd[ss] != 0)
            {
                clmhdr_diag_cd = hold_diag_cd[ss];
                ss = 10;
                //  display scr-clmhdr-diag-cd.;
                Display("scr-acpt-clmhdr.", "scr-clmhdr-diag-cd");
            }
        }

        private async Task nc0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "nc0_99_exit");

            //     exit.;
        }

        private async Task pa0_write_clmdtl()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "pa0_write_clmdtl");

            // perform pb0-move-hold-to-oma-rec    thru pb0-99-exit.;
            await pb0_move_hold_to_oma_rec();
            await pb0_99_exit();

            // objClaims_mstr_rec.clmdtl_b_key_type = "B";
            clmdtl_b_key_type = "B";

            // objClaims_mstr_rec.clmdtl_b_data = objClaims_mstr_rec.clmdtl_id;            
            clmdtl_b_batch_num = Util.Str(clmhdr_batch_nbr);

            clmdtl_claim_nbr = clmhdr_claim_nbr;
            clmdtl_b_claim_nbr = clmdtl_claim_nbr;
            clmdtl_b_oma_cd = clmdtl_oma_cd;
            clmdtl_b_oma_suff = clmdtl_oma_suff;
            clmdtl_b_adj_nbr = Util.Str(clmdtl_adj_nbr);

            clmdtl_p_key_type = "Z";
            // objClaims_mstr_rec.clmdtl_p_data = clmhdr_pat_key_data;
            // clmhdr_pat_key_data_grp = Util.Str(clmhdr_pat_key_ohip).PadRight(8, ' ') + new string(' ', 7);
            // clmdtl_p_data_grp = clmhdr_pat_key_data_grp;
            clmdtl_p_batch_nbr = Util.Str(clmhdr_batch_nbr).PadRight(8);
            clmdtl_p_clinic_nbr_1_2 = Util.NumInt(clmdtl_p_batch_nbr.Substring(0, 2));
            clmdtl_p_doc_nbr = clmdtl_p_batch_nbr.Substring(2, 3);
            clmdtl_p_week = Util.NumInt(clmdtl_p_batch_nbr.Substring(5, 2));
            clmdtl_p_day = Util.NumInt(clmdtl_p_batch_nbr.Substring(7, 1));
            clmdtl_p_claim_nbr = clmdtl_p_clinic_nbr_1_2;   // Util.NumInt(clmdtl_p_batch_nbr.Substring(8, 2));
            // clmdtl_p_oma_cd = clmdtl_p_batch_nbr.Substring(10, 4);   // todo:  Not sure what values to fill in ...
            // clmdtl_p_oma_suff = clmdtl_p_batch_nbr.Substring(14, 1);  // todo: Not sure what values to fill in ...
            // clmdtl_p_adj_nbr = clmdtl_p_batch_nbr.Substring(15, 1);   // todo: Not sure what values to fill in ...

            //  write claims-mstr-rec       from  claim-detail-rec;
            //         invalid key;
            //            err_ind = 30;
            //             perform za0-common-error    thru za0-99-exit;
            //             perform zz0-end-of-batch    thru zz0-99-exit;
            //             go to mainline-shutdown.;

            if (await write_claims_dtl_rec() == false)
            {
                err_ind = 30;
                //  perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  perform zz0-end-of-batch    thru zz0-99-exit;
                await zz0_end_of_batch();
                await zz0_10();
                await zz0_99_exit();

                //  go to mainline-shutdown.;
                await mainline_shutdown();
                return;
            }

            //     add 1                               to ctr-writ-claims-mstr.;
            ctr_writ_claims_mstr++;
        }

        private async Task pa0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "pa0_99_exit");

            //     exit.;
        }

        private async Task pb0_move_hold_to_oma_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "pb0_move_hold_to_oma_rec");

            clmdtl_oma_cd = hold_oma_cd[ss_det_nbr];
            clmdtl_oma_suff = Util.Str(hold_oma_suff[ss_det_nbr]);
            clmdtl_nbr_serv = hold_sv_nbr_serv[ss_det_nbr];
            clmdtl_sv_date = hold_sv_date[ss_det_nbr];
            clmdtl_sv_yy = Util.NumInt(Util.Str(clmdtl_sv_date).PadRight(8, '0').Substring(0, 4));
            clmdtl_sv_mm = Util.NumInt(Util.Str(clmdtl_sv_date).PadRight(8, '0').Substring(4, 2));
            clmdtl_sv_dd = Util.NumInt(Util.Str(clmdtl_sv_date).PadRight(8, '0').Substring(6, 2));

            //move hold-sv - nbr(ss - det - nbr, 1)      to clmdtl-sv - nbr(1).
            clmdtl_sv_nbr[1] = hold_sv_nbr[ss_det_nbr, 1];
            //move hold - sv - day(ss - det - nbr, 1)      to clmdtl-sv - day(1).
            clmdtl_sv_day[1] = hold_sv_day[ss_det_nbr, 1];
            //move hold - sv - nbr(ss - det - nbr, 2)      to clmdtl-sv - nbr(2).
            clmdtl_sv_nbr[2] = hold_sv_nbr[ss_det_nbr, 2];
            //move hold - sv - day(ss - det - nbr, 2)      to clmdtl-sv - day(2).
            clmdtl_sv_day[2] = hold_sv_day[ss_det_nbr, 2];
            //move hold - sv - nbr(ss - det - nbr, 3)      to clmdtl-sv - nbr(3).
            clmdtl_sv_nbr[3] = hold_sv_nbr[ss_det_nbr, 3];
            //move hold - sv - day(ss - det - nbr, 3)      to clmdtl-sv - day(3).
            clmdtl_sv_day[3] = hold_sv_day[ss_det_nbr, 3];

            clmdtl_consec_dates_grp = Util.Str(clmdtl_sv_nbr[1]) + Util.Str(clmdtl_sv_day[1]).PadRight(2, '0') + Util.Str(clmdtl_sv_nbr[2]) + Util.Str(clmdtl_sv_day[2]).PadRight(2, '0') + Util.Str(clmdtl_sv_nbr[3]) + Util.Str(clmdtl_sv_day[3]).PadRight(2, '0');

            //     add  hold-sv-nbr-serv ( ss-det-nbr);
            //          hold-sv-nbr      ( ss-det-nbr, 1);
            //          hold-sv-nbr      ( ss-det-nbr, 2);
            //          hold-sv-nbr      ( ss-det-nbr, 3)      to ws-tot-claim-nbr-sv.;
            ws_tot_claim_nbr_sv += hold_sv_nbr_serv[ss_det_nbr] + hold_sv_nbr[ss_det_nbr, 1] + hold_sv_nbr[ss_det_nbr, 2] + hold_sv_nbr[ss_det_nbr, 3];

            clmdtl_rev_group_cd = "0";
            clmdtl_diag_cd = hold_diag_cd[ss_det_nbr];
            clmdtl_fee_oma = hold_fee_oma[ss_det_nbr];
            clmdtl_fee_ohip = hold_fee_ohip[ss_det_nbr];
            clmdtl_amt_tech_billed = hold_priced_tech[ss_det_nbr];
            clmdtl_line_no = hold_line_no[ss_det_nbr];
        }

        private async Task pb0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "pb0_99_exit");

            //     exit.;
        }

        private async Task ra0_write_clmdtl_desc()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ra0_write_clmdtl_desc");

            clmdtl_b_key_type = "B";
            clmdtl_p_key_type = "Z";
            // clmhdr_pat_key_data_grp = Util.Str(clmhdr_pat_key_ohip) + new string(' ', 7);
            clmdtl_p_data = clmhdr_pat_key_data_grp;
            clmdtl_oma_cd = "ZZZZ";
            clmdtl_oma_suff = Util.Str(ss_desc);
            clmdtl_adj_nbr = 0;
            clmdtl_b_data = clmdtl_id;
            clmdtl_desc = hold_desc[ss_desc];

            // write claims-mstr-rec       from  claim-detail-rec;
            //         invalid key;
            //             err_ind = 31;
            //             perform za0-common-error    thru za0-99-exit;
            //             perform zz0-end-of-batch    thru zz0-99-exit;
            //             go to mainline-shutdown.;

            if (await write_claims_dtl_desc_rec() == false)
            {
                err_ind = 31;
                //  perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  perform zz0-end-of-batch    thru zz0-99-exit;
                await zz0_end_of_batch();
                await zz0_10();
                await zz0_99_exit();

                //  go to mainline-shutdown.;
                await mainline_shutdown();
                return;
            }

            //     add  1                              to ctr-writ-claims-mstr.;
            ctr_writ_claims_mstr++;
        }

        private async Task ra0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ra0_99_exit");

            //     exit.;
        }

        private async Task ta0_update_patient_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ta0_update_patient_rec");

            // if  ws-pat-location-field > '100   '  and ws-pat-location-field < '135   '  then;            
            ws_pat_location_field_grp = Util.Str(ws_pat_location_field_1_3).PadRight(3, ' ') + new string(' ', 1);
            if (ws_pat_location_field_grp.CompareTo("100 ") > 0 && ws_pat_location_field_grp.CompareTo("135 ") < 0)
            {
                //         next sentence;
            }
            else
            {
                ws_pat_location_field_grp = Util.Str(objClaims_mstr_hdr_rec.CLMHDR_LOC);  //objClaim_header_rec.Clmhdr_loc;
                ws_pat_location_field_1_3 = Util.Str(ws_pat_location_field_grp).Substring(0, 3);
            }

            ws_pat_date_last_visit = Util.NumInt(hold_sv_date[1]);
            ws_pat_in_out = clmhdr_i_o_pat_ind;
            ws_pat_last_doc_nbr_seen = clmhdr_doc_nbr;

            // if clmhdr-date-admit not = zero  then            
            clmhdr_date_admit_grp = Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0') + Util.Str(clmhdr_date_admit_mm).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_dd).PadLeft(2, '0');
            if (Util.NumInt(clmhdr_date_admit_grp) != 0)
            {
                ws_pat_date_last_admit = Util.NumInt(clmhdr_date_admit_grp);
            }

            //  add  1  to ws-pat-total-nbr-claims on size error            
            ws_pat_total_nbr_claims++;
            if (ws_pat_total_nbr_claims > 99999)
            {
                ws_pat_total_nbr_claims = 99999;
            }

            // add  1  to ws-pat-nbr-outstanding-claims on size error            
            try
            {
                ws_pat_nbr_outstanding_claims++;
            }
            catch (Exception e)
            {
                ws_pat_nbr_outstanding_claims = 9999;
            }

            // add ws-tot-claim-nbr-sv  to ws-pat-total-nbr-visits on size error;            
            try
            {

                ws_pat_total_nbr_visits += ws_tot_claim_nbr_sv;
                if (ws_pat_total_nbr_visits > 99999)
                {
                    ws_pat_total_nbr_visits = 99999;
                }

            }
            catch (Exception e)
            {
                ws_pat_total_nbr_visits = 99999;
            }

            ws_pat_total_nbr_visits = 99999;

            ws_pat_date_last_maint = Util.NumInt(sys_date_grp);
            ws_pat_last_mod_by = logon_id;

            // if ws-pat-health-nbr not = 0 then           
            if (ws_pat_health_nbr != 0)
            {
                //     rewrite pat-mstr-rec    from ws-pat-mstr-rec;
                //           invalid key;
                //             err_ind = 48;
                //             perform za0-common-error    thru za0-99-exit;
                //             perform zz0-end-of-batch    thru zz0-99-exit;
                //             go to mainline-shutdown;
                if (await rewrite_pat_mstr_rec_from_ws_pat_mstr_rec() == false)
                {
                    err_ind = 48;
                    //  perform za0-common-error    thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();

                    //  perform zz0-end-of-batch    thru zz0-99-exit;
                    await zz0_end_of_batch();
                    await zz0_10();
                    await zz0_99_exit();
                    //  go to mainline-shutdown;
                    await mainline_shutdown();
                    return;
                }
            }
            //  else if qhip or direct  then;           \            
            else if (flag_ohip_vs_chart.Equals(qhip) || flag_ohip_vs_chart.Equals(direct))
            {
                //         rewrite pat-mstr-rec    from ws-pat-mstr-rec;
                //           invalid key;
                //            err_ind = 48;
                //             perform za0-common-error    thru za0-99-exit;
                //             perform zz0-end-of-batch    thru zz0-99-exit;
                //             go to mainline-shutdown;
                if (await rewrite_pat_mstr_rec_from_ws_pat_mstr_rec() == false)
                {
                    err_ind = 48;
                    //  perform za0-common-error    thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //  perform zz0-end-of-batch    thru zz0-99-exit;
                    await zz0_end_of_batch();
                    await zz0_10();
                    await zz0_99_exit();
                    //  go to mainline-shutdown;
                    await mainline_shutdown();
                    return;
                }
            }
            // else  if chart then            
            else if (flag_ohip_vs_chart.Equals(chart))
            {
                //         rewrite pat-mstr-rec    from ws-pat-mstr-rec;
                //           invalid key;
                //             err_ind = 48;
                //             perform za0-common-error    thru za0-99-exit;
                //             perform zz0-end-of-batch    thru zz0-99-exit;
                //             go to mainline-shutdown.; 
                if (await rewrite_pat_mstr_rec_from_ws_pat_mstr_rec() == false)
                {
                    err_ind = 48;
                    //  perform za0-common-error    thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //  perform zz0-end-of-batch    thru zz0-99-exit;
                    await zz0_end_of_batch();
                    await zz0_10();
                    await zz0_99_exit();
                    //  go to mainline-shutdown;
                    await mainline_shutdown();
                    return;
                }
            }
        }

        private async Task ta0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ta0_99_exit");

            //     exit.;
        }

        private async Task ua0_create_new_acronym()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ua0_create_new_acronym");

            pat_occur = 0;
            feedback_pat_mstr_acr = save_feedback_pat_mstr;
            // objPat_mstr.Key_pat_mstr = ws_key_pat_mstr;
            //     read pat-mstr key is key-pat-mstr of pat-mstr;
            //         invalid key;
            //             err_ind = 16;
            //             perform za0-common-error    thru za0-99-exit.;

            ws_key_pat_mstr_grp = ws_pat_i_key + ws_pat_con_nbr + ws_pat_i_nbr;
            Pat_mstr_rec_Collection = new F010_PAT_MSTR
            {
                WherePat_i_key = ws_pat_i_key,
                WherePat_con_nbr = ws_pat_con_nbr,
                WherePat_i_nbr = ws_pat_i_nbr
            }.Collection();

            if (Pat_mstr_rec_Collection.Count() == 0)
            {
                err_ind = 16;
                // perform za0-common-error    thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            objPat_mstr_rec = Pat_mstr_rec_Collection.First();


            new_acronym_grp = Util.Str(new_pat_surname6).PadRight(6, ' ') + Util.Str(new_pat_given_name3).PadRight(3, ' ');
            pat_acronym = new_acronym_grp;
            objPat_mstr_rec.PAT_ACRONYM_FIRST6 = Util.Str(new_pat_surname6).PadRight(6, ' ');
            objPat_mstr_rec.PAT_ACRONYM_LAST3 = Util.Str(new_pat_given_name3).PadRight(3, ' ');

            //     rewrite pat-mstr-rec;
            //         invalid key;
            //             err_ind = 48;
            //             perform za0-common-error    thru za0-99-exit;
            //             perform zz0-end-of-batch    thru zz0-99-exit;
            //             go to mainline-shutdown.; 

            if (await rewrite_pat_mstr_rec() == false)
            {
                err_ind = 48;
                //  perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  perform zz0-end-of-batch    thru zz0-99-exit;
                await zz0_end_of_batch();
                await zz0_10();
                await zz0_99_exit();

                // go to mainline-shutdown.; 
                await mainline_shutdown();
                return;
            }
        }

        private async Task ua0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ua0_99_exit");

            //     exit.;
        }

        private async Task ua1_delete_old_acronym()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ua1_delete_old_acronym");

            pat_occur = 0;
            feedback_pat_mstr_acr = "0";

            //objPat_mstr_rec.pat_acronym = old_acronym;
            pat_acronym = old_acronym;
            pat_acronym_first6 = Util.Str(old_acronym).PadRight(9, ' ').Substring(0, 6);
            pat_acronym_last3 = Util.Str(old_acronym).PadRight(9, ' ').Substring(6, 3);

            // read  pat-mstr key is     pat-acronym;
            //         invalid key;
            //             err_ind = 80;
            //             perform za0-common-error    thru za0-99-exit;
            //             go to ua1-99-exit.;

            Pat_mstr_rec_Collection = new F010_PAT_MSTR
            {
                WherePat_acronym_first6 = pat_acronym_first6,
                WherePat_acronym_last3 = pat_acronym_last3
            }.Collection();

            if (Pat_mstr_rec_Collection.Count() == 0)
            {
                err_ind = 80;
                //  perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  go to ua1-99-exit.;
                await ua1_99_exit();
                return;
            }

            objPat_mstr_rec = Pat_mstr_rec_Collection.FirstOrDefault();
            if (await patMstr_to_screenVariables() == false)
            {
                err_ind = 80;
                //  perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  go to ua1-99-exit.;
                await ua1_99_exit();
                return;
            }
        }

        private async Task ua1_10_check_pat_ikey()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ua1_10_check_pat_ikey");

            key_pat_mstr_grp = objPat_mstr_rec.PAT_I_KEY + objPat_mstr_rec.PAT_CON_NBR + objPat_mstr_rec.PAT_I_NBR;
            ws_key_pat_mstr_grp = ws_pat_i_key + ws_pat_con_nbr + ws_pat_i_nbr;
            // if key-pat-mstr of pat-mstr-rec = ws-key-pat-mstr then                  
            if (key_pat_mstr_grp == ws_key_pat_mstr_grp)
            {
                //  perform ua3-delete-acronym      thru ua3-99-exit;
                await ua3_delete_acronym();
                await ua3_99_exit();
            }
            else
            {
                //  perform ua2-read-next-a-pat     thru ua2-99-exit;
                await ua2_read_next_a_pat();
                await ua2_99_exit();

                //      if  pat-acronym = old-acronym then;            
                pat_acronym = pat_acronym_first6 + pat_acronym_last3;
                if (pat_acronym == old_acronym)
                {
                    //   go to ua1-10-check-pat-ikey.;
                    await ua1_10_check_pat_ikey();
                    return;
                }
            }
        }

        private async Task ua1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ua1_99_exit");

            //     exit.;
        }

        private async Task ua2_read_next_a_pat()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ua2_read_next_a_pat");

            // read pat-mstr next;
            //         at end;
            //             err_ind = 81;
            //             perform za0-common-error    thru za0-99-exit;
            //             go to ua2-99-exit.;

            if (Pat_mstr_rec_Collection.Count() == 0)
            {
                err_ind = 81;
                //   perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //   go to ua2-99-exit.;
                await ua2_99_exit();
                return;
            }
            else
            {
                if (pat_Mstr_Rec_Ctr >= Pat_mstr_rec_Collection.Count())
                {
                    objPat_mstr_rec = new F010_PAT_MSTR();
                    await patMstr_to_screenVariables();
                    return;
                }
                else
                {
                    objPat_mstr_rec = Pat_mstr_rec_Collection[pat_Mstr_Rec_Ctr];
                    await patMstr_to_screenVariables();
                    pat_Mstr_Rec_Ctr++;
                }
            }


            // if pat-acronym not = old-acronym then      
            pat_acronym = pat_acronym_first6 + pat_acronym_last3;
            if (pat_acronym == old_acronym)
            {
                err_ind = 82;
                //   perform za0-common-error        thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }
        }

        private async Task ua2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ua2_99_exit");

            //     exit.;
        }

        private async Task ua3_delete_acronym()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ua3_delete_acronym");

            // delete  pat-mstr;
            //         err_ind = 79;
            //         perform za0-common-error thru za0-99-exit.;

            bool isDelete = new F010_PAT_MSTR
            {
                WherePat_i_key = pat_i_key,
                WherePat_con_nbr = pat_con_nbr,
                WherePat_i_nbr = pat_i_nbr
            }.Delete();

        }

        private async Task ua3_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ua3_99_exit");

            //     exit.;
        }

        private async Task uj1_read_isam_const_mstr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "uj1_read_isam_const_mstr");

            flag_lock = "N";
            //     read    iconst-mstr;
            //         invalid key;
            flag = "N";
            //             go to uj1-99-exit.;

            if (iconst_clinic_nbr_1_2 == 2)
            {
                objConstants_mstr_rec_2 = new CONSTANTS_MSTR_REC_2
                {
                    WhereConst_rec_nbr = iconst_clinic_nbr_1_2
                }.Collection().FirstOrDefault();

                if (objConstants_mstr_rec_2 == null)
                {
                    flag = "N";
                    //   go to uj1-99-exit.;
                    await uj1_99_exit();
                    return;
                }
            }
            else
            {
                objIconst_mstr_rec = new ICONST_MSTR_REC
                {
                    WhereIconst_clinic_nbr_1_2 = iconst_clinic_nbr_1_2
                }.Collection().FirstOrDefault();

                if (objIconst_mstr_rec == null)
                {
                    flag = "N";
                    //   go to uj1-99-exit.;
                    await uj1_99_exit();
                    return;
                }
            }

            flag = "Y";
            //     add  1  to ctr-read-const-mstr.;
            ctr_read_const_mstr++;

        }

        private async Task uj1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "uj1_99_exit");

            //     exit.;
        }

        private async Task uk0_zero_claim_hold_area()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "uk0_zero_claim_hold_area");

            //hold_claim_detail_recs = 0;
            hold_oma_rec = new string[91];
            hold_oma_cd = new string[91];
            hold_oma_cd_alpha = new string[91];
            hold_oma_cd_num = new string[91];
            hold_oma_cd_num_1 = new int[91];
            hold_oma_cd_num_2 = new int[91];
            hold_oma_cd_num_3 = new int[91];
            hold_oma_suff = new string[91];
            hold_sv_nbr_serv_incoming = new int[91];
            hold_sv_nbr_serv = new int[91];
            hold_admit_date_icc = new string[91];
            hold_sv_date = new string[91];
            hold_sv_date_yy = new int[91];
            hold_sv_date_yy_r = new string[91];
            hold_sv_date_yy_12 = new int[91];
            hold_sv_date_yy_34 = new int[91];
            hold_sv_date_mm = new int[91];
            hold_sv_date_dd = new int[91];
            hold_icc_cd = new string[91];
            hold_icc_sec = new string[91];
            hold_icc_grp = new int[91];
            hold_key_r = new string[91];
            //private string[] filler = new string[91];
            hold_sort_key_1 = new string[91];
            //hold_sv_nbr_days_conseq = new string[91, 4];   //todo 2 dimensional
            hold_sv_nbr = new int[91, 4];
            hold_sv_day = new string[91, 4];
            hold_override_price = new string[91];
            hold_bilateral = new string[91];
            hold_fee_incoming = new decimal[91];
            hold_fee_oma = new decimal[91];
            hold_fee_ohip = new decimal[91];
            hold_priced_tech = new decimal[91];
            hold_basic_tech = new decimal[91];
            hold_basic_prof = new decimal[91];
            hold_basic_fee = new decimal[91];
            hold_oma_rec_ind = new string[91, 9];
            hold_oma_add_on_cd = new string[91, 11];
            hold_oma_ind_card_requireds = new string[91];
            hold_oma_ind_card_required = new string[91, 4];
            hold_oma_fees = new string[91, 3];
            hold_oma_fee_1 = new decimal[91, 3];
            hold_oma_fee_2 = new decimal[91, 3];
            hold_fee_min = new decimal[91, 3];
            hold_fee_max = new decimal[91, 3];
            hold_oma_fee_anae = new int[91, 3];
            hold_oma_fee_asst = new int[91, 3];
            hold_flag_fee_used = new string[91];
            hold_flag_sec_group = new string[91];
            hold_flag_sec = new int[91];
            hold_flag_grp = new int[91];
            hold_diag_cd = new int[91];
            hold_line_no = new int[91];
            hold_sort_oma_rec = "";
            hold_descriptions_grp = "";
            hold_desc_1 = "";
            hold_desc_2 = "";
            hold_desc_3 = "";
            hold_desc_4 = "";
            hold_desc_5 = "";
            hold_descs_r_grp = "";
            hold_descs = new string[6];
            hold_desc = new string[6];
            hold_desc_tmp_grp = "";
            hold_desc_tmp_start = "";
            hold_desc_tmp_end = "";
            hold_basic_times_desc_grp = "";
            hold_basic_plus_times_desc = new string[3];
            hold_basic_units = new string[3];
            hold_basic_b = new string[3];
            hold_times_units = new string[3];
            hold_times_t = new string[3];

            hold_grp_totals_tbl_grp = "";
            hold_grp_tot = new decimal[91];
            hold_grp_nbr = new string[91];
            hold_grp_nbr_sec = new int[91];
            hold_grp_nbr_grp = new int[91];


            hold_oma_cd[1] = "";
            hold_oma_cd[2] = "";
            hold_oma_cd[3] = "";
            hold_oma_cd[4] = "";
            hold_oma_cd[5] = "";
            hold_oma_cd[6] = "";
            hold_oma_cd[7] = "";
            hold_oma_cd[8] = "";
            hold_oma_cd[9] = "";
            hold_oma_cd[10] = "";
            hold_descriptions_grp = "";
            hold_desc_1 = "";
            hold_desc_2 = "";
            hold_desc_3 = "";
            hold_desc_4 = "";
            hold_desc_5 = "";

            //hold_basic_times_desc = "";
            hold_basic_times_desc_grp = "";
            hold_basic_units = new string[3];
            hold_basic_b = new string[3];
            hold_times_units = new string[3];
            hold_times_t = new string[3];
        }

        private async Task uk0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "uk0_99_exit");

            //     exit.;
        }

        private async Task va0_acpt_dtl()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "va0_acpt_dtl");

            string retvalue = string.Empty;

            // if  ss-basic-times-desc-rec > 0 or ss-basic-times   > 0   then;            
            if (ss_basic_times_desc_rec > 0 || ss_basic_times > 0)
            {
                ss_basic_times_desc_rec = 0;
                ss_basic_times = 0;
                ss_clmdtl_desc = 0;

                hold_basic_times_desc_grp = "";
                hold_basic_units = new string[3];
                hold_basic_b = new string[3];
                hold_times_units = new string[3];
                hold_times_t = new string[3];

                this.hold_descriptions_grp = "";
                hold_desc_1 = "";
                hold_desc_2 = "";
                hold_desc_3 = "";
                hold_desc_4 = "";
                hold_desc_5 = "";
            }

            ic_flag = "N";
            flag_desc_report_required = "N";
            flag_adjudication_required = "N";
            flag_diag_code_required = "N";
            ws_special_add_on_cd_entered = "N";
            ss_clmdtl_oma = 0;
            flag_err_data = "Y";

            //     perform wa0-acpt-clmhdr-detail      thru wa0-99-exit.;
            _wa0_acpt_clmhdr_detail:
            await wa0_acpt_clmhdr_detail();
            _wa0_10:
            retvalue = await wa0_10();
            if (retvalue.ToLower().Equals("wa0_14"))
            {
                goto _wa0_14;
            }

            retvalue = await wa0_12();
            if (retvalue.ToLower().Equals("wa0_98"))
            {
                goto _wa0_98;
            }

            _wa0_14:
            retvalue = await wa0_14();
            if (retvalue.ToLower().Equals("wa0_98"))
            {
                goto _wa0_98;
            }

            retvalue = await wa0_16();
            if (retvalue.ToLower().Equals("wa0_10"))
            {
                goto _wa0_10;
            }
            else if (retvalue.ToLower().Equals("wa0_99_exit"))
            {
                goto _wa0_99_exit;
            }

            retvalue = await wa0_18();
            if (retvalue.ToLower().Equals("wa0_10"))
            {
                goto _wa0_10;
            }

            retvalue = await wa0_20_input_oma_suff_cd();
            if (retvalue.ToLower().Equals("wa0_10"))
            {
                goto _wa0_10;
            }

            await wa0_25_input_diag_cd();

            retvalue = await wa0_30_orig_sv_date_nbr();
            if (retvalue.ToLower().Equals("wa0_10"))
            {
                goto _wa0_10;
            }
            else if (retvalue.ToLower().Equals("wa0_99_exit"))
            {
                goto _wa0_99_exit;
            }

            retvalue = await wa0_30_oma_refer();
            if (retvalue.ToLower().Equals("wa0_10"))
            {
                goto _wa0_10;
            }

            await wa0_31();

            retvalue = await wa0_40_conseq_sv_date_nbr_1();
            if (retvalue.ToLower().Equals("wa0_10"))
            {
                goto _wa0_10;
            }

            _wa0_90_input_price_for_ic:
            retvalue = await wa0_90_input_price_for_ic();

            if (retvalue.ToLower().Equals("wa0_97_end_of_input_line"))
            {
                goto _wa0_97_end_of_input_line;
            }

            else if (retvalue.ToLower().Equals("wa0_acpt_clmhdr_detail"))
            {
                goto _wa0_acpt_clmhdr_detail;
            }
            else
            {
                retvalue = await wa0_95();
                if (retvalue.ToLower().Equals("wa0_90_input_price_for_ic"))
                {
                    goto _wa0_90_input_price_for_ic;
                }
                else if (retvalue.Equals("wa0_10"))
                {
                    goto _wa0_10;
                }
            }

            _wa0_97_end_of_input_line:
            retvalue = await wa0_97_end_of_input_line();
            if (retvalue.ToLower().Equals("wa0_acpt_clmhdr_detail"))
            {
                goto _wa0_acpt_clmhdr_detail;
            }

            _wa0_98:
            await wa0_98();

            _wa0_99_exit:
            await wa0_99_exit();

            // if err-data then          
            if (flag_err_data.Equals(err_data))
            {
                //   go to va0-99-exit.;
                await va0_99_exit();
                return;
            }

            // if def-agent-ohip or def-agent-alternate-funding  or ( def-agent-ohip-wcb  and site-id = "RMA" )  then   
            if (def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_alternate_funding) || (def_agent_code.Equals(def_agent_ohip_wcb) && site_id == "RMA"))
            {
                //    perform wd0-verify-clmdtl-data  thru wd0-99-exit;
                await wd0_verify_clmdtl_data();
                await wd0_20_verify_hosp_nbr();
                await wd0_30_verify_admit_date();
                await wd0_40_verify_refer_phy();
                await wd0_90_set_ohip_tape_submt_ind();
                await wd0_99_exit();

                //  if err-data  then           
                if (flag_err_data.Equals(err_data))
                    flag_accept = "M";
                else
                {
                    //       next sentence.;
                }
            }
        }

        private async Task va0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "va0_99_exit");

            //     exit.;
        }

        private async Task wa0_acpt_clmhdr_detail()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_acpt_clmhdr_detail");

            flag_err_data = "Y";
            ss_conseq_dd = 0;
            //     add  1                              to ss-clmdtl-oma.;
            ss_clmdtl_oma++;

        }

        private async Task<string> wa0_10()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_10");

            // if ss-clmdtl-oma not = 1 then            
            if (ss_clmdtl_oma != 1)
            {
                //  go to wa0-12.;                
                return "wa0-12";
            }

            // if flag-accept not = "M"  then            
            if (!Util.Str(flag_accept).ToUpper().Equals("M"))
            {
                hold_sv_nbr_serv[ss_clmdtl_oma] = 1;
                clmhdr_date_admit_grp = Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0') + Util.Str(clmhdr_date_admit_mm).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_dd).PadLeft(2, '0');
                hold_sv_date[ss_clmdtl_oma] = clmhdr_date_admit_grp;
                hold_oma_suff[ss_clmdtl_oma] = "A";
                hold_diag_cd[ss_clmdtl_oma] = 0;
                //  perform xa0-display-details     thru xa0-99-exit.;
                await xa0_display_details();
                await xa0_99_exit();
            }

            pline = 11;
            //  display scr-acpt-clmhdr-det.;
            //  accept scr-hold-oma-cd.;            
            await accept_oma_cd();

            // if hold-oma-cd(ss-clmdtl-oma) = spaces then    
            if (string.IsNullOrWhiteSpace(hold_oma_cd[ss_clmdtl_oma]))
            {
                err_ind = 28;
                //     perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //     go to wa0-10;
                await wa0_10();
                return string.Empty;
            }
            else
            {
                // go to wa0-14.;                
                return "wa0_14";
            }

            return string.Empty;
        }

        private async Task<string> wa0_12()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_12");

            // if ss-clmdtl-oma = 2 or 3 or 4 or 5 or 6 or 7 or 8 or 9 or 10 then        
            if (ss_clmdtl_oma == 2 || ss_clmdtl_oma == 3 || ss_clmdtl_oma == 4 || ss_clmdtl_oma == 5 || ss_clmdtl_oma == 6 || ss_clmdtl_oma == 7 || ss_clmdtl_oma == 8 || ss_clmdtl_oma == 9 || ss_clmdtl_oma == 10)
            {
                //    if flag-accept = "M"  then            
                if (flag_accept == "M")
                {
                    //   perform xa0-display-details thru xa0-99-exit;
                    await xa0_display_details();
                    await xa0_99_exit();
                }
                else
                {
                    hold_sv_nbr_serv[ss_clmdtl_oma] = 1;
                    //          subtract 1                  from ss-clmdtl-oma;
                    //                                         giving temp;
                    temp = ss_clmdtl_oma - 1;
                    hold_sv_date[ss_clmdtl_oma] = hold_sv_date[temp];
                    hold_oma_suff[ss_clmdtl_oma] = ws_last_typed_in_suffix;
                    // 	       if site-id = "RMA" then            
                    if (site_id == "RMA")
                    {
                        // 	          if def-agent-in-pat-diag-billing  and ws-last-typed-in-suffix = 'M' then            
                        if (def_agent_code.Equals(def_agent_in_pat_diag_billing) && Util.Str(ws_last_typed_in_suffix).ToUpper().Equals("M"))
                        {
                            //     perform xa0-display-details thru xa0-99-exit;
                            await xa0_display_details();
                            await xa0_99_exit();
                        }
                        else
                        {
                            hold_oma_suff[ss_clmdtl_oma] = "A";
                            // perform xa0-display-details thru xa0-99-exit;
                            await xa0_display_details();
                            await xa0_99_exit();
                        }
                    }
                    else
                    {
                        //   perform xa0-display-details thru xa0-99-exit;
                        await xa0_display_details();
                        await xa0_99_exit();
                    }
                }
            }
            else
            {
                //         go to wa0-98.;                
                return "wa0_98";
            }

            //     accept scr-hold-oma-cd.;            
            //await Prompt("hold_oma_cd[ss_clmdtl_oma]");
            await accept_oma_cd();

            return string.Empty;
        }

        private async Task<string> wa0_14()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_14");

            // if hold-oma-cd (ss-clmdtl-oma) = spaces then
            if (string.IsNullOrWhiteSpace(hold_oma_cd[ss_clmdtl_oma]))
            {
                //         go to wa0-98.;                
                return "wa0_98";
            }

            return string.Empty;
        }

        private async Task<string> wa0_16()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_16");

            hold_line_no[ss_clmdtl_oma] = ss_clmdtl_oma;
            ws_oma_cd_grp = hold_oma_cd[ss_clmdtl_oma];
            ws_oma_cd_1 = ws_oma_cd_grp.PadRight(4, ' ').Substring(0, 1);
            ws_oma_cd_2_4 = Util.Str(ws_oma_cd_grp.PadRight(4, ' ').Substring(1, 3));
            //     perform wb0-read-oma-mstr                   thru wb0-99-exit.;
            await wb0_read_oma_mstr();
            await wb0_99_exit();

            // if not-ok then            
            if (flag.Equals(not_ok))
            {
                err_ind = 28;
                //  perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  go to wa0-10.;                
                return "wa0_10";
            }

            //  if fee-active-for-entry <> "Y" then       
            if (!Util.Str(objFee_mstr_rec.FEE_ACTIVE_FOR_ENTRY).ToUpper().Equals("Y"))
            {
                err_ind = 83;
                //      perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                // go to wa0-10.;                
                return "wa0_10";
            }

            //  if  ( (clmhdr-clinic-nbr-1-2 > "60" and clmhdr-clinic-nbr-1-2 < "67")  or (clmhdr-clinic-nbr-1-2 > "70" and clmhdr-clinic-nbr-1-2 < "76"))  and (  fee-icc-sec =  "CV"  or "SP" )  then            
            if (
                ((Util.NumInt(clmhdr_clinic_nbr_1_2) > 60 && Util.NumInt(clmhdr_clinic_nbr_1_2) < 67) || (Util.NumInt(clmhdr_clinic_nbr_1_2) > 70 && Util.NumInt(clmhdr_clinic_nbr_1_2) < 76)) && (Util.Str(objFee_mstr_rec.FEE_ICC_SEC).ToUpper().Equals("CV") || Util.Str(objFee_mstr_rec.FEE_ICC_SEC).ToUpper().Equals("SP"))
                )
            {
                err_ind = 24;
                //      perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  go to wa0-10.;                
                return "wa0_10";
            }

            //  if ws-oma-cd = "E400"  or "E409" or "E412" or "E401"  or "E410"  or "E413"  or "E420"  then     
            ws_oma_cd_grp = ws_oma_cd_1 + Util.Str(ws_oma_cd_2_4).PadLeft(3, '0');
            if (ws_oma_cd_grp == "E400" || ws_oma_cd_grp == "E409" || ws_oma_cd_grp == "E412" || ws_oma_cd_grp == "E401" || ws_oma_cd_grp == "E410" || ws_oma_cd_grp == "E413" || ws_oma_cd_grp == "E420")
            {
                ws_special_add_on_cd_entered = "Y";
            }

            //  if  not def-agent-ohip and not def-agent-alternate-funding  and (    not def-agent-ohip-wcb  and site-id = "RMA"  )   then            
            if (
                !def_agent_code.Equals(def_agent_ohip) && !def_agent_code.Equals(def_agent_alternate_funding) && (!def_agent_code.Equals(def_agent_ohip_wcb) && site_id == "RMA")
                )
            {
                //  go to wa0-18;                
                return "wa0_18";
            }
            //  else  if   fee-i-o-ind = spaces  or fee-i-o-ind = clmhdr-i-o-pat-ind   or fee-i-o-ind = "B"  or clmhdr-i-o-pat-ind = "B"  then            
            else if (string.IsNullOrWhiteSpace(objFee_mstr_rec.FEE_I_O_IND) || objFee_mstr_rec.FEE_I_O_IND == clmhdr_i_o_pat_ind || objFee_mstr_rec.FEE_I_O_IND == "B" || clmhdr_i_o_pat_ind == "B")
            {
                //         go to wa0-18;                
                return "wa0_18";
            }
            //  else if fee-i-o-ind = 'I'  then            
            else if (Util.Str(objFee_mstr_rec.FEE_I_O_IND).ToUpper().Equals("I"))
            {
                err_ind = 36;
            }
            else
            {
                err_ind = 37;
            }

            // perform za0-common-error                    thru za0-99-exit.;
            await za0_common_error();
            await za0_99_exit();

            flag_err_data = "N";
            flag_accept = "M";
            //  go to wa0-99-exit.;             
            return "wa0_99_exit";

            return string.Empty;
        }

        private async Task<string> wa0_18()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_18");

            // if  ( not def-agent-ohip and not def-agent-ohip-wcb  and not def-agent-alternate-funding and (not def-agent-ohip-wcb  and site-id = "RMA"  ) )            
            //       or ( fee-spec-fr = ws-doc-spec-cd or fee-spec-to = ws-doc-spec-cd or (    fee-spec-fr < ws-doc-spec-cd   and fee-spec-to > ws-doc-spec-cd)) then            
            if (
                 (!def_agent_code.Equals(def_agent_ohip) && !def_agent_code.Equals(def_agent_ohip_wcb) && !def_agent_code.Equals(def_agent_alternate_funding) && (!def_agent_code.Equals(def_agent_ohip_wcb) && site_id == "RMA"))

                || (Util.NumInt(objFee_mstr_rec.FEE_SPEC_FR) == ws_doc_spec_cd || objFee_mstr_rec.FEE_SPEC_TO == ws_doc_spec_cd || (Util.NumInt(objFee_mstr_rec.FEE_SPEC_FR) < ws_doc_spec_cd && Util.NumInt(objFee_mstr_rec.FEE_SPEC_TO) > ws_doc_spec_cd))
                )
            {
                //         next sentence;
            }
            else
            {
                err_ind = 39;
                //      perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                flag_err_data = "N";
                flag_accept = "M";
                // go to wa0-10.;                
                return "wa0_10";
            }

            // if fee-hosp-nbr-ind = "Y"  and loc-hospital-nbr = 0000 then       
            if (Util.Str(objFee_mstr_rec.FEE_HOSP_NBR_IND) == "Y" && Util.NumInt(objLoc_mstr_rec.LOC_HOSPITAL_NBR) == 0)
            {
                err_ind = 11;
                //  perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                flag_err_data = "N";
                flag_accept = "M";
                // go to wa0-10.;                
                return "wa0_10";
            }

            return string.Empty;
        }

        private async Task<string> wa0_20_input_oma_suff_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_20_input_oma_suff_cd");

            // accept scr-hold-oma-suff.;            
            //await Prompt("hold_oma_suff[ss_clmdtl_oma]");
            await accept_oma_suff();

            ws_oma_suff = hold_oma_suff[ss_clmdtl_oma];
            // if  ws-oma-suff = 'A'  or ws-oma-suff = 'B'  or ws-oma-suff = 'C'  or ws-oma-suff = 'M'  then;            
            if (ws_oma_suff == "A" || ws_oma_suff == "B" || ws_oma_suff == "C" || ws_oma_suff == "M")
            {
                ws_last_typed_in_suffix = ws_oma_suff;
            }
            else
            {
                err_ind = 47;
                //  perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  go to wa0-20-input-oma-suff-cd.;
                await wa0_20_input_oma_suff_cd();
                return string.Empty;
            }

            // if hold-oma-cd (ss-clmdtl-oma) = 'J318' or 'J319'  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "J318" || hold_oma_cd[ss_clmdtl_oma] == "J319")
            {
                hold_oma_suff[ss_clmdtl_oma] = "B";
                //      display scr-hold-oma-suff.;
                Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff");
            }

            // if (ws-oma-suff =   "B"   or "C")  and (fee-icc-sec = "CV")  then     
            if (
                (ws_oma_suff == "B" || ws_oma_suff == "C") && (Util.Str(objFee_mstr_rec.FEE_ICC_SEC) == "CV")
                )
            {
                err_ind = 25;
                //  perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //     go to wa0-10.;                
                return "wa0_10";
            }

            //  if (ws-iconst-clinic-card-colour = "O"  and   (  ( (ws-oma-suff =   "B"  or "A") and (fee-icc-sec =   "DU"  or "PF"  or "NM"))  or  fee-tech-ind = "Y"  )  )  then      
            if (
                (ws_iconst_clinic_card_colour == "O" && (((ws_oma_suff == "B" || ws_oma_suff == "A") && (Util.Str(objFee_mstr_rec.FEE_ICC_SEC) == "DU" || Util.Str(objFee_mstr_rec.FEE_ICC_SEC) == "PF" || Util.Str(objFee_mstr_rec.FEE_ICC_SEC) == "NM")) || Util.Str(objFee_mstr_rec.FEE_TECH_IND) == "Y"))
                )
            {
                err_ind = 110;
                //         perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  go to wa0-10.;                
                return "wa0_10";
            }

            // if hold-oma-cd-alpha (ss-clmdtl-oma) = "K" and hold-oma-suff (ss-clmdtl-oma) = "C"  then            
            if (Util.Str(hold_oma_cd_alpha[ss_clmdtl_oma]) == "K" && Util.Str(hold_oma_suff[ss_clmdtl_oma]) == "C")
            {
                err_ind = 177;
                //      perform za0-common-error            thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // 	    go to wa0-10.;                
                return "wa0_10";
            }
            return string.Empty;
        }

        private async Task wa0_25_input_diag_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_25_input_diag_cd");

            // perform ha0-acpt-diag-cd                    thru ha0-99-exit.;
            await ha0_acpt_diag_cd();
            await ha0_99_exit();

            // if (ws-oma-suff = "A" or "M") and  hold-diag-cd(ss-clmdtl-oma) = zero   and  fee-diag-ind = "Y"  and  (   def-agent-ohip  or def-agent-alternate-funding  or ( def-agent-ohip-wcb  and site-id = "RMA" )  )  then            
            if (
                 (ws_oma_suff == "A" || ws_oma_suff == "M") && hold_diag_cd[ss_clmdtl_oma] == 0 && objFee_mstr_rec.FEE_DIAG_IND == "Y" && (def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_alternate_funding) || (def_agent_code.Equals(def_agent_ohip_wcb) && site_id == "RMA"))
                )
            {
                flag_diag_code_required = "Y";
                err_ind = 8;
                //   perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  perform ha0-acpt-diag-cd        thru ha0-99-exit;
                await ha0_acpt_diag_cd();
                await ha0_99_exit();

                //  go to wa0-25-input-diag-cd.;
                await wa0_25_input_diag_cd();
                return;
            }
        }

        private async Task<string> wa0_30_orig_sv_date_nbr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_30_orig_sv_date_nbr");

            //     accept scr-hold-sv-date-yy-34.;                        
            await accept_hold_sv_date_yy_34();
            hold_sv_date_yy[ss_clmdtl_oma] = hold_sv_date_yy_34[ss_clmdtl_oma];

            hold_sv_date_yy_12[ss_clmdtl_oma] = 0;
            century_year = hold_sv_date_yy[ss_clmdtl_oma];
            //     perform y2k-add-century-to-year     thru y2k-99-exit.;
            await y2k_add_century_to_year();
            await y2k_99_exit();

            hold_sv_date_yy[ss_clmdtl_oma] = century_year;

            //     display scr-hold-sv-date-yy-12.;
            await display_hold_sv_date_yy_12_1(ss_clmdtl_oma, ss_clmdtl_oma);

            //     accept scr-hold-sv-date-mm.;                        
            await accept_hold_sv_date_mm();

            //     accept scr-hold-sv-date-dd.;                        
            await accept_hold_sv_date_dd();


            //     accept scr-hold-sv-nbr-0.;                        
            await accept_hold_sv_nbr_serv();

            hold_sv_date[ss_clmdtl_oma] = Util.Str(hold_sv_date_yy[ss_clmdtl_oma]).PadLeft(4, '0') + Util.Str(hold_sv_date_mm[ss_clmdtl_oma]).PadLeft(2, '0') + Util.Str(hold_sv_date_dd[ss_clmdtl_oma]).PadLeft(2, '0');
            ws_date_grp = hold_sv_date[ss_clmdtl_oma];
            ws_yy = Util.NumInt(Util.Str(ws_date_grp).PadLeft(8, '0').Substring(0, 4));
            ws_mm = Util.NumInt(Util.Str(ws_date_grp).PadLeft(8, '0').Substring(4, 2));
            ws_dd = Util.NumInt(Util.Str(ws_date_grp).PadLeft(8, '0').Substring(6, 2));

            //     perform ba1-verify-mm-dd                    thru ba1-99-exit.;
            await ba1_verify_mm_dd();
            await ba1_99_exit();

            // if not-ok then            
            if (flag.Equals(not_ok))
            {
                err_ind = 5;
                //     perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //     go to wa0-30-orig-sv-date-nbr.;
                string retvalue = await wa0_30_orig_sv_date_nbr();
                if (retvalue.ToLower().Equals("wa0_10"))
                {
                    return "wa0_10";
                }
                else
                {
                    return string.Empty;
                }
            }

            // if  hold-sv-date(ss-clmdtl-oma) > sys-date then            
            if (Util.NumInt(hold_sv_date[ss_clmdtl_oma]) > Util.NumInt(sys_date_long_child))
            {
                err_ind = 6;
                //       perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //       go to wa0-30-orig-sv-date-nbr.;
                string retvalue = await wa0_30_orig_sv_date_nbr();
                if (retvalue.ToLower().Equals("wa0_10"))
                {
                    return "wa0_10";
                }
                else
                {
                    return string.Empty;
                }
            }

            // if hold-sv-date (ss-clmdtl-oma) < clmhdr-date-admit then            
            clmhdr_date_admit_grp = Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0') + Util.Str(clmhdr_date_admit_mm).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_dd).PadLeft(2, '0');
            if (Util.NumInt(hold_sv_date[ss_clmdtl_oma]) < Util.NumInt(clmhdr_date_admit_grp))
            {
                err_ind = 33;
                //         perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //         go to wa0-30-orig-sv-date-nbr.;
                string retvalue = await wa0_30_orig_sv_date_nbr();
                if (retvalue.ToLower().Equals("wa0_10"))
                {
                    return "wa0_10";
                }
                else
                {
                    return string.Empty;
                }
            }

            //     perform wa3-verify-serv-sys-dates           thru wa3-99-exit.;
            await wa3_verify_serv_sys_dates();
            await wa3_99_exit();

            //  if not-ok then            
            if (flag.Equals(not_ok))
            {

                //      perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //     go to wa0-10.;               
                return "wa0_10";
            }

            // if hold-sv-date(ss-clmdtl-oma) > '19910630'  and ws-pat-health-nbr = 0   and ws-pat-prov-cd    = "ON"  and (   def-agent-ohip  or def-agent-alternate-funding   or ( def-agent-ohip-wcb 	and site-id = "RMA"  )  )   then;            
            if (
                 Util.NumInt(hold_sv_date[ss_clmdtl_oma]) > 19910630 && ws_pat_health_nbr == 0 && ws_pat_prov_cd == "ON" && (def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_alternate_funding) || (def_agent_code.Equals(def_agent_ohip_wcb) && site_id == "RMA"))
                )
            {
                err_ind = 70;
                //     perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                flag_accept = "";
                flag_err_data = "N";
                //     go to wa0-99-exit.;               
                return "wa0_99_exit";
            }

            //  if  hold-sv-nbr-serv ( ss-clmdtl-oma ) = zero and ws-oma-cd not = "E400"  and ws-oma-cd not = "E401"   then            
            ws_oma_cd_grp = Util.Str(ws_oma_cd_1) + Util.Str(ws_oma_cd_2_4).PadLeft(3, '0');
            if (
                hold_sv_nbr_serv[ss_clmdtl_oma] == 0 && ws_oma_cd_grp != "E400" && ws_oma_cd_grp != "E401"
                )
            {
                err_ind = 1;
                //      perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //      go to wa0-10.;               
                return "wa0_10";
            }

            temp_ss = hold_sv_date_mm[ss_clmdtl_oma];

            //  if hold-oma-suff ( ss-clmdtl-oma )  = "A";
            if (hold_oma_suff[ss_clmdtl_oma] == "A")
            {
                //      if  hold-sv-date-dd  ( ss-clmdtl-oma ) + hold-sv-nbr-serv ( ss-clmdtl-oma )  - 1   > max-nbr-days (temp-ss)  then            
                if (
                    hold_sv_date_dd[ss_clmdtl_oma] + hold_sv_nbr_serv[ss_clmdtl_oma] - 1 > max_nbr_days[temp_ss]
                    )
                {
                    err_ind = 32;
                    //        perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //           go to wa0-10.;                   
                    return "wa0_10";
                }
            }

            //  if   (     (     (   hold-oma-cd (ss-clmdtl-oma) = 'E722';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 1;
            //                 );
            //             or;
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E010';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E604';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E956';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E022';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 2;
            //                 );
            //             or;
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E667';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 3;
            //                 );
            //             or;
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E011';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E020';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E024';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 4;
            //                 );
            //             or;
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E012';
            // 			or (     hold-oma-cd (ss-clmdtl-oma) >= 'E137';
            // 			     and hold-oma-cd (ss-clmdtl-oma) <= 'E141';
            // 			   );
            // 			or (     hold-oma-cd (ss-clmdtl-oma) >= 'E143';
            // 			     and hold-oma-cd (ss-clmdtl-oma) <= 'E147';
            // 			   );
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'E149';
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'Z606';
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'Z607';
            // 			or (     hold-oma-cd (ss-clmdtl-oma) >= 'Z491';
            // 			     and hold-oma-cd (ss-clmdtl-oma) <= 'Z499';
            // 			   );
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'Z555';
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'Z580';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 5;
            //                 );
            //             or;
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'P014';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 6;
            //                 );
            //             or;
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E676';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'B';
            // 	         and  hold-sv-date (ss-clmdtl-oma) >= fee-effective-date;
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 6;
            //                 );
            //             or;
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E021';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 4;
            //                 );
            //             or;
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E017';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E025';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 10;
            //                 );
            //             or;
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E016';
            //                       );
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 20;
            //                 );
            //          );
            //     then;


            //  if   (     (     (   hold-oma-cd (ss-clmdtl-oma) = 'E722';
            if (
                (((hold_oma_cd[ss_clmdtl_oma] == "E722"
            //                       );
               )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
                 && hold_oma_suff[ss_clmdtl_oma] == "C"
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 1;
                 && hold_sv_nbr_serv[ss_clmdtl_oma] != 1
            //                 );
                               )
            //             or;
                           ||
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E010';
                               ((hold_oma_cd[ss_clmdtl_oma] == "E010"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E604';
                                      || hold_oma_cd[ss_clmdtl_oma] == "E604"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E956';
                                      || hold_oma_cd[ss_clmdtl_oma] == "E956"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E022';
                                      || hold_oma_cd[ss_clmdtl_oma] == "E022"
                                     //                       );
                                     )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
                                && hold_oma_suff[ss_clmdtl_oma] == "C"
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 2;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] != 2
            //                 );
                               )
            //             or;
                           ||
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E667';
                               ((hold_oma_cd[ss_clmdtl_oma] == "E667"
            //                       );
                                     )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
                                && hold_oma_suff[ss_clmdtl_oma] == "C"
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 3;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] != 3
            //                 );
                              )
                           //             or;
                           ||
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E011';
                               ((hold_oma_cd[ss_clmdtl_oma] == "E011"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E020';
                                      || hold_oma_cd[ss_clmdtl_oma] == "E020"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E024';
                                      || hold_oma_cd[ss_clmdtl_oma] == "E024"
            //                       );
                                     )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
                                && hold_oma_suff[ss_clmdtl_oma] == "C"
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 4;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] != 4
            //                 );
                               )
            //             or;
                           ||
                               //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E012';
                               ((hold_oma_cd[ss_clmdtl_oma] == "E012"
            // 			or (     hold-oma-cd (ss-clmdtl-oma) >= 'E137';
                        || (hold_oma_cd[ss_clmdtl_oma].CompareTo("E137") >= 0
            // 			     and hold-oma-cd (ss-clmdtl-oma) <= 'E141';
                             && hold_oma_cd[ss_clmdtl_oma].CompareTo("E141") <= 0
            // 			   );
                           )
            // 			or (     hold-oma-cd (ss-clmdtl-oma) >= 'E143';
                        || (hold_oma_cd[ss_clmdtl_oma].CompareTo("E143") >= 0
            // 			     and hold-oma-cd (ss-clmdtl-oma) <= 'E147';
                             && hold_oma_cd[ss_clmdtl_oma].CompareTo("E147") <= 0
            // 			   );
                           )
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'E149';
                                       || hold_oma_cd[ss_clmdtl_oma] == "E149"
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'Z606';
                                       || hold_oma_cd[ss_clmdtl_oma] == "Z606"
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'Z607';
                                       || hold_oma_cd[ss_clmdtl_oma] == "Z607"
            // 			or (     hold-oma-cd (ss-clmdtl-oma) >= 'Z491';
                        || (hold_oma_cd[ss_clmdtl_oma].CompareTo("Z491") >= 0
            // 			     and hold-oma-cd (ss-clmdtl-oma) <= 'Z499';
                             && hold_oma_cd[ss_clmdtl_oma].CompareTo("Z499") <= 0
            // 			   );
                           )
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'Z555';
                                       || hold_oma_cd[ss_clmdtl_oma] == "Z555"
            //                         or hold-oma-cd (ss-clmdtl-oma) = 'Z580';
                                       || hold_oma_cd[ss_clmdtl_oma] == "Z580"
            //                       );
                                     )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
                                && hold_oma_suff[ss_clmdtl_oma] == "C"
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 5;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] != 5
            //                 );
                               )
            //             or;
                           ||
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'P014';
                               ((hold_oma_cd[ss_clmdtl_oma] == "P014"
            //                       );
                                     )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
                                && hold_oma_suff[ss_clmdtl_oma] == "C"
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 6;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] != 6
            //                 );
                               )
            //             or;
                           ||
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E676';
                               ((hold_oma_cd[ss_clmdtl_oma] == "E676"
            //                       );
                                     )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'B';
                                && hold_oma_suff[ss_clmdtl_oma] == "B"
            // 	         and  hold-sv-date (ss-clmdtl-oma) >= fee-effective-date;
                         && Util.NumInt(hold_sv_date[ss_clmdtl_oma]) >= Util.NumInt(Util.Str(objFee_mstr_rec.FEE_DATE_YY) + Util.Str(objFee_mstr_rec.FEE_DATE_MM) + Util.Str(objFee_mstr_rec.FEE_DATE_DD))   // _ef fee - effective - date;
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 6;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] != 6
            //                 );
                               )
            //             or;
                           ||
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E021';
                               ((hold_oma_cd[ss_clmdtl_oma] == "E021"
            //                       );
                                     )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
                                && hold_oma_suff[ss_clmdtl_oma] == "C"
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 4;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] != 4
            //                 );
                               )
            //             or;
                           ||
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E017';
                               ((hold_oma_cd[ss_clmdtl_oma] == "E017"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E025';
                                      || hold_oma_cd[ss_clmdtl_oma] == "E025"
            //                       );
                                     )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
                                && hold_oma_suff[ss_clmdtl_oma] == "C"
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 10;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] != 10
            //                 );
                               )
            //             or;
                           ||
            //                 (     (   hold-oma-cd (ss-clmdtl-oma) = 'E016';
                               ((hold_oma_cd[ss_clmdtl_oma] == "E016"
            //                       );
                                     )
            //                  and  hold-oma-suff  (ss-clmdtl-oma) = 'C';
                                && hold_oma_suff[ss_clmdtl_oma] == "C"
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) not = 20;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] != 20
            //                 );
                               )
            //          );
                        )
            //     then;
            )
            {
                err_ind = 119;
                //  perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //   go to wa0-10.;               
                return "wa0_10";
            }

            //      if   (     (    (    hold-oma-cd (ss-clmdtl-oma) = 'G123';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E719';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'G060';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'G061';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'J022';
            //                      );
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 4;
            //                 );
            //             or;
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'G265';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G292';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E837';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G285';
            //                      );
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 3;
            //                 );
            //             or;
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'G385';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E720';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G218';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G219';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'H104';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'H134';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'H124';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'H154';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G480';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G482';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G483';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G372';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'G297';
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'G250';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E542';
            //                      );
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 2;
            //                 );
            //             or;
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'E702';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E717';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G220';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G291';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G286';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G700';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'Z546';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'Z566';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G395';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G523';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G443';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G530';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E082';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E083';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E409';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E410';
            //                       or (    hold-oma-cd (ss-clmdtl-oma) = 'Z441';
            // 	                  and hold-oma-suff (ss-clmdtl-oma) = 'A';
            // 			);
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G370';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G328';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G420';
            //   		      or (    hold-oma-cd (ss-clmdtl-oma) = 'E158';
            //                           and hold-oma-suff(ss-clmdtl-oma) = 'A';
            //                          );
            //                       or (    hold-oma-cd (ss-clmdtl-oma) = 'E159';
            //                           and hold-oma-suff(ss-clmdtl-oma) = 'A';
            //                          );
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'J021';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'J025';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G521';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G244';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G246';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G240';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G384';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G379';
            //                      );
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 1;
            //                 );
            //             or;
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'G221';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G489';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G371';
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E396';
            //                      );
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 5;
            //                 );
            //             or;
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'K630';
            //                      );
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 6;
            //                 );
            //          );
            //     then;

            //      if   (     (    (    hold-oma-cd (ss-clmdtl-oma) = 'G123';
            if (
                (((hold_oma_cd[ss_clmdtl_oma] == "G123"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'E719';
                                      || hold_oma_cd[ss_clmdtl_oma] == "E719"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'G060';
                                      || hold_oma_cd[ss_clmdtl_oma] == "G060"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'G061';
                                      || hold_oma_cd[ss_clmdtl_oma] == "G061"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'J022';
                                      || hold_oma_cd[ss_clmdtl_oma] == "J022"
            //                      );
                                    )
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 4;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] > 4
            //                 );
                               )
                          //             or;
                          ||
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'G265';
                               ((hold_oma_cd[ss_clmdtl_oma] == "G265"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G292';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G292"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E837';
                                     || hold_oma_cd[ss_clmdtl_oma] == "E837"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G285';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G285"
            //                      );
                                    )
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 3;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] > 3
            //                 );
                               )
            //             or;
                           ||
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'G385';
                               ((hold_oma_cd[ss_clmdtl_oma] == "G385"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E720';
                               || hold_oma_cd[ss_clmdtl_oma] == "E720"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G218';
                               || hold_oma_cd[ss_clmdtl_oma] == "G218"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G219';
                                || hold_oma_cd[ss_clmdtl_oma] == "G219"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'H104';
                                || hold_oma_cd[ss_clmdtl_oma] == "H104"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'H134';
                                || hold_oma_cd[ss_clmdtl_oma] == "H134"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'H124';
                                || hold_oma_cd[ss_clmdtl_oma] == "H124"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'H154';
                                || hold_oma_cd[ss_clmdtl_oma] == "H154"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G480';
                                || hold_oma_cd[ss_clmdtl_oma] == "G480"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G482';
                                || hold_oma_cd[ss_clmdtl_oma] == "G482"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G483';
                                || hold_oma_cd[ss_clmdtl_oma] == "G483"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G372';
                                || hold_oma_cd[ss_clmdtl_oma] == "G372"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'G297';
                                || hold_oma_cd[ss_clmdtl_oma] == "G297"
            //                        or hold-oma-cd (ss-clmdtl-oma) = 'G250';
                                || hold_oma_cd[ss_clmdtl_oma] == "G250"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E542';
                                || hold_oma_cd[ss_clmdtl_oma] == "E542"
            //                      );
                                    )
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 2;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] > 2
            //                 );
                               )
            //             or;
                           ||
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'E702';
                               ((hold_oma_cd[ss_clmdtl_oma] == "E702"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E717';
                               || hold_oma_cd[ss_clmdtl_oma] == "E717"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G220';
                               || hold_oma_cd[ss_clmdtl_oma] == "G220"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G291';
                               || hold_oma_cd[ss_clmdtl_oma] == "G291"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G286';
                               || hold_oma_cd[ss_clmdtl_oma] == "G286"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G700';
                               || hold_oma_cd[ss_clmdtl_oma] == "G700"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'Z546';
                               || hold_oma_cd[ss_clmdtl_oma] == "Z546"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'Z566';
                               || hold_oma_cd[ss_clmdtl_oma] == "Z566"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G395';
                               || hold_oma_cd[ss_clmdtl_oma] == "G395"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G523';
                               || hold_oma_cd[ss_clmdtl_oma] == "G523"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G443';
                               || hold_oma_cd[ss_clmdtl_oma] == "G443"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G530';
                               || hold_oma_cd[ss_clmdtl_oma] == "G530"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E082';
                               || hold_oma_cd[ss_clmdtl_oma] == "E082"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E083';
                               || hold_oma_cd[ss_clmdtl_oma] == "E083"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E409';
                               || hold_oma_cd[ss_clmdtl_oma] == "E409"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E410';
                               || hold_oma_cd[ss_clmdtl_oma] == "E410"
            //                       or (    hold-oma-cd (ss-clmdtl-oma) = 'Z441';
                               || (hold_oma_cd[ss_clmdtl_oma] == "Z441"
            // 	                  and hold-oma-suff (ss-clmdtl-oma) = 'A';
                               && hold_oma_suff[ss_clmdtl_oma] == "A"
            // 			);
                        )
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G370';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G370"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G328';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G328"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G420';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G420"
            //   		      or (    hold-oma-cd (ss-clmdtl-oma) = 'E158';
                              || (hold_oma_cd[ss_clmdtl_oma] == "E158"
            //                           and hold-oma-suff(ss-clmdtl-oma) = 'A';
                                         && hold_oma_suff[ss_clmdtl_oma] == "A"
            //                          );
                                        )
            //                       or (    hold-oma-cd (ss-clmdtl-oma) = 'E159';
                                     || (hold_oma_cd[ss_clmdtl_oma] == "E159"
            //                           and hold-oma-suff(ss-clmdtl-oma) = 'A';
                                         && hold_oma_suff[ss_clmdtl_oma] == "A"
            //                          );
                                        )
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'J021';
                                     || hold_oma_cd[ss_clmdtl_oma] == "J021"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'J025';
                                     || hold_oma_cd[ss_clmdtl_oma] == "J025"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G521';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G521"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G244';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G244"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G246';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G246"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G240';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G240"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G384';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G384"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G379';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G379"
            //                      );
                                    )
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 1;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] > 1
            //                 );
                               )
                           //             or;
                           ||
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'G221';
                               ((hold_oma_cd[ss_clmdtl_oma] == "G221"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G489';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G489"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'G371';
                                     || hold_oma_cd[ss_clmdtl_oma] == "G371"
            //                       or hold-oma-cd (ss-clmdtl-oma) = 'E396';
                                     || hold_oma_cd[ss_clmdtl_oma] == "E396"
            //                      );
                                    )
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 5;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] > 5
            //                 );
                               )
            //             or;
                           ||
            //                 (    (   hold-oma-cd (ss-clmdtl-oma) = 'K630';
                               ((hold_oma_cd[ss_clmdtl_oma] == "K630"
            //                      );
                                    )
            //                  and  hold-sv-nbr-serv (ss-clmdtl-oma) > 6;
                                && hold_sv_nbr_serv[ss_clmdtl_oma] > 6
            //                 );
                               )
            //          );
                        )
            //     then;
            )
            {
                err_ind = 130;
                //  perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //         go to wa0-10.;                
                return "wa0_10";
            }

            //  if  ws-doc-spec-cd = "26" and hold-oma-cd (ss-clmdtl-oma) = "A007" then       
            if (Util.NumInt(ws_doc_spec_cd) == 26 && hold_oma_cd[ss_clmdtl_oma] == "A007")
            {
                err_ind = 134;
                //   perform za0-common-error            thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //   go to wa0-10.;                
                return "wa0_10";
            }

            // if hold-oma-cd(ss-clmdtl-oma) = 'G489' or 'S323' then     
            if (hold_oma_cd[ss_clmdtl_oma] == "G489" || hold_oma_cd[ss_clmdtl_oma] == "S323")
            {
                ws_sv_date = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_birth_date = ws_pat_birth_date;
                //     compute date-difference-in-days = (ws-sv-date - ws-birth-date) / 10000;
                date_difference_in_days = (ws_sv_date - ws_birth_date) / 10000;
                //     if  date-difference-in-days < 16 then            
                if (date_difference_in_days < 16)
                {
                    err_ind = 145;
                    //  perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	 go to wa0-10.;                   
                    return "wa0_10";
                }
            }

            // if   hold-oma-cd(ss-clmdtl-oma) = 'S322' or 'S326' or 'E423' then            
            if (hold_oma_cd[ss_clmdtl_oma] == "S322" || hold_oma_cd[ss_clmdtl_oma] == "S326" || hold_oma_cd[ss_clmdtl_oma] == "E423")
            {
                ws_sv_date = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_birth_date = ws_pat_birth_date;
                //        compute date-difference-in-days = (ws-sv-date - ws-birth-date) / 10000;
                date_difference_in_days = (ws_sv_date - ws_birth_date) / 10000;
                //        if  date-difference-in-days > 15 then;            
                if (date_difference_in_days > 15)
                {
                    err_ind = 149;
                    //   perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	          go to wa0-10.;                    
                    return "wa0_10";
                }
            }

            // if  hold-oma-cd(ss-clmdtl-oma) = 'H267' then   
            if (hold_oma_cd[ss_clmdtl_oma] == "H267")
            {
                ws_sv_date = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_birth_date = ws_pat_birth_date;
                // if    ws-sv-date not = ws-birth-date then            
                if (ws_sv_date != ws_birth_date)
                {
                    err_ind = 150;
                    //          perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	        go to wa0-10.;                   
                    return "wa0_10";
                }
            }

            hold_oma_cd_alpha[ss_clmdtl_oma] = Util.Str(hold_oma_cd[ss_clmdtl_oma]).PadRight(4, ' ').Substring(0, 1);
            // if  ( hold-oma-cd-alpha(ss-clmdtl-oma) =   "G" or hold-oma-cd(ss-clmdtl-oma) = 'E409'  or hold-oma-cd(ss-clmdtl-oma) = 'E410'  or hold-oma-cd(ss-clmdtl-oma) = 'E111'  )  and hold-oma-suff  (ss-clmdtl-oma) =  "C"            
            //        and ( (hold-oma-cd (ss-clmdtl-oma) not = "G431" and hold-oma-cd (ss-clmdtl-oma) not = "G478"  and hold-oma-cd (ss-clmdtl-oma) not = "G479")  or hold-oma-suff (ss-clmdtl-oma) not = "C" )  then            
            if (
                (hold_oma_cd_alpha[ss_clmdtl_oma] == "G" || hold_oma_cd[ss_clmdtl_oma] == "E409" || hold_oma_cd[ss_clmdtl_oma] == "E410" || hold_oma_cd[ss_clmdtl_oma] == "E111") && hold_oma_suff[ss_clmdtl_oma] == "C"
                    && ((hold_oma_cd[ss_clmdtl_oma] != "G431" && hold_oma_cd[ss_clmdtl_oma] != "G478" && hold_oma_cd[ss_clmdtl_oma] != "G479") || hold_oma_suff[ss_clmdtl_oma] != "C")
                )
            {
                err_ind = 153;
                //           perform za0-common-error            thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // 	         go to wa0-10.;                
                return "wa0_10";
            }

            //   if   hold-oma-cd(ss-clmdtl-oma) = 'A765' or 'C765' then;            
            if (hold_oma_cd[ss_clmdtl_oma] == "A765" || hold_oma_cd[ss_clmdtl_oma] == "C765")
            {
                ws_sv_date = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_birth_date = ws_pat_birth_date;
                //     compute date-difference-in-days = (ws-sv-date - ws-birth-date) / 10000;
                date_difference_in_days = (ws_sv_date - ws_birth_date) / 10000;
                //     if  date-difference-in-days > 16  then            
                if (date_difference_in_days > 16)
                {
                    err_ind = 154;
                    //            perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	          go to wa0-10.;                    
                    return "wa0_10";
                }
            }

            //  if  ws-doc-spec-cd = 7 then            
            if (ws_doc_spec_cd == 7)
            {
                ws_sv_date = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_birth_date = ws_pat_birth_date;
                //      compute date-difference-in-days = (ws-sv-date - ws-birth-date) / 10000;
                date_difference_in_days = (ws_sv_date - ws_birth_date) / 10000;
                //      if  (hold-oma-cd(ss-clmdtl-oma) = 'A775' or 'W775' or 'C775') and date-difference-in-days < 65  and hold-diag-cd (ss-clmdtl-oma) not = 290  then                
                if (
                     (hold_oma_cd[ss_clmdtl_oma] == "A775" || hold_oma_cd[ss_clmdtl_oma] == "W775" || hold_oma_cd[ss_clmdtl_oma] == "C775") && date_difference_in_days < 65 && hold_diag_cd[ss_clmdtl_oma] != 290
                    )
                {
                    err_ind = 155;
                    //           perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	         go to wa0-10.;                   
                    return "wa0_10";
                }
            }

            // if  ws-doc-spec-cd = 19 then            
            if (ws_doc_spec_cd == 19)
            {
                ws_sv_date = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_birth_date = ws_pat_birth_date;
                //       compute date-difference-in-days = (ws-sv-date - ws-birth-date) / 10000;
                date_difference_in_days = (ws_sv_date - ws_birth_date) / 10000;
                //       if (hold-oma-cd(ss-clmdtl-oma) = 'A191' or 'A192')  and date-difference-in-days < 65  and hold-diag-cd (ss-clmdtl-oma) not = 290 then                
                if (
                     (hold_oma_cd[ss_clmdtl_oma] == "A191" || hold_oma_cd[ss_clmdtl_oma] == "A192") && date_difference_in_days < 65 && hold_diag_cd[ss_clmdtl_oma] != 290
                    )
                {
                    err_ind = 155;
                    //             perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	           go to wa0-10.;                    
                    return "wa0_10";
                }
            }

            // if  hold-oma-cd(ss-clmdtl-oma) = 'A197' or 'A198' then;            
            if (hold_oma_cd[ss_clmdtl_oma] == "A197" || hold_oma_cd[ss_clmdtl_oma] == "A198")
            {
                ws_sv_date = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_birth_date = ws_pat_birth_date;
                //      compute date-difference-in-days = (ws-sv-date - ws-birth-date) / 10000;
                date_difference_in_days = (ws_sv_date - ws_birth_date) / 10000;
                //      if  date-difference-in-days > 21 then            
                if (date_difference_in_days > 21)
                {
                    err_ind = 173;
                    //           perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	         go to wa0-10.;                    
                    return "wa0_10";
                }
            }

            //  if  hold-oma-cd(ss-clmdtl-oma) = 'K704' then            
            if (hold_oma_cd[ss_clmdtl_oma] == "K704")
            {
                ws_sv_date = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_birth_date = ws_pat_birth_date;
                //        compute date-difference-in-days = (ws-sv-date - ws-birth-date) / 10000;
                date_difference_in_days = (ws_sv_date - ws_birth_date) / 10000;
                //  if  date-difference-in-days > 18 then            
                if (date_difference_in_days > 18)
                {
                    err_ind = 173;
                    //             perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    // 	           go to wa0-10.;                    
                    return "wa0_10";
                }
            }
            return string.Empty;
        }

        private async Task<string> wa0_30_oma_refer()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_30_oma_refer");

            // if  hold-oma-cd(ss-clmdtl-oma) = 'A253'  or hold-oma-cd(ss-clmdtl-oma) = 'A256'  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "A253" || hold_oma_cd[ss_clmdtl_oma] == "A256")
            {
                ws_chk_nbr = clmhdr_refer_doc_nbr;
                //  if ws-chk-nbr-3  not = 8  then            
                if (ws_chk_nbr_3 != 8)
                {
                    err_ind = 159;
                    //        perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //        perform ga0-acpt-refer-doc         thru ga0-99-exit;
                    await ga0_acpt_refer_doc();
                    await ga0_99_exit();
                    // 	 go to wa0-10.;                    
                    return "wa0_10";
                }
            }

            //      if    hold-oma-cd(ss-clmdtl-oma) = 'A813';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'A815';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'C813';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'C815';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'A800';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'C800';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'A801';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'C801';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'A802';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'C802';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'K224';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'A816';
            //         or hold-oma-cd(ss-clmdtl-oma) = 'C816';
            //      then;
            if (
                  hold_oma_cd[ss_clmdtl_oma] == "A813"
                     || hold_oma_cd[ss_clmdtl_oma] == "A815"
                     || hold_oma_cd[ss_clmdtl_oma] == "C813"
                     || hold_oma_cd[ss_clmdtl_oma] == "C815"
                     || hold_oma_cd[ss_clmdtl_oma] == "A800"
                     || hold_oma_cd[ss_clmdtl_oma] == "C800"
                     || hold_oma_cd[ss_clmdtl_oma] == "A801"
                     || hold_oma_cd[ss_clmdtl_oma] == "C801"
                     || hold_oma_cd[ss_clmdtl_oma] == "A802"
                     || hold_oma_cd[ss_clmdtl_oma] == "C802"
                     || hold_oma_cd[ss_clmdtl_oma] == "K224"
                     || hold_oma_cd[ss_clmdtl_oma] == "A816"
                     || hold_oma_cd[ss_clmdtl_oma] == "C816"
                )
            {
                ws_chk_nbr = clmhdr_refer_doc_nbr;
                // if ws-chk-nbr-3  not = 7 then            
                if (ws_chk_nbr_3 != 7)
                {
                    err_ind = 160;
                    //             perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //             perform ga0-acpt-refer-doc         thru ga0-99-exit;
                    await ga0_acpt_refer_doc();
                    await ga0_99_exit();
                    // 	           go to wa0-10.;                    
                    return "wa0_10";
                }
            }

            // if ( hold-oma-cd(ss-clmdtl-oma) = 'Z176' or hold-oma-cd(ss-clmdtl-oma) = 'Z154'  ) and  hold-oma-suff(ss-clmdtl-oma) = 'A'  and  clmhdr-manual-review not = 'Y'   and  hold-sv-nbr-serv (ss-clmdtl-oma) > 5   then            
            if (
                (hold_oma_cd[ss_clmdtl_oma] == "Z176" || hold_oma_cd[ss_clmdtl_oma] == "Z154") && hold_oma_suff[ss_clmdtl_oma] == "A" && clmhdr_manual_review != "Y" && hold_sv_nbr_serv[ss_clmdtl_oma] > 5
                )
            {
                err_ind = 163;
                //      perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            //  if  ( hold-oma-cd(ss-clmdtl-oma) = 'Z175';
            if (
                (hold_oma_cd[ss_clmdtl_oma] == "Z175"
                 //             or hold-oma-cd(ss-clmdtl-oma) = 'Z177';
                 || hold_oma_cd[ss_clmdtl_oma] == "Z177"
                 //             or hold-oma-cd(ss-clmdtl-oma) = 'Z179';
                 || hold_oma_cd[ss_clmdtl_oma] == "Z179"
                 //             or hold-oma-cd(ss-clmdtl-oma) = 'Z190';
                 || hold_oma_cd[ss_clmdtl_oma] == "Z190"
                 //             or hold-oma-cd(ss-clmdtl-oma) = 'Z191';
                 || hold_oma_cd[ss_clmdtl_oma] == "Z191"
                 //             or hold-oma-cd(ss-clmdtl-oma) = 'Z192';
                 || hold_oma_cd[ss_clmdtl_oma] == "Z192"
                             //           );
                             )
                         //       and  hold-oma-suff(ss-clmdtl-oma) = 'A';
                         && hold_oma_suff[ss_clmdtl_oma] == "A"
                         //       and  clmhdr-manual-review not = 'Y';
                         && clmhdr_manual_review != "Y"
                         //       and  hold-sv-nbr-serv (ss-clmdtl-oma) > 1;
                         && hold_sv_nbr_serv[ss_clmdtl_oma] > 1
                //      then;
                )
            {
                err_ind = 164;
                //  perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }


            // if  ( hold-oma-cd(ss-clmdtl-oma) = 'G231' or hold-oma-cd(ss-clmdtl-oma) = 'G223'  or hold-oma-cd(ss-clmdtl-oma) = 'Z228'  ) and  hold-sv-nbr-serv (ss-clmdtl-oma) > 1 and  clmhdr-manual-review not = 'Y'  then
            if (
                (hold_oma_cd[ss_clmdtl_oma] == "G231" || hold_oma_cd[ss_clmdtl_oma] == "G223" || hold_oma_cd[ss_clmdtl_oma] == "Z228") && hold_sv_nbr_serv[ss_clmdtl_oma] > 1 && clmhdr_manual_review != "Y"
                )
            {
                err_ind = 187;
                //       perform za0-common-error            thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            // if ( hold-oma-cd(ss-clmdtl-oma) = 'G571'  or hold-oma-cd(ss-clmdtl-oma) = 'G581'  ) and  clmhdr-loc of claim-header-rec = 'G430' and  clmhdr-date-admit = zeros or spaces then
            clmhdr_date_admit_grp = Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0') + Util.Str(clmhdr_date_admit_mm).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_dd).PadLeft(2, '0');
            if (
                (hold_oma_cd[ss_clmdtl_oma] == "G571" || hold_oma_cd[ss_clmdtl_oma] == "G581") && clmhdr_loc == "G430" && (string.IsNullOrWhiteSpace(clmhdr_date_admit_grp) || Util.NumInt(clmhdr_date_admit_grp) == 0)
                 )
            {
                err_ind = 170;
                //             perform za0-common-error            thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // 	           perform fa0-acpt-admit-date		thru fa0-99-exit;
                await fa0_acpt_admit_date();
                await fa0_99_exit();
                // 	 go to wa0-10.;                
                return "wa0_10";
            }

            //  objSli_oma_code_suff_rec.sli_oma_code = hold_oma_cd[ss_clmdtl_oma];
            //  objSli_oma_code_suff_rec.sli_oma_suff = hold_oma_suff[ss_clmdtl_oma];
            //  objSli_oma_code_suff_rec.sli_code = objLoc_mstr_rec.loc_service_location_indicator;

            //     read  sli-oma-code-suff-mstr;
            //         invalid key;
            //             go to wa0-31.;

            objSli_oma_code_suff_rec = new F201_SLI_OMA_CODE_SUFF
            {
                WhereClmdtl_oma_cd = hold_oma_cd[ss_clmdtl_oma],
                WhereClmdtl_oma_suff = hold_oma_suff[ss_clmdtl_oma],
                WhereLoc_service_location_indicator = Util.Str(objLoc_mstr_rec.LOC_SERVICE_LOCATION_INDICATOR)
            }.Collection().FirstOrDefault();

            if (objSli_oma_code_suff_rec == null)
            {
                objSli_oma_code_suff_rec = new F201_SLI_OMA_CODE_SUFF();
                //go to wa0 - 31.;                
                return "wa0_31";
            }

            //  if sli-admit-ind = 'Y' and (clmhdr-date-admit = spaces or zeroes) then            
            clmhdr_date_admit_grp = Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0') + Util.Str(clmhdr_date_admit_mm).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_dd).PadLeft(2, '0');
            if (Util.Str(objSli_oma_code_suff_rec.FEE_ADMIT_IND).ToUpper().Equals("Y") && (string.IsNullOrWhiteSpace(clmhdr_date_admit_grp) || Util.NumInt(clmhdr_date_admit_grp) == 0))
            {
                err_ind = 171;
                //       perform za0-common-error            thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // 	     perform fa0-acpt-admit-date		thru fa0-99-exit;
                await fa0_acpt_admit_date();
                await fa0_99_exit();
                // 	     go to wa0-10.;               
                return "wa0_10";
            }

            // if sli-admit-ind = 'N' and (clmhdr-date-admit not = spaces and not = zeroes) then      
            if (Util.Str(objSli_oma_code_suff_rec.FEE_ADMIT_IND).ToUpper().Equals("N") && (!string.IsNullOrWhiteSpace(clmhdr_date_admit_grp) && Util.NumInt(clmhdr_date_admit_grp) != 0))
            {
                err_ind = 172;
                //             perform za0-common-error            thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // 	           perform fa0-acpt-admit-date		thru fa0-99-exit;
                await fa0_acpt_admit_date();
                await fa0_99_exit();
                // 	           go to wa0-10.;                
                return "wa0_10";
            }
            return string.Empty;
        }

        private async Task wa0_31()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_31");

            //  perform wc0-move-oma-data-to-hold           thru wc0-99-exit.;
            await wc0_move_oma_data_to_hold();
            await wc0_99_exit();
        }

        private async Task<string> wa0_40_conseq_sv_date_nbr_1()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_40_conseq_sv_date_nbr_1");

            //  perform we0-input-details-3-6               thru we0-99-exit.;
            if (await we0_input_details_3_6())
            {
                if (await we0_50_conseq_sv_date_nbr_2())
                {
                    await we0_60_conseq_sv_date_nbr_3();
                }
            }
            await we0_99_exit();

            //  if not-ok then          
            if (flag.Equals(not_ok))
            {
                //         go to wa0-10.;                
                return "wa0_10";
            }
            return string.Empty;
        }

        private async Task<string> wa0_90_input_price_for_ic()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_90_input_price_for_ic");

            //  if  hold-oma-suff    (ss-clmdtl-oma )   = "M"  and hold-oma-rec-ind (ss-clmdtl-oma, ss-special-m-suffix-ind) = "Y" then            
            if (hold_oma_suff[ss_clmdtl_oma] == "M" && hold_oma_rec_ind[ss_clmdtl_oma, ss_special_m_suffix_ind] == "Y")
            {
                hold_oma_suff[ss_clmdtl_oma] = "A";
            }

            //  if hold-sv-day (ss-clmdtl-oma, 1) = zero  then            
            if (Util.NumInt(hold_sv_day[ss_clmdtl_oma, 1]) == 0)
            {
                hold_sv_nbr[ss_clmdtl_oma, 1] = 0;
                hold_sv_day[ss_clmdtl_oma, 2] = "0";
                hold_sv_nbr[ss_clmdtl_oma, 2] = 0;
                hold_sv_day[ss_clmdtl_oma, 3] = "0";
                hold_sv_nbr[ss_clmdtl_oma, 3] = 0;
            }
            //  else if hold-sv-day (ss-clmdtl-oma, 2) = zero  then                        
            else if (Util.NumInt(hold_sv_day[ss_clmdtl_oma, 2]) == 0)
            {
                hold_sv_nbr[ss_clmdtl_oma, 2] = 0;
                hold_sv_day[ss_clmdtl_oma, 3] = "0";
                hold_sv_nbr[ss_clmdtl_oma, 3] = 0;
            }
            //  else  if hold-sv-day (ss-clmdtl-oma, 3) = zero  then                        
            else if (Util.NumInt(hold_sv_day[ss_clmdtl_oma, 3]) == 0)
            {
                hold_sv_nbr[ss_clmdtl_oma, 3] = 0;
            }

            // if  hold-sv-day ( ss-clmdtl-oma, 1) not = "MR" and not = "OP"  then      
            if (hold_sv_day[ss_clmdtl_oma, 1] != "MR" && hold_sv_day[ss_clmdtl_oma, 1] != "OP")
            {
                // 	   go to wa0-97-end-of-input-line.;
                string retvalue = await wa0_97_end_of_input_line();
                if (string.IsNullOrWhiteSpace(retvalue))
                {
                    // return "wa0_97_end_of_input_line";
                    return string.Empty;
                }
                else
                {
                    return "wa0_acpt_clmhdr_detail";
                }
            }

            //     accept scr-hold-fee-oma.;                        
            await accept_hold_oma_fee();

            // if hold-fee-oma (ss-clmdtl-oma) = 0  then         
            if (hold_fee_oma[ss_clmdtl_oma] == 0)
            {
                err_ind = 58;
                //      perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //      go to wa0-90-input-price-for-ic.;
                await wa0_90_input_price_for_ic();
                return string.Empty;
            }

            return string.Empty;
        }

        private async Task<string> wa0_95()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_95");

            // if   ( site-id = "RMA" and ( not def-agent-in-pat-diag-billing  and not def-agent-bill-direct ) )            
            //       or ( site-id = "HSC" and ( def-agent-alternate-funding  or def-agent-ohip  or def-agent-reciprocal) ) then;
            if (
                (site_id == "RMA" && (!def_agent_code.Equals(def_agent_in_pat_diag_billing) && !def_agent_code.Equals(def_agent_bill_direct)))
                 || (site_id == "HSC" && (def_agent_code.Equals(def_agent_alternate_funding) || def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_reciprocal)))
                )
            {
                flag = "1";
                //       perform ma0-acpt-verification           thru ma0-99-exit;
                await ma0_acpt_verification();
                await ma0_99_exit();

                //         if flag-accept = 'Y' then           
                if (Util.Str(flag_accept).ToUpper().Equals("Y"))
                {
                    //             next sentence;
                }
                //         else if flag-accept = 'M'  then            
                else if (Util.Str(flag_accept).ToUpper().Equals("M"))
                {
                    //                 go to wa0-90-input-price-for-ic;                    
                    return "wa0_90_input_price_for_ic";
                }
                //         else if flag-accept = 'N' then            
                else if (Util.Str(flag_accept).ToUpper().Equals("N"))
                {
                    hold_fee_oma[ss_clmdtl_oma] = 0;
                    //  go to wa0-10;                    
                    return "wa0_10";
                }
                //          else;
                else
                {
                    err_ind = 1;
                    //  perform za0-common-error    thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //  go to wa0-95.;
                    await wa0_95();
                    return string.Empty;
                }
            }

            return string.Empty;
        }

        private async Task<string> wa0_97_end_of_input_line()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_97_end_of_input_line");

            // *   (note only RMA repsonsible claims with sufix "A" are tested)
            // if ( hold-icc-sec (ss-clmdtl-oma) = "PF" or "DU" or "DR" or "NM" ) and ( hold-oma-suff(ss-clmdtl-oma) = "A" )  and ( not diskette-claim) then    
            if (
                 (hold_icc_sec[ss_clmdtl_oma] == "PF" || hold_icc_sec[ss_clmdtl_oma] == "DU" || hold_icc_sec[ss_clmdtl_oma] == "DR" || hold_icc_sec[ss_clmdtl_oma] == "NM") && (hold_oma_suff[ss_clmdtl_oma] == "A") && (!flag_claim_source.Equals(diskette_claim))
                )
            {
                // *       (if "TECH" only and "A" suffix - change to "B")
                // 	   if  hold-oma-fee-1(ss-clmdtl-oma , ohip)<> 0 and hold-oma-fee-2(ss-clmdtl-oma , ohip) = 0 	then            
                if (hold_oma_fee_1[ss_clmdtl_oma, ohip] != 0 && hold_oma_fee_2[ss_clmdtl_oma, ohip] == 0)
                {
                    flag_tech_prof_suffix_rule = "Y";
                    hold_oma_suff[ss_clmdtl_oma] = "B";
                    //          perform xa0-display-details     thru xa0-99-exit;
                    await xa0_display_details();
                    await xa0_99_exit();
                }
                // *       (if "PROF" only and "A" suffix - change to "C")
                // 	   else if    hold-oma-fee-1(ss-clmdtl-oma , ohip) = 0 and hold-oma-fee-2(ss-clmdtl-oma , ohip) <> 0  then            
                else if (hold_oma_fee_1[ss_clmdtl_oma, ohip] == 0 && hold_oma_fee_2[ss_clmdtl_oma, ohip] != 0)
                {
                    flag_tech_prof_suffix_rule = "Y";
                    hold_oma_suff[ss_clmdtl_oma] = "C";
                    //          perform xa0-display-details         thru xa0-99-exit;
                    await xa0_display_details();
                    await xa0_99_exit();
                }

                // *       (if both "PROF+TECH" "A" suffix - change to "B" and add 2nd line
                // *with "C" code if not 8th line of input)
                // else if    hold-oma-fee-1(ss-clmdtl-oma , ohip)<> 0 and hold-oma-fee-2(ss-clmdtl-oma , ohip)<> 0  	then            
                else if (hold_oma_fee_1[ss_clmdtl_oma, ohip] != 0 && hold_oma_fee_2[ss_clmdtl_oma, ohip] != 0)
                {
                    // 	     perform zz6-calc-ss-for-next-dtl	thru   zz6-99-exit;
                    await zz6_calc_ss_for_next_dtl();
                    await zz6_99_exit();
                    // 	     if  online-claim then            
                    if (flag_claim_source.Equals(online_claim))
                    {

                        // *               (error if new line would exceed max allowed number of detail lin
                        // 	        if ss-clmdtl-new-dtl > ss-max-nbr-oma-det-rec-allow then    
                        if (ss_clmdtl_new_dtl > ss_max_nbr_oma_det_rec_allow)
                        {
                            err_ind = 101;
                            // 		        perform za0-common-error	thru za0-99-exit;
                            await za0_common_error();
                            await za0_99_exit();
                            // *                   (blank line entered since it can't be expanded)
                            hold_oma_rec[ss_clmdtl_oma] = "";
                            hold_sv_nbr_serv[ss_clmdtl_oma] = 0;
                            hold_sv_date[ss_clmdtl_oma] = "0";
                            //hold_sv_nbr_days_conseq[ss_clmdtl_oma,1] = 0;            
                            hold_sv_nbr[ss_clmdtl_oma, 1] = 0;
                            hold_sv_day[ss_clmdtl_oma, 1] = "0";
                            //hold_sv_nbr_days_conseq[ss_clmdtl_oma, 2] = 0;            
                            hold_sv_nbr[ss_clmdtl_oma, 2] = 0;
                            hold_sv_day[ss_clmdtl_oma, 2] = "0";
                            //hold_sv_nbr_days_conseq(ss_clmdtl_oma,3] = 0;            
                            hold_sv_nbr[ss_clmdtl_oma, 3] = 0;
                            hold_sv_day[ss_clmdtl_oma, 3] = "0";
                            hold_fee_incoming[ss_clmdtl_oma] = 0;
                            hold_fee_oma[ss_clmdtl_oma] = 0;
                            hold_fee_ohip[ss_clmdtl_oma] = 0;
                            hold_priced_tech[ss_clmdtl_oma] = 0;
                            hold_basic_tech[ss_clmdtl_oma] = 0;
                            hold_basic_prof[ss_clmdtl_oma] = 0;
                            hold_basic_fee[ss_clmdtl_oma] = 0;
                            hold_oma_fees[ss_clmdtl_oma, 1] = "0";
                            hold_oma_fees[ss_clmdtl_oma, 2] = "0";
                            hold_fee_min[ss_clmdtl_oma, 1] = 0;
                            hold_fee_min[ss_clmdtl_oma, 2] = 0;
                            hold_fee_max[ss_clmdtl_oma, 1] = 0;
                            hold_fee_max[ss_clmdtl_oma, 2] = 0;
                            hold_oma_fee_anae[ss_clmdtl_oma, 1] = 0;
                            hold_oma_fee_anae[ss_clmdtl_oma, 2] = 0;
                            hold_oma_fee_asst[ss_clmdtl_oma, 1] = 0;
                            hold_oma_fee_asst[ss_clmdtl_oma, 2] = 0;
                            hold_ss_curr_prev[ss_clmdtl_oma] = 0;
                            hold_flag_sec_group[ss_clmdtl_oma] = "0";
                            hold_diag_cd[ss_clmdtl_oma] = 0;
                            hold_line_no[ss_clmdtl_oma] = 0;
                            // 	            subtract 1		from                 ss-clmdtl-oma;
                            ss_clmdtl_oma--;
                            if (ss_clmdtl_oma == 0)
                                ss_clmdtl_oma = 1;
                        }
                        else
                        {
                            // 		        perform zz7-split-a-into-b-and-c thru zz7-99-exit;
                            await zz7_split_a_into_b_and_c();
                            await zz7_99_exit();

                            // *                   (split line's svc need to be added to claim audit counter)
                            // 		        add hold-sv-nbr-serv (ss-clmdtl-oma);
                            // 						     to  nbr-of-services;
                            nbr_of_services += hold_sv_nbr_serv[ss_clmdtl_oma];
                            last_claim_flag = Util.Str(nbr_of_services).PadLeft(3, '0');
                            // 		        display scr-last-claim-lit;
                            Display("scr-last-claim-lit.");

                            // 		        perform xa0-display-details      thru xa0-99-exit;
                            await xa0_display_details(true, ss_clmdtl_oma);
                            await xa0_99_exit();

                            // 		        add 1 			     to   ss-clmdtl-oma;
                            ss_clmdtl_oma++;
                            //              perform xa0-display-details      thru xa0-99-exit;
                            await xa0_display_details(true, ss_clmdtl_oma);
                            await xa0_99_exit();

                        }
                    }
                    else
                    {
                        // 		     perform zz7-split-a-into-b-and-c     thru zz7-99-exit;
                        await zz7_split_a_into_b_and_c();
                        await zz7_99_exit();
                        // 		     add 1				     to ss-clmdtl-next-avail-dtl.;
                        ss_clmdtl_next_avail_dtl++;
                        //           go to wa0-acpt-clmhdr-detail.;                    
                        return "wa0_acpt_clmhdr_detail";
                    }
                }
            }
            return "wa0_acpt_clmhdr_detail";
        }

        private async Task wa0_98()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_98");

            // if ss-clmdtl-oma = 2 then            
            if (ss_clmdtl_oma == 2)
            {
                //         display blank-det-line-2;
                Display("blank-det-line-2.");
            }
            // else if ss-clmdtl-oma = 3 then             
            else if (ss_clmdtl_oma == 3)
            {
                //         display blank-det-line-3;
                Display("blank-det-line-3.");
            }
            // else if ss-clmdtl-oma = 4  then            
            else if (ss_clmdtl_oma == 4)
            {
                //         display blank-det-line-4;
                Display("blank-det-line-4.");
            }
            // else if ss-clmdtl-oma = 5  then            
            else if (ss_clmdtl_oma == 5)
            {
                //         display blank-det-line-5;
                Display("blank-det-line-5.");
            }
            // else  if ss-clmdtl-oma = 6 then            
            else if (ss_clmdtl_oma == 6)
            {
                //         display blank-det-line-6;
                Display("blank-det-line-6.");
            }
            // else  if ss-clmdtl-oma = 7  then            
            else if (ss_clmdtl_oma == 7)
            {
                //         display blank-det-line-7;
                Display("blank-det-line-7.");
            }
            // else if ss-clmdtl-oma = 8  then            
            else if (ss_clmdtl_oma == 8)
            {
                //         display blank-det-line-8;
                Display("blank-det-line-8.");
            }
            // else if ss-clmdtl-oma = 9  then;            
            else if (ss_clmdtl_oma == 9)
            {
                //         display blank-det-line-9;
                Display("blank-det-line-9.");
            }
            // else if ss-clmdtl-oma = 10 then            
            else if (ss_clmdtl_oma == 10)
            {
                //         display blank-det-line-10.;
                Display("blank-det-line-10.");
            }

            //     subtract  1                                 from ss-clmdtl-oma.;
            ss_clmdtl_oma--;
            if (ss_clmdtl_oma == 0)
                ss_clmdtl_oma = 1;
        }

        private async Task wa0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa0_99_exit");

            //     exit.;
        }

        private async Task<string> wa2_verify_nbr_svc()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa2_verify_nbr_svc");


            //  if (hold-sv-day (ss-clmdtl-oma, ss-conseq-dd) = "BI"  or "MR" or "ER" or "OP")  or (hold-oma-suff (ss-clmdtl-oma) not = "A")  then            
            if (
                (hold_sv_day[ss_clmdtl_oma, ss_conseq_dd] == "BI" || hold_sv_day[ss_clmdtl_oma, ss_conseq_dd] == "MR" || hold_sv_day[ss_clmdtl_oma, ss_conseq_dd] == "ER" || hold_sv_day[ss_clmdtl_oma, ss_conseq_dd] == "OP") || (hold_oma_suff[ss_clmdtl_oma] != "A")
                )
            {
                //  go to wa2-99-exit.;                
                return "wa2-99-exit";
            }

            flag = "Y";

            // if hold-sv-day ( ss-clmdtl-oma, ss-conseq-dd) not numeric or hold-sv-nbr ( ss-clmdtl-oma, ss-conseq-dd) = 0  then            
            if (!Util.IsNumeric(hold_sv_day[ss_clmdtl_oma, ss_conseq_dd]) | hold_sv_nbr[ss_clmdtl_oma, ss_conseq_dd] == 0)
            {
                flag = "N";
                err_ind = 1;
                //  perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //     go to wa2-99-exit.;                    
                return "wa2-99-exit";
            }

            // if hold-oma-suff ( ss-clmdtl-oma) = "M" then    
            if (hold_oma_suff[ss_clmdtl_oma] == "M")
            {
                temp_ss = hold_sv_date_mm[ss_clmdtl_oma];
                //  if   hold-sv-day-num (ss-clmdtl-oma, ss-conseq-dd)  > max-nbr-days (temp-ss) then            
                //hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd] = Util.NumInt(hold_sv_day[ss_clmdtl_oma, ss_conseq_dd]);
                if (hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd] > max_nbr_days[temp_ss])
                {
                    err_ind = 32;
                    //  go to wa2-98-err;                    
                    return "wa2-98-err";
                }
                else
                {
                    //             next sentence;
                }
            }
            else
            {
                temp_ss = hold_sv_date_mm[ss_clmdtl_oma];
                //     if   hold-sv-day-num (ss-clmdtl-oma, ss-conseq-dd) + hold-sv-nbr     (ss-clmdtl-oma, ss-conseq-dd)  - 1  > max-nbr-days (temp-ss);  then            
                // hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd] = Util.NumInt(hold_sv_day[ss_clmdtl_oma, ss_conseq_dd]);
                if (hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd] + hold_sv_nbr[ss_clmdtl_oma, ss_conseq_dd] - 1 > max_nbr_days[temp_ss])
                {
                    err_ind = 32;
                    //  go to wa2-98-err.;                    
                    return "wa2-98-err";
                }
            }

            //  if ss-conseq-dd = 1;
            if (ss_conseq_dd == 1)
            {
                hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd] = Util.NumInt(hold_sv_day[ss_clmdtl_oma, ss_conseq_dd]);
                //         if hold-oma-suff (ss-clmdtl-oma) = "M" then            
                if (hold_oma_suff[ss_clmdtl_oma] == "M")
                {
                    // if hold-sv-date-dd (ss-clmdtl-oma) < hold-sv-day-num (ss-clmdtl-oma, ss-conseq-dd) then                                
                    if (hold_sv_date_dd[ss_clmdtl_oma] < hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd])
                    {
                        //                 go to wa2-99-exit;                        
                        return "wa2-99-exit";
                    }
                    else
                    {
                        err_ind = 41;
                        // go to wa2-98-err;                        
                        return "wa2-98-err";
                    }
                }
                //         else if    hold-sv-date-dd  (ss-clmdtl-oma) + hold-sv-nbr-serv (ss-clmdtl-oma)  > hold-sv-day-num (ss-clmdtl-oma, ss-conseq-dd) then            
                else if (hold_sv_date_dd[ss_clmdtl_oma] + hold_sv_nbr_serv[ss_clmdtl_oma] > hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd])
                {
                    err_ind = 41;
                    //   go to wa2-98-err;                    
                    return "wa2-98-err";
                }
                else
                {
                    //   go to wa2-99-exit;                    
                    return "wa2-99-exit";
                }
            }
            else
            {
                //         subtract  1                             from   ss-conseq-dd;
                //                                                 giving ss;
                ss = ss_conseq_dd - 1;
                //         if hold-oma-suff (ss-clmdtl-oma) = "M" then                       
                hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd] = Util.NumInt(hold_sv_day[ss_clmdtl_oma, ss_conseq_dd]);
                if (hold_oma_suff[ss_clmdtl_oma] == "M")
                {
                    //   if   hold-sv-day-num (ss-clmdtl-oma, ss)  < hold-sv-day-num (ss-clmdtl-oma, ss-conseq-dd) then                           
                    if (hold_sv_day_num[ss_clmdtl_oma, ss] < hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd])
                    {
                        //  go to wa2-99-exit;                        
                        return "wa2-99-exit";
                    }
                    else
                    {
                        err_ind = 41;
                        // go to wa2-98-err;                        
                        return "wa2-98-err";
                    }
                }
                //         else if   hold-sv-day-num ( ss-clmdtl-oma, ss)  +  hold-sv-nbr     ( ss-clmdtl-oma, ss)  > hold-sv-day-num (ss-clmdtl-oma, ss-conseq-dd)  then            
                else if (hold_sv_day_num[ss_clmdtl_oma, ss] + hold_sv_nbr[ss_clmdtl_oma, ss] > hold_sv_day_num[ss_clmdtl_oma, ss_conseq_dd])
                {
                    err_ind = 41;
                    //  go to wa2-98-err;                    
                    return "wa2-98-err";
                }
                else
                {
                    // go to wa2-99-exit.;                    
                    return "wa2-99-exit";
                }
            }
            return string.Empty;
        }

        private async Task wa2_98_err()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa2_98_err");

            //  perform za0-common-error                    thru za0-99-exit.;
            await za0_common_error();
            await za0_99_exit();
            flag = "N";
        }

        private async Task wa2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa2_99_exit");

            //     exit.;
        }

        private async Task wa3_verify_serv_sys_dates()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa3_verify_serv_sys_dates");

            // if hold-sv-date (ss-clmdtl-oma) > sys-date then            
            if (Util.ToDateTime(hold_sv_date[ss_clmdtl_oma]) > Util.ToDateTime(sys_date_grp))
            {
                err_ind = 45;
                flag = "N";
                //   go to wa3-99-exit.;
                await wa3_99_exit();
                return;
            }

            // if site-id = "RMA" then            
            if (site_id == "RMA")
            {
                // if  ( def-agent-ohip or def-agent-alternate-funding  or def-agent-ohip-wcb )  and clmhdr-manual-review = ' ' and (( hold-sv-date-yy (ss-clmdtl-oma) * 365) + ( hold-sv-date-mm (ss-clmdtl-oma) *  30)  +  232  + ( hold-sv-date-dd (ss-clmdtl-oma))   <   (sys-yy * 365) + (sys-mm * 30) + sys-dd )  then            
                if (
                    (def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_alternate_funding) || def_agent_code.Equals(def_agent_ohip_wcb)) && string.IsNullOrWhiteSpace(clmhdr_manual_review) && ((hold_sv_date_yy[ss_clmdtl_oma] * 365) + (hold_sv_date_mm[ss_clmdtl_oma] * 30) + 232 + (hold_sv_date_dd[ss_clmdtl_oma]) < (sys_yy * 365) + (sys_mm * 30) + sys_dd)
                    )
                {
                    err_ind = 40;
                    flag = "N";
                }
                else
                {
                    flag = "Y";
                }
            }
            // else if site-id = "HSC"  then            
            else if (site_id == "HSC")
            {
                // if (def-agent-ohip or def-agent-alternate-funding  or def-agent-reciprocal  )  and clmhdr-manual-review = ' '            
                //          and (( hold-sv-date-yy (ss-clmdtl-oma) * 365)  + ( hold-sv-date-mm (ss-clmdtl-oma) *  30)  +  180  + ( hold-sv-date-dd (ss-clmdtl-oma)) <   (sys-yy * 365) + (sys-mm * 30) + sys-dd )  then            
                if (
                    (def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_alternate_funding) || def_agent_code.Equals(def_agent_reciprocal)) && string.IsNullOrWhiteSpace(clmhdr_manual_review)
                          && ((hold_sv_date_yy[ss_clmdtl_oma] * 365) + (hold_sv_date_mm[ss_clmdtl_oma] * 30) + 180 + (hold_sv_date_dd[ss_clmdtl_oma]) < (sys_yy * 365) + (sys_mm * 30) + sys_dd)
                    )
                {
                    err_ind = 40;
                    flag = "N";
                }
                else
                {
                    flag = "Y";
                }
            }
        }

        private async Task wa3_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wa3_99_exit");

            //     exit.;
        }

        private async Task wb0_read_oma_mstr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wb0_read_oma_mstr");

            //objFee_mstr_rec.fee_oma_cd = ws_oma_cd;

            //  read oma-fee-mstr;
            //         invalid key;
            //         flag = "N";
            //             go to wb0-99-exit.;

            objFee_mstr_rec = new F040_OMA_FEE_MSTR
            {
                WhereFee_oma_cd_ltr1 = ws_oma_cd_1,
                WhereFiller_numeric = Util.Str(ws_oma_cd_2_4) 
            }.Collection().FirstOrDefault();

            if (objFee_mstr_rec == null)
            {
                flag = "N";
                //  go to wb0-99-exit.;
                await wb0_99_exit();
                return;
            }

            flag = "Y";
            //   add  1              to ctr-read-oma-mstr.;
            ctr_read_oma_mstr++;
        }

        private async Task wb0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wb0_99_exit");

            //     exit.;
        }

        private async Task wc0_move_oma_data_to_hold()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wc0_move_oma_data_to_hold");

            hold_oma_rec_ind[ss_clmdtl_oma, ss_tech_ind] = Util.Str(objFee_mstr_rec.FEE_TECH_IND);
            hold_oma_rec_ind[ss_clmdtl_oma, ss_diag_ind] = Util.Str(objFee_mstr_rec.FEE_DIAG_IND);
            hold_oma_rec_ind[ss_clmdtl_oma, ss_phy_ind] = Util.Str(objFee_mstr_rec.FEE_PHY_IND);
            hold_oma_rec_ind[ss_clmdtl_oma, ss_hosp_nbr_ind] = Util.Str(objFee_mstr_rec.FEE_HOSP_NBR_IND);
            hold_oma_rec_ind[ss_clmdtl_oma, ss_i_o_ind] = Util.Str(objFee_mstr_rec.FEE_I_O_IND);
            hold_oma_rec_ind[ss_clmdtl_oma, ss_admit_ind] = Util.Str(objFee_mstr_rec.FEE_ADMIT_IND);
            hold_oma_rec_ind[ss_clmdtl_oma, ss_special_m_suffix_ind] = Util.Str(objFee_mstr_rec.FEE_SPECIAL_M_SUFFIX_IND);
            hold_icc_sec[ss_clmdtl_oma] = Util.Str(objFee_mstr_rec.FEE_ICC_SEC);
            hold_icc_grp[ss_clmdtl_oma] = Util.NumInt(objFee_mstr_rec.FEE_ICC_GRP);
            hold_icc_cd[ss_clmdtl_oma] = Util.Str(hold_icc_sec[ss_clmdtl_oma]).PadRight(2) + Util.Str(hold_icc_grp[ss_clmdtl_oma]).PadLeft(2, '0');


            // if def-agent-bill-direct then            
            if (def_agent_code.Equals(def_agent_bill_direct))
            {

                //         if hold-sv-date (ss-clmdtl-oma) < const-effective-date (curr) then 
                string tmp_Const_Effective_Date = Util.Str(CONST_EFFECTIVE_DATE_YY_GET(objConstants_mstr_rec_2, curr)) + Util.Str(CONST_EFFECTIVE_DATE_MM_GET(objConstants_mstr_rec_2, curr)) + Util.Str(CONST_EFFECTIVE_DATE_DD_GET(objConstants_mstr_rec_2, curr));
                if (Util.NumInt(hold_sv_date[ss_clmdtl_oma]) < Util.NumInt(tmp_Const_Effective_Date))
                {
                    hold_ss_curr_prev[ss_clmdtl_oma] = prev;
                }
                else
                {
                    hold_ss_curr_prev[ss_clmdtl_oma] = curr;
                }
            }
            // else if hold-sv-date (ss-clmdtl-oma) < fee-effective-date  then            
            else if (Util.NumInt(hold_sv_date[ss_clmdtl_oma]) < Util.NumInt(Util.Str(objFee_mstr_rec.FEE_DATE_YY) + Util.Str(objFee_mstr_rec.FEE_DATE_MM) + Util.Str(objFee_mstr_rec.FEE_DATE_DD)))
            {
                hold_ss_curr_prev[ss_clmdtl_oma] = prev;
            }
            else
            {
                hold_ss_curr_prev[ss_clmdtl_oma] = curr;
            }

            ss_curr_prev = hold_ss_curr_prev[ss_clmdtl_oma];

            //move fee-1(ss - curr - prev, oma) to hold-oma - fee - 1(ss - clmdtl - oma, oma)

            hold_oma_fee_1[ss_clmdtl_oma, oma] = FEE_CURRENT_PREVIOUS_YEARS_Fee_1_GET(objFee_mstr_rec, ss_curr_prev, oma); // fee_1[ss_curr_prev, oma];
            //move fee-2(ss - curr - prev, oma) to hold-oma - fee - 2(ss - clmdtl - oma, oma)
            hold_oma_fee_2[ss_clmdtl_oma, oma] = FEE_CURRENT_PREVIOUS_YEARS_Fee_2_GET(objFee_mstr_rec, ss_curr_prev, oma);   //fee_2[ss_curr_prev, oma];
            //move fee-anae(ss - curr - prev, oma) to hold-oma - fee - anae(ss - clmdtl - oma, oma)
            hold_oma_fee_anae[ss_clmdtl_oma, oma] = Util.NumInt(FEE_CURRENT_PREVIOUS_YEARS_Fee_Anae_GET(objFee_mstr_rec, ss_curr_prev, oma));  //fee_anae[ss_curr_prev, oma];
            //move fee-asst(ss - curr - prev, oma) to hold-oma - fee - asst(ss - clmdtl - oma, oma)
            hold_oma_fee_asst[ss_clmdtl_oma, oma] = Util.NumInt(FEE_CURRENT_PREVIOUS_YEARS_Fee_Asst_GET(objFee_mstr_rec, ss_curr_prev, oma));  //fee_asst[ss_curr_prev, oma];
            //move fee-1(ss - curr - prev, ohip) to hold-oma - fee - 1(ss - clmdtl - oma, ohip)
            hold_oma_fee_1[ss_clmdtl_oma, ohip] = FEE_CURRENT_PREVIOUS_YEARS_Fee_1_GET(objFee_mstr_rec, ss_curr_prev, ohip);  //fee_1[ss_curr_prev, ohip];
            //move fee-2(ss - curr - prev, ohip) to hold-oma - fee - 2(ss - clmdtl - oma, ohip)
            hold_oma_fee_2[ss_clmdtl_oma, ohip] = FEE_CURRENT_PREVIOUS_YEARS_Fee_2_GET(objFee_mstr_rec, ss_curr_prev, ohip); //fee_2[ss_curr_prev, ohip];
            //move fee-anae(ss - curr - prev, ohip) to hold-oma - fee - anae(ss - clmdtl - oma, ohip)
            hold_oma_fee_anae[ss_clmdtl_oma, ohip] = Util.NumInt(FEE_CURRENT_PREVIOUS_YEARS_Fee_Anae_GET(objFee_mstr_rec, ss_curr_prev, ohip));  //fee_anae[ss_curr_prev, ohip];
            //move fee-asst(ss - curr - prev, ohip) to hold-oma - fee - asst(ss - clmdtl - oma, ohip).
            hold_oma_fee_asst[ss_clmdtl_oma, ohip] = Util.NumInt(FEE_CURRENT_PREVIOUS_YEARS_Fee_Asst_GET(objFee_mstr_rec, ss_curr_prev, ohip)); //fee_asst[ss_curr_prev, ohip];

            //move fee - min(ss - curr - prev, ohip) to hold-fee - min(ss - clmdtl - oma, ohip).
            hold_fee_min[ss_clmdtl_oma, ohip] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Min_GET(objFee_mstr_rec, ss_curr_prev, ohip); //fee_min[ss_curr_prev, ohip];
            //move fee - max(ss - curr - prev, ohip) to hold-fee - max(ss - clmdtl - oma, ohip).
            hold_fee_max[ss_clmdtl_oma, ohip] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Max_GET(objFee_mstr_rec, ss_curr_prev, ohip);  //fee_max[ss_curr_prev, ohip];

            //move fee-min(ss - curr - prev, oma) to hold-fee - min(ss - clmdtl - oma, oma).
            hold_fee_min[ss_clmdtl_oma, oma] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Min_GET(objFee_mstr_rec, ss_curr_prev, oma); //fee_min[ss_curr_prev, oma];

            //move fee - max(ss - curr - prev, oma) to hold-fee - max(ss - clmdtl - oma, oma).
            hold_fee_max[ss_clmdtl_oma, oma] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Max_GET(objFee_mstr_rec, ss_curr_prev, oma);  //fee_max[ss_curr_prev, oma];

            //move fee-add - on - cd(ss - curr - prev, 1) to hold-oma - add - on - cd(ss - clmdtl - oma, 1).
            hold_oma_add_on_cd[ss_clmdtl_oma, 1] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 1);  // fee_add_on_cd[ss_curr_prev, 1];

            //move fee - add - on - cd(ss - curr - prev, 2) to hold-oma - add - on - cd(ss - clmdtl - oma, 2).
            hold_oma_add_on_cd[ss_clmdtl_oma, 2] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 2);  // fee_add_on_cd[ss_curr_prev, 2];

            //move fee - add - on - cd(ss - curr - prev, 3) to hold-oma - add - on - cd(ss - clmdtl - oma, 3).
            hold_oma_add_on_cd[ss_clmdtl_oma, 3] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 3); //fee_add_on_cd[ss_curr_prev, 3];

            //move fee - add - on - cd(ss - curr - prev, 4) to hold-oma - add - on - cd(ss - clmdtl - oma, 4).
            hold_oma_add_on_cd[ss_clmdtl_oma, 4] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 4); //fee_add_on_cd[ss_curr_prev, 4];

            //move fee - add - on - cd(ss - curr - prev, 5) to hold-oma - add - on - cd(ss - clmdtl - oma, 5).
            hold_oma_add_on_cd[ss_clmdtl_oma, 5] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 5); //fee_add_on_cd[ss_curr_prev, 5];

            //move fee - add - on - cd(ss - curr - prev, 6) to hold-oma - add - on - cd(ss - clmdtl - oma, 6).
            hold_oma_add_on_cd[ss_clmdtl_oma, 6] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 6); // fee_add_on_cd[ss_curr_prev, 6];

            //move fee - add - on - cd(ss - curr - prev, 7) to hold-oma - add - on - cd(ss - clmdtl - oma, 7).
            hold_oma_add_on_cd[ss_clmdtl_oma, 7] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 7); //fee_add_on_cd[ss_curr_prev, 7];

            //move fee - add - on - cd(ss - curr - prev, 8) to hold-oma - add - on - cd(ss - clmdtl - oma, 8).
            hold_oma_add_on_cd[ss_clmdtl_oma, 8] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 8); //fee_add_on_cd[ss_curr_prev, 8];

            //move fee - add - on - cd(ss - curr - prev, 9) to hold-oma - add - on - cd(ss - clmdtl - oma, 9).
            hold_oma_add_on_cd[ss_clmdtl_oma, 9] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 9); //fee_add_on_cd[ss_curr_prev, 9];

            //move fee - add - on - cd(ss - curr - prev, 10) to hold-oma - add - on - cd(ss - clmdtl - oma, 10).
            hold_oma_add_on_cd[ss_clmdtl_oma, 10] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_GET(objFee_mstr_rec, ss_curr_prev, 10); //fee_add_on_cd[ss_curr_prev, 10];

            // hold_oma_ind_card_requireds[ss_clmdtl_oma] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Oma_Ind_Card_Requireds_GET(objFee_mstr_rec,ss_curr_prev);  // Note: This is moving group array to group array.
            hold_oma_ind_card_required[ss_clmdtl_oma, 1] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Oma_Ind_Card_Required_GET(objFee_mstr_rec, ss_curr_prev, 1);
            hold_oma_ind_card_required[ss_clmdtl_oma, 2] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Oma_Ind_Card_Required_GET(objFee_mstr_rec, ss_curr_prev, 2);
            hold_oma_ind_card_required[ss_clmdtl_oma, 3] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Oma_Ind_Card_Required_GET(objFee_mstr_rec, ss_curr_prev, 3);


            // if fee-add-on-perc-or-flat-ind(ss-curr-prev) =   "P"  or "F"  then     
            // if (fee_add_on_perc_or_flat_ind[ss_curr_prev] == "P"  || fee_add_on_perc_or_flat_ind[ss_curr_prev] == "F") {
            if (FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_Perc_Or_Flat_Ind_GET(objFee_mstr_rec, ss_curr_prev) == "P" || FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_Perc_Or_Flat_Ind_GET(objFee_mstr_rec, ss_curr_prev) == "F")
            {
                //   perform wc1-addon-fee-fix	thru wc1-99-exit.;
                await wc1_addon_fee_fix();
                await wc1_99_exit();
            }

            // if fee-add-on-perc-or-flat-ind(ss-curr-prev) =   "P" or "F" then            
            if (FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_Perc_Or_Flat_Ind_GET(objFee_mstr_rec, ss_curr_prev) == "P" || FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_Perc_Or_Flat_Ind_GET(objFee_mstr_rec, ss_curr_prev) == "F")
            {
                hold_oma_rec_ind[ss_clmdtl_oma, ss_add_on_perc_or_flat_ind] = FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_Perc_Or_Flat_Ind_GET(objFee_mstr_rec, ss_curr_prev); //fee_add_on_perc_or_flat_ind[ss_curr_prev];              
            }
            else
            {
                //     move " " to hold-oma-rec-ind (ss-clmdtl-oma,ss-add-on-perc-or-flat-ind).
                hold_oma_rec_ind[ss_clmdtl_oma, ss_add_on_perc_or_flat_ind] = " ";
            }
        }

        private async Task wc0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wc0_99_exit");

            //     exit.;
        }

        private async Task wc1_addon_fee_fix()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wc1_addon_fee_fix");

            //  if fee-add-on-perc-or-flat-ind(ss-curr-prev) =   "P" then;            
            if (FEE_CURRENT_PREVIOUS_YEARS_Fee_Add_On_Perc_Or_Flat_Ind_GET(objFee_mstr_rec, ss_curr_prev) == "P")
            {
                //     compute hold-oma-fee-1 (ss-clmdtl-oma,  oma) =  hold-oma-fee-1 (ss-clmdtl-oma,  oma) / 100            
                // GW2019. Added Scaling / 10000
                hold_oma_fee_1[ss_clmdtl_oma, oma] = hold_oma_fee_1[ss_clmdtl_oma, oma] / 10000;
                //     compute hold-oma-fee-2 (ss-clmdtl-oma,  oma) = hold-oma-fee-2 (ss-clmdtl-oma,  oma) / 100            
                hold_oma_fee_2[ss_clmdtl_oma, oma] = hold_oma_fee_2[ss_clmdtl_oma, oma] / 10000;
                //     compute hold-oma-fee-1 (ss-clmdtl-oma, ohip) =  hold-oma-fee-1 (ss-clmdtl-oma, ohip) / 100            
                hold_oma_fee_1[ss_clmdtl_oma, ohip] = hold_oma_fee_1[ss_clmdtl_oma, ohip] / 10000;
                //     compute hold-oma-fee-2 (ss-clmdtl-oma, ohip) =  hold-oma-fee-2 (ss-clmdtl-oma, ohip) / 100.            
                hold_oma_fee_2[ss_clmdtl_oma, ohip] = hold_oma_fee_2[ss_clmdtl_oma, ohip] / 10000;
            }

            //  if  hold-oma-fee-1 (ss-clmdtl-oma,  oma) = 0 then         
            if (hold_oma_fee_1[ss_clmdtl_oma, oma] == 0)
            {
                //      move  hold-oma-fee-2 (ss-clmdtl-oma,  oma)       to hold-oma-fee-1(ss-clmdtl-oma,  oma)
                hold_oma_fee_1[ss_clmdtl_oma, oma] = hold_oma_fee_2[ss_clmdtl_oma, oma];
            }
            //  else if        hold-oma-fee-2 (ss-clmdtl-oma,  oma) = 0 then
            else if (hold_oma_fee_2[ss_clmdtl_oma, oma] == 0)
            {
                //       move  hold-oma-fee-1 (ss-clmdtl-oma,  oma)  to hold-oma-fee-2(ss-clmdtl-oma,  oma)  
                hold_oma_fee_2[ss_clmdtl_oma, oma] = hold_oma_fee_1[ss_clmdtl_oma, oma];
            }
            else
            {
                //         next sentence.;
            }

            //  if  hold-oma-fee-1 (ss-clmdtl-oma, ohip) = 0 then;
            if (hold_oma_fee_1[ss_clmdtl_oma, ohip] == 0)
            {
                //      move  hold-oma-fee-2 (ss-clmdtl-oma, ohip)      to hold-oma-fee-1(ss-clmdtl-oma, ohip)
            }
            //  else  if  hold-oma-fee-2 (ss-clmdtl-oma, ohip) = 0  then
            else if (hold_oma_fee_2[ss_clmdtl_oma, ohip] == 0)
            {
                //      move  hold-oma-fee-1 (ss-clmdtl-oma, ohip)  to hold-oma-fee-2(ss-clmdtl-oma, ohip)  
                hold_oma_fee_2[ss_clmdtl_oma, ohip] = hold_oma_fee_1[ss_clmdtl_oma, ohip];
            }
            else
            {
                //        next sentence.;
            }
        }

        private async Task wc1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wc1_99_exit");

            //     exit.;
        }

        private async Task wd0_verify_clmdtl_data()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd0_verify_clmdtl_data");

            flag_err_data = "Y";
        }

        private async Task wd0_20_verify_hosp_nbr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd0_20_verify_hosp_nbr");
        }

        private async Task wd0_30_verify_admit_date()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd0_30_verify_admit_date");

            // if clmhdr-date-admit = zero  then  
            clmhdr_date_admit_grp = Util.Str(clmhdr_date_admit_yy).PadLeft(4, '0') + Util.Str(clmhdr_date_admit_mm).PadLeft(2, '0') + Util.Str(clmhdr_date_admit_dd).PadLeft(2, '0');
            if (Util.NumInt(clmhdr_date_admit_grp) == 0)
            {
                flag = "Y";
                ss_ind = ss_admit_ind;
                //     perform wd1-verify-ind          thru wd1-99-exit;
                //                     varying ss;
                //                     from 1 by 1;
                //                     until   not-ok;
                //                          or ss > ss-clmdtl-oma;

                ss = 1;
                do
                {
                    await wd1_verify_ind();
                    await wd1_99_exit();
                    ss++;
                } while (!flag.Equals(not_ok) && ss <= ss_clmdtl_oma);

                //     if not-ok then            
                if (flag.Equals(not_ok))
                {
                    err_ind = 38;
                    //    perform za0-common-error    thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();

                    //   perform fa0-acpt-admit-date thru fa0-99-exit;
                    await fa0_acpt_admit_date();
                    await fa0_99_exit();
                    //   go to wd0-30-verify-admit-date;
                    await wd0_30_verify_admit_date();
                    return;
                }
                else
                {
                    //           next sentence;            
                }
            }
            // else  if   ( (hold-sv-date (1 ) not = zero) and (hold-sv-date (1 ) < clmhdr-date-admit) );
            //           or ( (hold-sv-date (2 ) not = zero) and (hold-sv-date (2 ) < clmhdr-date-admit) );
            //           or ( (hold-sv-date (3 ) not = zero) and (hold-sv-date (3 ) < clmhdr-date-admit) );
            //           or ( (hold-sv-date (4 ) not = zero) and (hold-sv-date (4 ) < clmhdr-date-admit) );
            //           or ( (hold-sv-date (5 ) not = zero) and (hold-sv-date (5 ) < clmhdr-date-admit) );
            //           or ( (hold-sv-date (6 ) not = zero) and (hold-sv-date (6 ) < clmhdr-date-admit) );
            //           or ( (hold-sv-date (7 ) not = zero) and (hold-sv-date (7 ) < clmhdr-date-admit) );
            //           or ( (hold-sv-date (8 ) not = zero) and (hold-sv-date (8 ) < clmhdr-date-admit) );
            //           or ( (hold-sv-date (9 ) not = zero) and (hold-sv-date (9 ) < clmhdr-date-admit) );
            //           or ( (hold-sv-date (10) not = zero) and (hold-sv-date (10) < clmhdr-date-admit) ) then     
            else if (
                 ((Util.NumInt(hold_sv_date[1]) != 0) && (Util.NumInt(hold_sv_date[1]) < Util.NumInt(clmhdr_date_admit_grp)))
                       || ((Util.NumInt(hold_sv_date[2]) != 0) && (Util.NumInt(hold_sv_date[2]) < Util.NumInt(clmhdr_date_admit_grp)))
                       || ((Util.NumInt(hold_sv_date[3]) != 0) && (Util.NumInt(hold_sv_date[3]) < Util.NumInt(clmhdr_date_admit_grp)))
                       || ((Util.NumInt(hold_sv_date[4]) != 0) && (Util.NumInt(hold_sv_date[4]) < Util.NumInt(clmhdr_date_admit_grp)))
                       || ((Util.NumInt(hold_sv_date[5]) != 0) && (Util.NumInt(hold_sv_date[5]) < Util.NumInt(clmhdr_date_admit_grp)))
                       || ((Util.NumInt(hold_sv_date[6]) != 0) && (Util.NumInt(hold_sv_date[6]) < Util.NumInt(clmhdr_date_admit_grp)))
                       || ((Util.NumInt(hold_sv_date[7]) != 0) && (Util.NumInt(hold_sv_date[7]) < Util.NumInt(clmhdr_date_admit_grp)))
                       || ((Util.NumInt(hold_sv_date[8]) != 0) && (Util.NumInt(hold_sv_date[8]) < Util.NumInt(clmhdr_date_admit_grp)))
                       || ((Util.NumInt(hold_sv_date[9]) != 0) && (Util.NumInt(hold_sv_date[9]) < Util.NumInt(clmhdr_date_admit_grp)))
                       || ((Util.NumInt(hold_sv_date[10]) != 0) && (Util.NumInt(hold_sv_date[10]) < Util.NumInt(clmhdr_date_admit_grp)))

                )
            {
                err_ind = 33;
                //             perform za0-common-error    thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //     perform fa0-acpt-admit-date thru fa0-99-exit;
                await fa0_acpt_admit_date();
                await fa0_99_exit();
                //   go to wd0-30-verify-admit-date;
                await wd0_30_verify_admit_date();
                return;
            }
            else
            {
                //         next sentence.
            }

        }

        private async Task wd0_40_verify_refer_phy()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd0_40_verify_refer_phy");

            // if clmhdr-refer-doc-nbr = zero then            
            if (clmhdr_refer_doc_nbr == 0)
            {
                flag = "Y";
                ss_ind = ss_phy_ind;
                flag_refer_doc_needed_G_codes = "N";
                //         perform wd1-verify-ind          thru wd1-99-exit;
                //                     varying ss;
                //                     from 1 by 1;
                //                     until   not-ok;
                //                          or ss > ss-clmdtl-oma;

                ss = 1;
                do
                {
                    await wd1_verify_ind();
                    await wd1_99_exit();
                    ss++;
                } while (!flag.Equals(not_ok) && ss <= ss_clmdtl_oma);

                //      if flag-refer-doc-needed-G-codes = 'Y' then            
                if (Util.Str(flag_refer_doc_needed_G_codes).ToUpper().Equals("Y"))
                {
                    clmhdr_refer_doc_nbr = Util.NumInt(objDoc_mstr_rec.DOC_OHIP_NBR);
                    //   display scr-clmhdr-refer-doc;
                    Display("scr-acpt-clmhdr.");
                }
                //      else if not-ok then            
                else if (flag.Equals(not_ok))
                {
                    err_ind = 34;
                    //  perform za0-common-error    thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //  perform ga0-acpt-refer-doc  thru ga0-99-exit;
                    await ga0_acpt_refer_doc();
                    await ga0_99_exit();
                    //  go to wd0-40-verify-refer-phy;
                    await wd0_40_verify_refer_phy();
                    return;
                }
                else
                {
                    //             next sentence;
                }
            }
            else
            {
                //         next sentence.;
            }

        }

        private async Task wd0_90_set_ohip_tape_submt_ind()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd0_90_set_ohip_tape_submt_ind");

            // if def-agent-ohip or (    def-agent-ohip-wcb  and site-id = "RMA" )  then
            if (
                def_agent_code.Equals(def_agent_ohip) || (def_agent_code.Equals(def_agent_ohip_wcb) && site_id == "RMA")
                )
            {
                //         perform wd2-verify-oma-cd-submit-ind thru wd2-99-exit;
                //                 varying ss;
                //                 from 1 by 1;
                //                 until    ss > ss-clmdtl-oma.;

                ss = 1;
                do
                {
                    await wd2_verify_oma_cd_submit_ind();
                    await wd2_99_exit();
                    ss++;
                } while (ss <= ss_clmdtl_oma);

            }
        }

        private async Task wd0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd0_99_exit");

            //     exit.;
        }

        private async Task wd1_verify_ind()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd1_verify_ind");

            // if (hold-oma-rec-ind (ss , ss-ind) = "Y") and  ((hold-oma-suff    (ss ) =    "A"  or "M")  or  (hold-icc-sec(ss) = 'NM' or 'PF' or 'DU'))   then            
            if (
                 (hold_oma_rec_ind[ss, ss_ind] == "Y") && ((hold_oma_suff[ss] == "A" || hold_oma_suff[ss] == "M") || (hold_icc_sec[ss] == "NM" || hold_icc_sec[ss] == "PF" || hold_icc_sec[ss] == "DU"))
                )
            {
                flag = "N";
            }

            // if (hold-oma-rec-ind (ss , ss-ind) = "Y") and  (ss-ind = 2)  and  (   hold-oma-cd-alpha (ss) = 'G' or hold-oma-cd-alpha (ss) = 'J'  or hold-oma-cd-alpha (ss) = 'X' ) then            
            if (
                (hold_oma_rec_ind[ss, ss_ind] == "Y") && (ss_ind == 2) && (hold_oma_cd_alpha[ss] == "G" || hold_oma_cd_alpha[ss] == "J" || hold_oma_cd_alpha[ss] == "X")
                )
            {
                flag_refer_doc_needed_G_codes = "Y";
            }
        }

        private async Task wd1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd1_99_exit");

            //     exit.;
        }

        private async Task wd2_verify_oma_cd_submit_ind()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd2_verify_oma_cd_submit_ind");

            // if hold-oma-suff(ss) = "A" or "M" then       
            if (hold_oma_suff[ss] == "A" || hold_oma_suff[ss] == "M")
            {
                ss_suffix = 1;
            }
            //  else if hold-oma-suff(ss) = "B"  then            
            else if (hold_oma_suff[ss] == "B")
            {
                ss_suffix = 2;
            }
            else
            {
                ss_suffix = 3;
            }

            // if hold-oma-ind-card-required(ss,ss-suffix) = "R" then            
            if (hold_oma_ind_card_required[ss, ss_suffix] == "R")
            {
                clmhdr_manual_review = "Y";
                flag_desc_report_required = "Y";
                ss = 9;
            }
        }

        private async Task wd2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "wd2_99_exit");

            //     exit.;
        }

        private async Task<bool> we0_input_details_3_6()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "we0_input_details_3_6");

            // if flag-accept not = "M" then;        
            if (Util.Str(flag_accept) != "M")
            {
                hold_sv_nbr[ss_clmdtl_oma, 1] = 0;
                hold_sv_nbr[ss_clmdtl_oma, 2] = 0;
                hold_sv_nbr[ss_clmdtl_oma, 3] = 0;
            }

            hold_sv_day[ss_clmdtl_oma, 1] = "";
            hold_sv_day[ss_clmdtl_oma, 2] = "";
            hold_sv_day[ss_clmdtl_oma, 3] = "";

            ss_conseq_dd = 1;

            //     accept scr-hold-sv-day-1.;            
            await accept_hold_sv_day1();

            // if hold-sv-day(ss-clmdtl-oma,1) = "MR"  then            
            if (Util.Str(hold_sv_day[ss_clmdtl_oma, 1]).ToUpper() == "MR")
            {
                ic_flag = "Y";
            }

            // if hold-sv-day(ss-clmdtl-oma,1) = "BI" and  hold-sv-nbr-serv(ss-clmdtl-oma) = 1   then    
            if (
                Util.Str(hold_sv_day[ss_clmdtl_oma, 1]).ToUpper() == "BI" && hold_sv_nbr_serv[ss_clmdtl_oma] == 1
                )
            {
                err_ind = 184;
                // 	   perform za0-common-error	thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // 	   go to we0-99-exit.;
                await we0_99_exit();
                return false;
            }

            // if hold-sv-day(ss-clmdtl-oma,1) = zero or " " or "BI" or "MR" or "OP" or "ER" then            
            if (
                Util.NumInt(hold_sv_day[ss_clmdtl_oma, 1]) == 0 || string.IsNullOrWhiteSpace(hold_sv_day[ss_clmdtl_oma, 1]) || Util.Str(hold_sv_day[ss_clmdtl_oma, 1]).ToUpper() == "BI" || Util.Str(hold_sv_day[ss_clmdtl_oma, 1]).ToUpper() == "MR" || Util.Str(hold_sv_day[ss_clmdtl_oma, 1]).ToUpper() == "OP" || Util.Str(hold_sv_day[ss_clmdtl_oma, 1]).ToUpper() == "ER"
                )
            {
                //         go to we0-99-exit;
                await we0_99_exit();
                return false;
            }
            else
            {
                //         accept scr-hold-sv-nbr-1.;                                
                // await Prompt("hold_sv_nbr[ss_clmdtl_oma,1]"); 
                await accept_hold_sv_nbr();

            }

            // perform wa2-verify-nbr-svc                  thru wa2-99-exit.;
            string retVal = await wa2_verify_nbr_svc();
            if (Util.Str(retVal).ToLower().Equals("wa2-99-exit"))
            {
                goto _wa2_99_exit;
            }

            await wa2_98_err();
            _wa2_99_exit:
            await wa2_99_exit();

            // if not-ok  then           
            if (flag.Equals(not_ok))
            {
                flag = "N";
                //    go to we0-99-exit.;
                await we0_99_exit();
                return false;
            }

            return true;
        }

        private async Task<bool> we0_50_conseq_sv_date_nbr_2()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "we0_50_conseq_sv_date_nbr_2");

            ss_conseq_dd = 2;

            // accept scr-hold-sv-day-2.;            
            //await Prompt("hold_sv_day[ss_clmdtl_oma,2]");  
            await accept_hold_sv_day2();


            // if hold-sv-day(ss-clmdtl-oma,2) = zero  then            
            if (Util.NumInt(hold_sv_day[ss_clmdtl_oma, 2]) == 0)
            {
                //         go to we0-99-exit;
                await we0_99_exit();
                return false;
            }
            else
            {
                //  accept scr-hold-sv-nbr-2.;               
                //await Prompt("hold_sv_nbr[ss_clmdtl_oma,2]");
                await accept_hold_sv_nbr2();
            }

            //  perform wa2-verify-nbr-svc                  thru wa2-99-exit;
            string retVal = await wa2_verify_nbr_svc();
            if (Util.Str(retVal).ToLower().Equals("wa2-99-exit"))
            {
                goto _wa2_99_exit;
            }

            await wa2_98_err();
            _wa2_99_exit:
            await wa2_99_exit();

            // if not-ok then            
            if (flag.Equals(not_ok))
            {
                flag = "N";
                //  go to we0-99-exit.;
                await we0_99_exit();
                return false;
            }
            return true;
        }

        private async Task we0_60_conseq_sv_date_nbr_3()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "we0_60_conseq_sv_date_nbr_3");

            ss_conseq_dd = 3;

            //     accept scr-hold-sv-day-3.;            
            //await Prompt("hold_sv_day[ss_clmdtl_oma,3]");  
            await accept_hold_sv_day3();

            //  if hold-sv-day(ss-clmdtl-oma,3) = zero then   
            if (Util.NumInt(hold_sv_day[ss_clmdtl_oma, 3]) == 0)
            {
                //         go to we0-99-exit;
                await we0_99_exit();
                return;
            }
            else
            {
                //         accept scr-hold-sv-nbr-3.;                
                // await Prompt("hold_sv_nbr[ss_clmdtl_oma,3]"); 
                await accept_hold_sv_nbr3();
            }

            //  perform wa2-verify-nbr-svc                  thru wa2-99-exit;
            string retVal = await wa2_verify_nbr_svc();
            if (Util.Str(retVal).ToLower().Equals("wa2-99-exit"))
            {
                goto _wa2_99_exit;
            }

            await wa2_98_err();
            _wa2_99_exit:
            await wa2_99_exit();

            // if not-ok then            
            if (flag.Equals(not_ok))
            {
                flag = "N";
                //  go to we0-99-exit.;
                await we0_99_exit();
                return;
            }

            flag = "Y";
        }

        private async Task we0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "we0_99_exit");

            //     exit.;
        }

        private async Task xa0_display_details(bool show = false, int index = 1)
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "xa0_display_details");

            //     add ss-clmdtl-oma;
            //          10                             giving pline.;
            pline = ss_clmdtl_oma + 10;

            if (show)
            {
                await display_details_group(pline, index);
            }
        }

        private async Task xa0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "xa0_99_exit");

            //     exit.;
        }

        private async Task xb0_verify_location()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "xb0_verify_location");

            flag_loc_code = "Y";

            // read loc-mstr;
            //         invalid key;
            //            flag_loc_code = "N";
            // 	         go to xb0-99-exit.;

            objLoc_mstr_rec = new F030_LOCATIONS_MSTR
            {
                WhereLoc_nbr = objLoc_mstr_rec.LOC_NBR
            }.Collection().FirstOrDefault();

            if (objLoc_mstr_rec == null)
            {
                objLoc_mstr_rec = new F030_LOCATIONS_MSTR();
                flag_loc_code = "N";
                // 	go to xb0-99-exit.;
                await xb0_99_exit();
                return;
            }

            //   add 1                               to ctr-read-loc-mstr.;
            ctr_read_loc_mstr++;

            ws_clmhdr_hosp = "";

            // if ws-iconst-clinic-card-colour = 'Y' then        
            if (ws_iconst_clinic_card_colour == "Y")
            {
                ws_clmhdr_hosp = Util.Str(objLoc_mstr_rec.LOC_HOSPITAL_CODE);
            }
            else
            {
                ws_clmhdr_hosp = Util.Str(objLoc_mstr_rec.LOC_HOSPITAL_NBR);
            }

            //     display scr-hosp-nbr.;
            Display("scr-acpt-clmhdr.", "scr-hosp-nbr");

        }

        private async Task xb0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "xb0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task<string> ya0_price_claim()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya0_price_claim");

            flag_zero_fee = "N";
            // if def-agent-wcb then          
            if (def_agent_code.Equals(def_agent_wcb))
            {
                ss_curr_prev = hold_ss_curr_prev[1];
                ws_hold_wcb_rate = ss_curr_prev == 1 ? Util.NumDec(objConstants_mstr_rec_2.CONST_WCB_CURR) : Util.NumDec(objConstants_mstr_rec_2.CONST_WCB_PREV);  // 1: curr 2: prev   const_wcb[ss_curr_prev];
            }
            else
            {
                ws_hold_wcb_rate = 1;
            }

            // if (diskette-claim  and override-with-rma-prices  ) then      
            if (flag_claim_source.Equals(diskette_claim) && flag_retain_prices.Equals(override_with_rma_prices))
            {
                // 	    perform ya5-reset-nbr-services-value	thru ya5-99-exit;
                //             varying ss;
                //             from 1 by 1;
                //             until   ss > ss-clmdtl-oma.;

                ss = 1;
                do
                {
                    await ya5_reset_nbr_services_value();
                    await ya5_99_exit();
                    ss++;
                } while (ss <= ss_clmdtl_oma);
            }

            ws_reduc_rate = 1;

            //     perform ya2-find-add-on-reduc-rate          thru ya2-99-exit;
            //         varying subs;
            //         from 1 by 1;
            //         until   subs > const-max-nbr-rates.;

            objConstants_mstr_rec_2 = new CONSTANTS_MSTR_REC_2
            {
                WhereConst_rec_nbr = 2
            }.Collection().FirstOrDefault();

            subs = 1;
            do
            {
                await ya2_find_add_on_reduc_rate();
                await ya2_99_exit();
                subs++;
            } while (subs <= Util.NumInt(objConstants_mstr_rec_2.CONST_MAX_NBR_RATES));

            //     perform yb0-calc-basic-fee                  thru yb0-99-exit;
            //         varying ss;
            //         from 1 by 1;
            //         until   ss > ss-clmdtl-oma.;

            ss = 1;
            do
            {
                string retval = await yb0_calc_basic_fee();
                if (retval.ToLower().Equals("yb0_98_technical"))
                {
                    goto _yb0_98_technical;
                }
                await yb0_50();

                _yb0_98_technical:
                await yb0_98_technical();
                await yb0_99_exit();
                ss++;
            } while (ss <= ss_clmdtl_oma);

            //  if ss-clmdtl-oma = 1  then            
            if (ss_clmdtl_oma == 1)
            {
                //         go to ya0-98-display-fees.;               
                return "ya0_98_display_fees";
            }

            //  perform ya1-display-fees                    thru ya1-99-exit.;
            await ya1_display_fees();
            await ya1_99_exit();


            //  if password-input = password-special-privledges then            
            if (password_input == password_special_privledges)
            {
                err_ind = 90;
                // 	    perform za0-common-error		thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            ss = 1;
            ss2 = 1;

            //  perform yc0-sort-by-icc-and-fee             thru yc0-99-exit;
            //                 until ss2 not < ss-clmdtl-oma.;

            do
            {
                await yc0_sort_by_icc_and_fee();
                await yc0_99_exit();
                //ss2++;
            } while (ss2 < ss_clmdtl_oma);


            flag_sec_reduction_needed = "N";
            ss_grp_tot = 0;
            hold_grp_totals_tbl_grp = "0";
            hold_grp_tot = new decimal[91];
            hold_grp_nbr = new string[91];
            hold_grp_nbr_sec = new int[91];
            hold_grp_nbr_grp = new int[91];

            ss_sec = 1;
            ss_grp = 1;
            hold_flag_sec[1] = 1;
            hold_flag_grp[1] = 1;
            hold_flag_sec_group[1] = Util.Str(hold_flag_sec[1]) + Util.Str(hold_flag_grp[1]);

            //     perform yd0-set-icc-sort-flags              thru yd0-99-exit;
            //         varying ss;
            //         from 2 by 1;
            //         until   ss > ss-clmdtl-oma.;

            ss = 2;
            do
            {
                await yd0_set_icc_sort_flags();
                await yd0_99_exit();
                ss++;
            } while (ss <= ss_clmdtl_oma);


            ss_hold_clmdtl_oma = ss_clmdtl_oma;

            //     perform xa0-display-details                 thru xa0-99-exit;
            //                  varying ss-clmdtl-oma;
            //                  from 1;
            //                  by 1;
            //                  until   ss-clmdtl-oma > ss-hold-clmdtl-oma;
            //                       or ss-clmdtl-oma > ss-max-nbr-oma-det-rec-allow.;

            ss_clmdtl_oma = 1;
            do
            {
                await xa0_display_details();
                await xa0_99_exit();
                ss_clmdtl_oma++;
            } while (ss_clmdtl_oma <= ss_hold_clmdtl_oma && ss_clmdtl_oma <= ss_max_nbr_oma_det_rec_allow);

            ss_clmdtl_oma = ss_hold_clmdtl_oma;

            //  if password-input = password-special-privledges then        
            if (password_input == password_special_privledges)
            {
                err_ind = 91;
                //       perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            //  perform ye0-group-reductions                thru ye0-99-exit;
            //         varying ss;
            //        from 1 by 1;
            //         until   ss > ss-clmdtl-oma;
            //              or ss > (ss-max-nbr-oma-det-rec-allow - 1) .;

            ss = 1;
            do
            {
                await ye0_group_reductions();
                await ye0_99_exit();
                ss++;
            } while (ss <= ss_clmdtl_oma && ss <= (ss_max_nbr_oma_det_rec_allow - 1));


            //     perform ya1-display-fees                    thru ya1-99-exit.;
            await ya1_display_fees();
            await ya1_99_exit();


            //  if password-input = password-special-privledges then       
            if (password_input == password_special_privledges)
            {
                err_ind = 92;
                //  perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            //  if flag-sec-reduction-needed = "N" then            
            if (flag_sec_reduction_needed == "N")
            {
                //     go to ya0-98-display-fees.;                
                return "ya0_98_display_fees";
            }

            ss_from = 1;
            ss_to = 0;

            return string.Empty;
        }

        // pricing_logic.rtn
        private async Task ya0_calc_sectional_reductions()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya0_calc_sectional_reductions");

            //  if hold-icc-sec (ss-from) not = "SP" then            
            if (hold_icc_sec[ss_from] != "SP")
            {
                ss_to = ss_from;
                //  go to ya0-increment-ss-from.;
                await ya0_increment_ss_from();
                return;
            }

            //   perform yh0-find-high-grp-within-sec        thru yh0-99-exit.;
            await yh0_find_high_grp_within_sec();
            await yh0_100_find_sp_suffix_a();
            await yh0_99_exit();


            //  if online-claim then          
            if (flag_claim_source.Equals(online_claim))
            {
                await display_hold_desc();
                //         display scr-acpt-det-desc.;
                Display("scr-acpt-det-desc.");
            }

            // if password-input = password-special-privledges  then       
            if (password_input == password_special_privledges)
            {
                err_ind = 94;
                //  perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            //     perform yi0-sec-reduct-within-sec           thru yi0-99-exit;
            //                 varying ss;
            //                 from ss-from by 1;
            //                 until   ss > ss-to.;

            ss = ss_from;
            do
            {
                await yi0_sec_reduct_within_sec();
                await yi0_99_exit();
                ss++;
            } while (ss <= ss_to);

        }

        // pricing_logic.rtn
        private async Task ya0_increment_ss_from()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya0_increment_ss_from");

            // if ss-to < ss-clmdtl-oma then            
            if (ss_to < ss_clmdtl_oma)
            {
                //    add  1, ss-to                           giving  ss-from;
                ss_from = ss_to + 1;
                ss_to = 0;
                //    perform ya1-display-fees                thru    ya1-99-exit;
                await ya1_display_fees();
                await ya1_99_exit();

                //   if password-input = password-special-privledges then            
                if (_password_input == password_special_privledges)
                {
                    err_ind = 95;
                    //    perform za0-common-error                thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //         go to ya0-calc-sectional-reductions;
                    await ya0_calc_sectional_reductions();
                    return;
                }
                else
                {
                    //    go to ya0-calc-sectional-reductions.;
                    await ya0_calc_sectional_reductions();
                    return;
                }
            }
        }

        // pricing_logic.rtn
        private async Task ya0_98_display_fees()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya0_98_display_fees");

            //  perform yf0-add-on-increases                thru yf0-99-exit;
            //        varying ss;
            //         from 1 by 1;
            //         until   ss > ss-clmdtl-oma.;

            ss = 1;
            do
            {
                await yf0_add_on_increases();
                await yf0_99_exit();
                ss++;
            } while (ss <= ss_clmdtl_oma);

            //  perform ya1-display-fees                    thru ya1-99-exit.;
            await ya1_display_fees();
            await ya1_99_exit();

            //  if password-input = password-special-privledges then         
            if (password_input == password_special_privledges)
            {
                err_ind = 93;
                //     perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            //  perform yf1-special-add-on-incr             thru yf1-99-exit;
            //         varying ss;
            //         from 1 by 1;
            //         until   ss > ss-clmdtl-oma.;

            ss = 1;
            do
            {
                await yf1_special_add_on_incr();
                await yf1_99_exit();
                ss++;
            } while (ss <= ss_clmdtl_oma);


            //     perform ya1-display-fees                    thru ya1-99-exit.;
            await ya1_display_fees();
            await ya1_99_exit();

            //  if password-input = password-special-privledges then            
            if (password_input == password_special_privledges)
            {
                err_ind = 96;
                //  perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            //     perform ya1-display-fees                    thru ya1-99-exit.;
            await ya1_display_fees();
            await ya1_99_exit();

            // if password-input = password-special-privledges then            
            if (password_input == password_special_privledges)
            {
                err_ind = 97;
                //  perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            //  perform test-min-max-limits                 thru test-min-max-limits-99-exit;
            //         varying ss;
            //         from 1 by 1;
            //         until   ss > ss-clmdtl-oma.;

            ss = 1;
            do
            {
                await test_min_max_limits();
                await test_min_max_limits_99_exit();
                ss++;
            } while (ss <= ss_clmdtl_oma);

            flag_zero_fee = "Y";
            //     perform ya1-display-fees                    thru ya1-99-exit.;
            await ya1_display_fees();
            await ya1_99_exit();

            // if password-input = password-special-privledges  then            
            if (password_input == password_special_privledges)
            {
                err_ind = 98;
                //     perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            // if not online-claim then       
            if (!flag_claim_source.Equals(online_claim))
            {
                // 	   perform yz0-reset-verify-prices      thru yz0-99-exit.;
                await yz0_reset_verify_prices();
                await yz0_99_exit();
            }

            //  perform ya3-calc-priced-tech                thru ya3-99-exit;
            //         varying ss;
            //         from 1;
            //         by   1;
            //         until   ss > ss-clmdtl-oma.;

            ss = 1;
            do
            {
                await ya3_calc_priced_tech();
                await ya3_99_exit();
                ss++;
            } while (ss <= ss_clmdtl_oma);

            //     perform ya1-display-fees                    thru ya1-99-exit.;
            await ya1_display_fees();
            await ya1_99_exit();

            //  if password-input = password-special-privledges then             
            if (password_input == password_special_privledges)
            {
                err_ind = 99;
                //  perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            ss = 1;
            ss2 = 1;

            //  perform yj0-sort-by-orig-line-no            thru yj0-99-exit;
            //                 until ss2 not < ss-clmdtl-oma.;

            do
            {
                await yj0_sort_by_orig_line_no();
                await yj0_99_exit();
                ss2++;
            } while (ss2 < ss_clmdtl_oma);


            //  perform ya1-display-fees                    thru ya1-99-exit.;
            await ya1_display_fees();
            await ya1_99_exit();

            //  if password-input = password-special-privledges  then            
            if (password_input == password_special_privledges)
            {
                err_ind = 100;
                //   perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

        }

        // pricing_logic.rtn
        private async Task ya0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task ya1_display_fees()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya1_display_fees");

            ss_hold_clmdtl_oma = ss_clmdtl_oma;

            //     perform ya11-disp-oma-fees                  thru ya11-99-exit;
            //                 varying ss-clmdtl-oma;
            //                 from 1;
            //                 by   1;
            //                 until   ss-clmdtl-oma > ss-hold-clmdtl-oma;
            //                      or ss-clmdtl-oma > ss-max-nbr-oma-det-rec-allow.;

            ss_clmdtl_oma = 1;
            do
            {
                await ya11_disp_oma_fees();
                await ya11_99_exit();
                ss_clmdtl_oma++;
            } while (ss_clmdtl_oma <= ss_hold_clmdtl_oma && ss_clmdtl_oma <= ss_max_nbr_oma_det_rec_allow);

            ss_clmdtl_oma = ss_hold_clmdtl_oma;
        }

        // pricing_logic.rtn
        private async Task ya1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya1_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task ya11_disp_oma_fees()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya11_disp_oma_fees");

            // if online-claim then           
            if (flag_claim_source.Equals(online_claim))
            {
                //         next sentence;
            }
            else
            {
                //   go to ya11-99-exit.;
                await ya11_99_exit();
                return;
            }

            //     add ss-clmdtl-oma;
            //         10                              giving pline.;
            pline = ss_clmdtl_oma + 10;

            //     display scr-hold-oma-cd.;            
            await display_hold_oma_cd(pline, ss_clmdtl_oma);

            //     display scr-hold-oma-suff.;            
            await display_hold_oma_suff(pline, ss_clmdtl_oma);

            //     display scr-hold-sv-date-yy-12.;            
            await display_hold_sv_date_yy_12_1(pline, ss_clmdtl_oma);

            //     display scr-hold-sv-date-yy-34.;            
            await display_hold_sv_date_yy_34_1(pline, ss_clmdtl_oma);

            //     display scr-hold-sv-date-mm.;            
            await display_hold_sv_date_mm(pline, ss_clmdtl_oma);

            //     display scr-hold-sv-date-dd.;            
            await display_hold_sv_date_dd(pline, ss_clmdtl_oma);

            //     display scr-hold-sv-nbr-0;            
            await display_hold_sv_nbr(pline, ss_clmdtl_oma);

            // display scr-hold-fee-oma.;            
            await display_hold_fee_oma(pline, ss_clmdtl_oma);

            //     display scr-hold-fee-ohip.;            
            await display_hold_fee_ohip(pline, ss_clmdtl_oma);

            await display_hold_icc_cd(pline, ss_clmdtl_oma);

            await display_hold_flag_sec_group(pline, ss_clmdtl_oma);

            //  if  hold-fee-ohip(ss-clmdtl-oma) = 0 and flag-zero-fee = 'Y'  then       
            if (hold_fee_ohip[ss_clmdtl_oma] == 0 && flag_zero_fee == "Y")
            {
                e1_error_word = "*Warning_";
                err_ind = 59;
                //    perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                e1_error_word = "*Error_";
            }

        }

        // pricing_logic.rtn
        private async Task ya11_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya11_disp_oma_fees");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task ya2_find_add_on_reduc_rate()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya2_find_add_on_reduc_rate");

            ss_curr_prev = hold_ss_curr_prev[1];


            // GW2019. Added Scaling
            // if const-section-group (subs) = 'SP98' then           
            if (CONST_SECTION(objConstants_mstr_rec_2, subs) + Util.Str(CONST_GROUP(objConstants_mstr_rec_2, subs)).PadLeft(2, '0') == "SP98")
            {
                ws_reduc_rate98 = ss_curr_prev == 1 ? CONST_RATE_CURR(objConstants_mstr_rec_2, subs) : CONST_RATE_PREV(objConstants_mstr_rec_2, subs);  //const_rates_curr_prev[subs, ss_curr_prev];
                ws_reduc_rate98 = ws_reduc_rate98 / 100;    // GW2019 Added
            }
            // else if const-section-group (subs) = 'SP99'  then            
            else if (CONST_SECTION(objConstants_mstr_rec_2, subs) + Util.Str(CONST_GROUP(objConstants_mstr_rec_2, subs)).PadLeft(2, '0') == "SP99")
            {
                ws_reduc_rate99 = ss_curr_prev == 1 ? CONST_RATE_CURR(objConstants_mstr_rec_2, subs) : CONST_RATE_PREV(objConstants_mstr_rec_2, subs); //const_rates_curr_prev[subs, ss_curr_prev];
                ws_reduc_rate99 = ws_reduc_rate99 / 100;   // GW2019 Added
            }
            else
            {
                ws_reduc_rate98 = 1;
                ws_reduc_rate99 = 1;
            }

        }

        // pricing_logic.rtn
        private async Task ya2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya2_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task ya3_calc_priced_tech()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya3_calc_priced_tech");

            // if def-agent-wcb and not hold-fee-ohip-r(ss) = 0  and not hold-fee-oma-r (ss) = 0  then                       
            // if (def_agent_code.Equals(def_agent_wcb) && hold_fee_ohip_r[ss] != 0  &&  hold_fee_oma_r[ss] != 0  ) {
            if (def_agent_code.Equals(def_agent_wcb) && hold_fee_ohip[ss] != 0 && hold_fee_oma[ss] != 0)
            {
                //         perform ya4-round-wcb                   thru ya4-99-exit.;
                await ya4_round_wcb();
                await ya4_99_exit();
            }

            // if  hold-basic-tech(ss) = 0 or hold-basic-fee (ss) = 0  or hold-fee-ohip  (ss) = 0 then            
            if (hold_basic_tech[ss] == 0 || hold_basic_fee[ss] == 0 || hold_fee_ohip[ss] == 0)
            {
                hold_priced_tech[ss] = 0;
            }
            else
            {
                //     compute hold-priced-tech(ss) rounded =  (hold-basic-tech(ss) * hold-fee-ohip(ss)) / hold-basic-fee(ss).            
                hold_priced_tech[ss] = Util.Round((hold_basic_tech[ss] * hold_fee_ohip[ss]) / hold_basic_fee[ss], 2);    // todo: watchout for rounded....???
            }
        }

        // pricing_logic.rtn
        private async Task ya3_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya3_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task ya4_round_wcb()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya4_round_wcb");

            //     divide hold-fee-ohip-r(ss)  by 5;
            //         giving ws-hold-temp-3 remainder ws-hold-temp-2.;

            hold_fee_ohip_r[ss] = Util.NumInt(hold_fee_ohip[ss]);
            ws_hold_temp_3 = Util.NumInt(hold_fee_ohip[ss] / 5);
            ws_hold_temp_2 = Util.NumInt(hold_fee_ohip[ss] % 5);

            // if ws-hold-temp-2 < 3 then            
            if (ws_hold_temp_2 < 3)
            {
                //         subtract ws-hold-temp-2 from hold-fee-ohip-r(ss);
                hold_fee_ohip_r[ss] = hold_fee_ohip_r[ss] - ws_hold_temp_2;
            }
            else
            {
                //         subtract ws-hold-temp-2 from 5 giving ws-hold-temp-2;
                ws_hold_temp_2 = 5 - ws_hold_temp_2;
                //         add      ws-hold-temp-2 to   hold-fee-ohip-r(ss).;
                hold_fee_ohip_r[ss] = hold_fee_ohip_r[ss] + ws_hold_temp_2;
                hold_fee_ohip[ss] = hold_fee_ohip_r[ss];  // todo.... added   Assign redefines to the parent.

            }

            //     divide hold-fee-oma-r(ss)   by 5;
            //         giving ws-hold-temp-3 remainder ws-hold-temp-2.;
            hold_fee_oma_r[ss] = Util.NumInt(hold_fee_oma[ss]);
            ws_hold_temp_3 = Util.NumInt(hold_fee_oma_r[ss] / 5);
            ws_hold_temp_2 = Util.NumInt(hold_fee_oma_r[ss] % 5);

            // if ws-hold-temp-2 < 3  then;            
            if (ws_hold_temp_2 < 3)
            {
                //         subtract ws-hold-temp-2 from hold-fee-oma-r(ss);
                hold_fee_oma_r[ss] = hold_fee_oma_r[ss] - ws_hold_temp_2;
                hold_fee_oma[ss] = hold_fee_oma_r[ss];
            }
            else
            {
                //      subtract ws-hold-temp-2 from 5 giving ws-hold-temp-2;
                ws_hold_temp_2 = 5 - ws_hold_temp_2;
                //      add      ws-hold-temp-2 to   hold-fee-oma-r(ss).;
                hold_fee_oma_r[ss] = hold_fee_oma_r[ss] + ws_hold_temp_2;
                hold_fee_oma[ss] = hold_fee_oma_r[ss];
            }
        }

        // pricing_logic.rtn
        private async Task ya4_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya4_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task ya5_reset_nbr_services_value()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya5_reset_nbr_services_value");

            // if hold-sv-nbr-serv(ss) not = 0 then            
            if (hold_sv_nbr_serv[ss] != 0)
            {
                // 	   if hold-oma-suff(ss) = "B" then            
                if (hold_oma_suff[ss] == "B")
                {
                    // 	       if hold-oma-cd(ss) = "E400" or "E401" then            
                    if (hold_oma_cd[ss] == "E400" || hold_oma_cd[ss] == "E401")
                    {
                        hold_sv_nbr_serv[ss] = 0;
                    }
                    else
                    {
                        //            subtract hold-oma-fee-asst (ss,ohip);
                        // 					from   hold-sv-nbr-serv(ss);
                        // 				 	giving hold-sv-nbr-serv(ss);
                        hold_sv_nbr_serv[ss] = hold_sv_nbr_serv[ss] - hold_oma_fee_asst[ss, ohip];
                    }
                }
                // 	   else if hold-oma-suff(ss) = "C" 	then            
                else if (hold_oma_suff[ss] == "C")
                {
                    // 	        if hold-oma-cd(ss) = "E400" or "E401" then            
                    if (hold_oma_cd[ss] == "E400" || hold_oma_cd[ss] == "E401")
                    {
                        hold_sv_nbr_serv[ss] = 0;
                    }
                    else
                    {
                        //             subtract hold-oma-fee-anae (ss,ohip);
                        // 					from   hold-sv-nbr-serv(ss);
                        // 					giving hold-sv-nbr-serv(ss).;
                        hold_sv_nbr_serv[ss] = hold_sv_nbr_serv[ss] - hold_oma_fee_anae[ss, ohip];
                    }
                }
            }
        }

        // pricing_logic.rtn
        private async Task ya5_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ya5_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task<string> yb0_calc_basic_fee()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yb0_calc_basic_fee");

            if (hold_oma_cd[ss] == "E409" || hold_oma_cd[ss] == "E412")
            {
                // 	next sentence.;
            }

            hold_flag_fee_used[ss] = "0";

            if (hold_sv_day[ss, 1] == "MR" || hold_sv_day[ss, 1] == "OP")
            {
                if (def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_ohip_wcb) || def_agent_code.Equals(def_agent_alternate_funding))
                {
                    ss_curr_prev = hold_ss_curr_prev[ss];
                    if (flag_claim_source.Equals(online_claim))
                    {
                        hold_fee_ohip[ss] = Util.Round(hold_fee_oma[ss] * (ss_curr_prev == 1 ? Util.NumDec(objConstants_mstr_rec_2.CONST_IC_CURR) : Util.NumDec(objConstants_mstr_rec_2.CONST_IC_PREV)), 2);   //const-ic(ss - curr - prev)
                        await display_hold_fee_ohip(ss);
                        return "yb0_98_technical";
                    }
                    else
                    {
                        hold_fee_ohip[ss] = Util.Round(hold_fee_incoming[ss] * (ss_curr_prev == 1 ? Util.NumDec(objConstants_mstr_rec_2.CONST_IC_CURR) : Util.NumDec(objConstants_mstr_rec_2.CONST_IC_PREV)), 2);  //const-ic(ss - curr - prev)
                        await display_hold_fee_ohip(ss);
                        return "yb0_98_technical";
                    }
                }
                else
                {
                    hold_fee_ohip[ss] = hold_fee_oma[ss];
                    await display_hold_fee_ohip(ss);
                    return "yb0_98_technical";
                }
            }

            if ((hold_oma_rec_ind[ss, ss_add_on_perc_or_flat_ind] == "P" || hold_oma_rec_ind[ss, ss_add_on_perc_or_flat_ind] == "F") && (hold_oma_suff[ss] != "B" || hold_oma_cd[ss] != "E676"))
            {
                hold_fee_oma[ss] = 0;
                await display_hold_fee_oma(ss);
                hold_fee_ohip[ss] = 0;
                await display_hold_fee_ohip(ss);
                return "yb0_98_technical";
            }

            ss_curr_prev = hold_ss_curr_prev[ss];

            if ((hold_icc_sec[ss] == "CV") || ((hold_icc_sec[ss] == "NM" || hold_icc_sec[ss] == "DR" || hold_icc_sec[ss] == "PF" || hold_icc_sec[ss] == "DU") && hold_oma_suff[ss] == "B") ||
                (hold_icc_sec[ss] == "SP" && (hold_oma_suff[ss] == "A" || hold_oma_suff[ss] == "M")) ||
                (hold_oma_cd[ss] == "E676" && hold_oma_suff[ss] == "B" && Util.Str(hold_sv_date[ss]).CompareTo("20110901") < 0) ||
                (hold_icc_sec[ss] == "CP" && (hold_oma_suff[ss] == "A" || hold_oma_suff[ss] == "M")) ||
                (hold_icc_sec[ss] == "DT" && (hold_oma_suff[ss] == "A" || hold_oma_suff[ss] == "M")))
            {
                hold_fee_oma[ss] = hold_oma_fee_1[ss, oma];
                await display_hold_fee_oma(ss);
                hold_fee_ohip[ss] = hold_oma_fee_1[ss, ohip];
                await display_hold_fee_ohip(ss);
                hold_flag_fee_used[ss] = "1";
            }
            else
            {
                if (((hold_icc_sec[ss] == "NM" || hold_icc_sec[ss] == "DR" || hold_icc_sec[ss] == "DU" || hold_icc_sec[ss] == "PF") && hold_oma_suff[ss] == "C"))
                {
                    hold_fee_oma[ss] = hold_oma_fee_2[ss, oma];
                    await display_hold_fee_oma(ss);
                    hold_fee_ohip[ss] = hold_oma_fee_2[ss, ohip];
                    await display_hold_fee_ohip(ss);
                    hold_flag_fee_used[ss] = "2";
                }
                else
                {
                    if (((hold_icc_sec[ss] == "NM" || hold_icc_sec[ss] == "DU" || hold_icc_sec[ss] == "PF" || hold_icc_sec[ss] == "DR") && (hold_oma_suff[ss] == "A" || hold_oma_suff[ss] == "M")))
                    {
                        hold_fee_oma[ss] = hold_oma_fee_2[ss, oma] + hold_oma_fee_1[ss, oma];
                        await display_hold_fee_oma(ss);
                        hold_fee_ohip[ss] = hold_oma_fee_1[ss, ohip] + hold_oma_fee_2[ss, ohip];
                        await display_hold_fee_ohip(ss);
                        hold_flag_fee_used[ss] = "3";
                    }
                    else
                    {
                        if (((hold_icc_sec[ss] == "CP" || hold_icc_sec[ss] == "DT" || hold_icc_sec[ss] == "SP") && hold_oma_suff[ss] == "C"))
                        {
                            if (ws_doc_spec_cd == 0)
                            {
                                hold_fee_oma[ss] = CONST_REG_GET(objConstants_mstr_rec_2, ss_curr_prev, 2);  //const_reg[ss_curr_prev, 2];
                                await display_hold_fee_oma(ss);
                                hold_fee_ohip[ss] = CONST_REG_GET(objConstants_mstr_rec_2, ss_curr_prev, 1);
                                await display_hold_fee_ohip(ss);
                            }
                            else
                            {
                                hold_fee_oma[ss] = CONST_CERT_GET(objConstants_mstr_rec_2, ss_curr_prev, 2);    //const_cert[ss_curr_prev, 2];
                                await display_hold_fee_oma(ss);
                                hold_fee_ohip[ss] = CONST_CERT_GET(objConstants_mstr_rec_2, ss_curr_prev, 1);
                                await display_hold_fee_ohip(ss);
                            }
                        }
                        else
                        {
                            if (hold_icc_sec[ss] == "SP" && hold_oma_suff[ss] == "B")
                            {
                                hold_fee_oma[ss] = CONST_ASST_GET(objConstants_mstr_rec_2, ss_curr_prev, 2);  //const_asst[ss_curr_prev, 2];
                                await display_hold_fee_oma(ss);
                                hold_fee_ohip[ss] = CONST_ASST_GET(objConstants_mstr_rec_2, ss_curr_prev, 1);
                                await display_hold_fee_ohip(ss);
                            }
                            else
                            {
                                //next sentence.;
                            }
                        }
                    }
                }
            }

            if (hold_sv_day[ss, 1] == "BI" && hold_oma_cd_alpha[ss] != "Z")
            {
                hold_fee_oma[ss] = Util.Round(hold_fee_oma[ss] * CONST_BILATERAL_GET(objConstants_mstr_rec_2, ss_curr_prev) / 100, 0);  // const-bilateral(ss - curr - prev);
                await display_hold_fee_oma(ss);
                hold_fee_ohip[ss] = Util.Round(hold_fee_ohip[ss] * CONST_BILATERAL_GET(objConstants_mstr_rec_2, ss_curr_prev) / 100, 0);   //const-bilateral(ss - curr - prev)
                await display_hold_fee_ohip(ss);
                return "yb0_50";
            }
            else
            {
                //next sentence.;
            }

            ws_tot_serv = hold_sv_nbr_serv[ss] + hold_sv_nbr[ss, 1] + hold_sv_nbr[ss, 2] + hold_sv_nbr[ss, 3];

            if ((hold_oma_suff[ss] == "B" || hold_oma_suff[ss] == "C") && !(hold_icc_sec[ss] == "NM" || hold_icc_sec[ss] == "PF" || hold_icc_sec[ss] == "DU"))
            {
                flag_desc_rec = "BT";
                string retval = await ym0_create_desc_record();

                if (retval.ToLower().Equals("ym0_90_display"))
                {
                    await ym0_90_display();
                }
                else if (retval.ToLower().Equals("ym0_99_exit"))
                {
                    await ym0_99_exit();
                }
            }
            else
            {
                //next sentence.;
            }

            if (hold_oma_suff[ss] == "C" && (hold_icc_sec[ss] == "CP" || hold_icc_sec[ss] == "DT" || hold_icc_sec[ss] == "SP"))
            {
                hold_fee_oma[ss] = Util.Round(hold_fee_oma[ss] * (ws_tot_serv + hold_oma_fee_anae[ss, oma]), 2);
                await display_hold_fee_oma(ss);
                hold_fee_ohip[ss] = Util.Round(hold_fee_ohip[ss] * (ws_tot_serv + hold_oma_fee_anae[ss, ohip]), 2);
                await display_hold_fee_ohip(ss);
                hold_sv_nbr_serv[ss] = hold_sv_nbr_serv[ss] + hold_oma_fee_anae[ss, ohip];
                nbr_of_services = nbr_of_services + hold_oma_fee_anae[ss, ohip];

                last_claim_flag = Util.Str(nbr_of_services).PadLeft(3, '0');

                if (flag_claim_source.Equals(online_claim))
                {
                    Display("scr-last-claim-lit.", "scr-last-claim");
                    return "yb0_50";
                }
                else
                {
                    return "yb0_50";
                }
            }
            else
            {
                //next sentence.;
            }

            if (hold_oma_suff[ss] == "B" && hold_icc_sec[ss] == "SP")
            {
                hold_fee_oma[ss] = Util.Round(hold_fee_oma[ss] * (ws_tot_serv + hold_oma_fee_asst[ss, oma]), 2);
                await display_hold_fee_oma(ss);
                hold_fee_ohip[ss] = Util.Round(hold_fee_ohip[ss] * (ws_tot_serv + hold_oma_fee_asst[ss, ohip]), 2);
                await display_hold_fee_ohip(ss);
                hold_sv_nbr_serv[ss] = hold_sv_nbr_serv[ss] + hold_oma_fee_asst[ss, ohip];
                nbr_of_services = nbr_of_services + hold_oma_fee_asst[ss, ohip];
                last_claim_flag = Util.Str(nbr_of_services).PadLeft(3, '0');
                Display("scr-last-claim-lit.", "scr-last-claim");
                return "yb0_50";
            }
            else
            {
                //next sentence.;
            }

            hold_fee_oma[ss] = Util.Round(hold_fee_oma[ss] * ws_tot_serv, 2);
            await display_hold_fee_oma(ss);
            hold_fee_ohip[ss] = Util.Round(hold_fee_ohip[ss] * ws_tot_serv, 2);
            await display_hold_fee_ohip(ss);

            return string.Empty;
        }

        private async Task yb0_50()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yb0_50");

            // if def-agent-wcb then            
            if (def_agent_code.Equals(def_agent_wcb))
            {
                //    compute hold-fee-ohip (ss) rounded = hold-fee-ohip (ss) * const-wcb( ss-curr-prev);
                hold_fee_ohip[ss] = Util.Round((hold_fee_ohip[ss] * CONST_WCB_GET(objConstants_mstr_rec_2, ss_curr_prev)) / 100000, 0);  //const-wcb(ss - curr - prev)

                //        move hold-fee - ohip(ss)        to hold-fee - oma(ss)
                hold_fee_oma[ss] = hold_fee_ohip[ss];
            }
            // else  if def-agent-bill-direct  or def-agent-foreign-direct   or def-agent-ifhp-direct or def-agent-ontario-direct or def-agent-quebec-direct  then
            else if (def_agent_code.Equals(def_agent_bill_direct) || def_agent_code.Equals(def_agent_foreign_direct) || def_agent_code.Equals(def_agent_ifhp_direct) || def_agent_code.Equals(def_agent_ontario_direct) || def_agent_code.Equals(def_agent_quebec_direct))
            {
                //         move hold-fee-oma (ss)      to hold-fee-ohip (ss)
                hold_fee_ohip[ss] = hold_fee_oma[ss];
            }
            else
            {
                //            next sentence.;
            }
        }

        // pricing_logic.rtn
        private async Task yb0_98_technical()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yb0_98_technical");

            // if hold-sv-day ( ss, 1) = "ER" and clmhdr-clinic-nbr-1-2 = "88"  and site-id = "RMA"  and (hold-oma-cd-alpha ( ss ) = "D" or "F")  then            
            if (
                hold_sv_day[ss, 1] == "ER" && clmhdr_clinic_nbr_1_2 == 88 && site_id == "RMA" && (hold_oma_cd_alpha[ss] == "D" || hold_oma_cd_alpha[ss] == "F")
                )
            {
                //  compute hold-fee-oma  (ss) rounded = hold-fee-oma  (ss) * .75;
                hold_fee_oma[ss] = Util.Round(hold_fee_oma[ss] * .75M, 2);
                //  compute hold-fee-ohip (ss) rounded = hold-fee-ohip (ss) * .75;
                hold_fee_ohip[ss] = Util.Round(hold_fee_ohip[ss] * .75M, 2);
            }
            else
            {
                //          next sentence.;
            }

            // if  hold-oma-cd(ss) = "G259" and hold-oma-suff(ss)  = "A" and clmhdr-loc = "G420"  and clmhdr-i-o-pat-ind = "I"  then            
            if (
                hold_oma_cd[ss] == "G259" && hold_oma_suff[ss] == "A" && clmhdr_loc == "G420" && clmhdr_i_o_pat_ind == "I"
                )
            {
                //  	compute hold-fee-ohip(ss) = hold-fee-ohip(ss) * .85;
                hold_fee_ohip[ss] = hold_fee_ohip[ss] * .85M;
                flag_desc_rec = "A";
                //     perform ym0-create-desc-record	       thru ym0-99-exit;
                await ym0_create_desc_record();
                await ym0_90_display();
            }
            else
            {
                //         next sentence.;
            }

            hold_basic_fee[ss] = hold_fee_ohip[ss];

            // if  hold-oma-rec-ind (ss,ss-tech-ind) = "Y" or hold-oma-suff    (ss) = 'B'   then         
            if (hold_oma_rec_ind[ss, ss_tech_ind] == "Y" || hold_oma_suff[ss] == "B")
            {
                hold_basic_tech[ss] = hold_basic_fee[ss];
            }
            // else  if hold-oma-suff(ss) = 'C'  then            
            else if (hold_oma_suff[ss] == "C")
            {
                hold_basic_tech[ss] = 0;
            }
            // else  if hold-icc-sec(ss) = 'NM' or 'DR' or 'DU' or 'PF' then            
            else if (hold_icc_sec[ss] == "NM" || hold_icc_sec[ss] == "DR" || hold_icc_sec[ss] == "DU" || hold_icc_sec[ss] == "PF")
            {
                hold_basic_tech[ss] = hold_oma_fee_1[ss, ohip];
                hold_basic_prof[ss] = hold_oma_fee_2[ss, ohip];
                //     perform yb1-compute-basic-tech  thru yb1-99-exit;
                await yb1_compute_basic_tech();
                await yb1_99_exit();
            }
            else
            {
                hold_basic_tech[ss] = 0;
            }

        }

        // pricing_logic.rtn
        private async Task yb0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yb0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yb1_compute_basic_tech()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yb1_compute_basic_tech");

            //     add hold-basic-tech(ss), hold-basic-prof(ss) giving ws-hold-temp-1.;
            ws_hold_temp_1 = hold_basic_tech[ss] + hold_basic_prof[ss];

            // if ws-hold-temp-1 = zero  then            
            if (ws_hold_temp_1 == 0)
            {
                hold_basic_tech[ss] = 0;
            }
            else
            {
                //    compute hold-basic-tech(ss) rounded = hold-basic-tech(ss) * (hold-basic-fee(ss) / ws-hold-temp-1).            
                hold_basic_tech[ss] = Util.Round(hold_basic_tech[ss] * (hold_basic_fee[ss] / ws_hold_temp_1), 2);
            }
        }

        // pricing_logic.rtn
        private async Task yb1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yb1_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yc0_sort_by_icc_and_fee()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yc0_sort_by_icc_and_fee");

            // if hold-sort-key-1 (ss) > hold-sort-key-1 (ss + 1) then            
            if (Util.Str(hold_sort_key_1[ss]).CompareTo(Util.Str(hold_sort_key_1[ss + 1])) > 0)
            {
                hold_sort_oma_rec = hold_oma_rec[ss];
                // move hold-oma-rec (ss + 1)      to hold-oma-rec (ss)
                hold_oma_rec[ss] = hold_oma_rec[ss + 1];
                hold_oma_rec[ss + 1] = hold_sort_oma_rec;
                //    if ss > 1 then            
                if (ss > 1)
                {
                    //             subtract 1 from ss;
                    ss--;
                    //             go to yc0-sort-by-icc-and-fee;
                    await yc0_sort_by_icc_and_fee();
                    return;
                }
                else
                {
                    //             next sentence;
                }
            }
            // else  if hold-sort-key-1 (ss) = hold-sort-key-1 (ss + 1) then;            
            else if (Util.Str(hold_sort_key_1[ss]) == Util.Str(hold_sort_key_1[ss + 1]))
            {
                //  if hold-fee-ohip (ss) < hold-fee-ohip (ss + 1) then;            
                if (hold_fee_ohip[ss] < hold_fee_ohip[ss + 1])
                {
                    hold_sort_oma_rec = Util.Str(hold_oma_rec[ss]);
                    //        move hold-oma - rec(ss + 1)      to hold-oma - rec(ss)
                    hold_oma_rec[ss] = Util.Str(hold_oma_rec[ss + 1]);
                    hold_oma_rec[ss + 1] = Util.Str(hold_sort_oma_rec);
                    //         if ss > 1 then            
                    if (ss > 1)
                    {
                        //                subtract 1 from ss;
                        if (ss > 1)
                        {
                            ss--;
                        }
                        //                go to yc0-sort-by-icc-and-fee.;
                        await yc0_sort_by_icc_and_fee();
                        return;
                    }
                }
            }

            //     add 1,  ss2                                 giving ss2;
            //                                                        ss.;
            ss2 = ss2 + 1;
            ss = ss2 + 1;

        }

        // pricing_logic.rtn
        private async Task yc0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yc0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yj0_sort_by_orig_line_no()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yj0_sort_by_orig_line_no");

            // if hold-line-no (ss) > hold-line-no (ss + 1) then;            
            if (hold_line_no[ss] > hold_line_no[ss + 1])
            {
                hold_sort_oma_rec = hold_oma_rec[ss];
                //    move hold-oma-rec (ss + 1)      to hold-oma-rec (ss)
                hold_oma_rec[ss] = hold_oma_rec[ss + 1];
                hold_oma_rec[ss + 1] = hold_sort_oma_rec;
                //    if ss > 1 then            
                if (ss > 1)
                {
                    //        subtract 1 from ss;
                    ss--;
                    //        go to yj0-sort-by-orig-line-no;
                    await yj0_sort_by_orig_line_no();
                    return;
                }
                else
                {
                    //             next sentence.;
                }
            }

            //     add 1,  ss2                                 giving ss2;
            //                                                        ss.;
            ss2 = ss2 + 1;
            ss = ss2 + 1;

        }

        // pricing_logic.rtn
        private async Task yj0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yj0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yd0_set_icc_sort_flags()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yd0_set_icc_sort_flags");

            // if hold-icc-sec (ss) = "SP" then;           
            if (hold_icc_sec[ss] == "SP")
            {
                flag_sec_reduction_needed = "Y";
            }

            // if  hold-sv-date    (ss) = hold-sv-date (ss - 1) and hold-oma-rec-ind(ss, ss-add-on-perc-or-flat-ind) <> "P"   and hold-oma-rec-ind(ss, ss-add-on-perc-or-flat-ind) <> "F" then            
            if (hold_sv_date[ss] == hold_sv_date[ss - 1] && hold_oma_rec_ind[ss, ss_add_on_perc_or_flat_ind] != "P" && hold_oma_rec_ind[ss, ss_add_on_perc_or_flat_ind] != "F")
            {
                //     if hold-icc-sec (ss) = hold-icc-sec (ss - 1) or hold-icc-sec (ss) = "SP" then            
                if (hold_icc_sec[ss] == hold_icc_sec[ss - 1] || hold_icc_sec[ss] == "SP")
                {
                    //         if hold-icc-grp       (ss) = hold-icc-grp (ss - 1) and  (    (hold-icc-cd  (ss) not = "SP00") or (hold-icc-grp (ss) not = "00"  ) )  then     
                    if (
                        hold_icc_grp[ss] == hold_icc_grp[ss - 1] && ((hold_icc_cd[ss] != "SP00") || (hold_icc_grp[ss] != 0))
                        )
                    {
                        //              move hold-flag - sec(ss - 1) to hold-flag - sec(ss)
                        hold_flag_sec[ss] = hold_flag_sec[ss - 1];
                        //               move hold-flag - grp(ss - 1) to hold-flag - grp(ss)
                        hold_flag_grp[ss] = hold_flag_grp[ss - 1];
                        hold_flag_sec_group[ss] = Util.Str(hold_flag_sec[ss]) + Util.Str(hold_flag_grp[ss]);
                        //              go to yd0-99-exit;
                        await yd0_99_exit();
                        return;
                    }
                    else
                    {
                        //              move hold-flag-sec (ss - 1)     to     hold-flag-sec (ss)
                        hold_flag_sec[ss] = hold_flag_sec[ss - 1];
                        //              add  1, ss-grp          giving ss-grp;
                        //                                                        hold-flag-grp (ss);
                        ss_grp = ss_grp + 1;
                        hold_flag_grp[ss] = ss_grp;
                        hold_flag_sec_group[ss] = Util.Str(hold_flag_sec[ss]) + Util.Str(hold_flag_grp[ss]);
                        //              go to yd0-99-exit.;
                        await yd0_99_exit();
                        return;
                    }
                }
            }

            //     add 1, ss-sec                               giving ss-sec;
            //                                                        hold-flag-sec (ss).;

            ss_sec = ss_sec + 1;
            hold_flag_sec[ss] = ss_sec;

            ss_grp = 1;
            hold_flag_grp[ss] = 1;
            hold_flag_sec_group[ss] = Util.Str(hold_flag_sec[ss]) + Util.Str(hold_flag_grp[ss]);

        }

        // pricing_logic.rtn
        private async Task yd0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yd0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task ye0_group_reductions()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ye0_group_reductions");

            //     add ss, 1                           giving ss-plus-one.;
            ss_plus_one = ss + 1;

            //  if hold-flag-sec-group (ss)  = hold-flag-sec-group (ss-plus-one) and (hold-icc-grp (ss) not = "00") and (hold-sv-day ( ss, 1)  not = "BI") and (hold-sv-day ( ss, 1)  not = "MR") and (hold-sv-day ( ss, 1)  not = "OP")  then            
            if (
                hold_flag_sec_group[ss] == hold_flag_sec_group[ss_plus_one] && (Util.Str(hold_icc_grp[ss]) != "00") && (hold_sv_day[ss, 1] != "BI") && (hold_sv_day[ss, 1] != "MR") && (hold_sv_day[ss, 1] != "OP")
                )
            {
                rate_found_ss = 0;
                //         perform ye1-find-group-rate     thru ye1-99-exit;
                //                 varying ss-x;
                //                 from 1 by 1;
                //                 until    rate-found-ss not = 0;
                //                       or ss-x > const-max-nbr-rates;
                ss_x = 1;
                do
                {
                    await ye1_find_group_rate();
                    await ye1_99_exit();
                    ss_x++;
                } while (rate_found_ss == 0 && ss_x <= Util.NumInt(objConstants_mstr_rec_2.CONST_MAX_NBR_RATES));

                ss_curr_prev = hold_ss_curr_prev[ss];
                //     if rate-found-ss not = 0 then            
                if (rate_found_ss != 0)
                {
                    //   compute hold-fee-ohip (ss-plus-one)  rounded = hold-fee-ohip (ss-plus-one) * const-rates-curr-prev ( rate-found-ss, ss-curr-prev); 
                    hold_fee_ohip[ss_plus_one] = Util.Round(hold_fee_ohip[ss_plus_one] * ((ss_curr_prev == 1 ? CONST_RATE_CURR(objConstants_mstr_rec_2, rate_found_ss) : CONST_RATE_PREV(objConstants_mstr_rec_2, rate_found_ss))/100), 0);    //const-rates - curr - prev(rate - found - ss, ss - curr - prev);
                    //   compute hold-fee-oma  (ss-plus-one)  rounded = hold-fee-oma  (ss-plus-one) * const-rates-curr-prev ( rate-found-ss, ss-curr-prev).;                    
                    hold_fee_oma[ss_plus_one] = Util.Round(hold_fee_oma[ss_plus_one] * ((ss_curr_prev == 1 ? CONST_RATE_CURR(objConstants_mstr_rec_2, rate_found_ss) : CONST_RATE_PREV(objConstants_mstr_rec_2, rate_found_ss))/100), 0);  //const-rates - curr - prev(rate - found - ss, ss - curr - prev).;
                }
            }
        }

        // pricing_logic.rtn
        private async Task ye0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ye0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task ye1_find_group_rate()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ye1_find_group_rate");

            // if const-section-group (ss-x) = hold-icc-cd (ss-plus-one) then            
            if (CONST_SECTION(objConstants_mstr_rec_2, ss_x) + Util.Str(CONST_GROUP(objConstants_mstr_rec_2, ss_x)).PadLeft(2, '0') == hold_icc_cd[ss_plus_one])
            {
                rate_found_ss = ss_x;
            }
        }

        // pricing_logic.rtn
        private async Task ye1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ye1_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yf0_add_on_increases()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf0_add_on_increases");

            // if hold-oma-cd (ss) = "E400" or "E409"  or "E412"  or "E401"  or "E410"  or "E413"  or "E420" or hold-sv-day(ss,1) = "MR" or "OP"  then            
            if (
                hold_oma_cd[ss] == "E400" || hold_oma_cd[ss] == "E409" || hold_oma_cd[ss] == "E412" || hold_oma_cd[ss] == "E401" || hold_oma_cd[ss] == "E410" || hold_oma_cd[ss] == "E413" ||
                hold_oma_cd[ss] == "E420" || hold_sv_day[ss, 1] == "MR" || hold_sv_day[ss, 1] == "OP"
                )
            {
                //         go to yf0-99-exit.;
                await yf0_99_exit();
                return;
            }

            //  if ws-special-add-on-cd-entered = "N" and (hold-oma-add-on-cd (ss, 1) = spaces  or  zeroes)  and (hold-oma-add-on-cd (ss, 2) = spaces  or  zeroes) and (hold-oma-add-on-cd (ss, 3) = spaces  or  zeroes)            
            //       and (hold-oma-add-on-cd (ss, 4) = spaces  or  zeroes) and (hold-oma-add-on-cd (ss, 5) = spaces  or  zeroes) and (hold-oma-add-on-cd (ss, 6) = spaces  or  zeroes) and (hold-oma-add-on-cd (ss, 7) = spaces  or  zeroes)            
            //       and (hold-oma-add-on-cd (ss, 8) = spaces  or  zeroes)  and (hold-oma-add-on-cd (ss, 9) = spaces  or  zeroes) and (hold-oma-add-on-cd (ss,10) = spaces  or  zeroes)  then            
            if (
                ws_special_add_on_cd_entered == "N" && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 1])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 1]) == 0)
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 2])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 2]) == 0)
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 3])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 3]) == 0)
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 4])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 4]) == 0)
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 5])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 5]) == 0)
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 6])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 6]) == 0)
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 7])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 7]) == 0)
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 8])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 8]) == 0)
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 9])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 9]) == 0)
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 10])) //|| Util.NumInt(hold_oma_add_on_cd[ss, 10]) == 0)
                )
            {
                //         next sentence;
            }
            else
            {
                //         perform yf2-search-oma-recs-4-addon-cd  thru yf2-99-exit;
                //             varying ss2;
                //             from 1 by 1;
                //             until   ss2 > ss-clmdtl-oma.;
                ss2 = 1;
                do
                {
                    string retval = await yf2_search_oma_recs_4_addon_cd();
                    if (retval.ToLower().Equals("yf2_99_exit"))
                    {
                        goto _yf2_99_exit;
                    }
                    else if (retval.ToLower().Equals("yf2_50"))
                    {
                        goto _yf2_50;
                    }

                    await yf2_30();

                    _yf2_50:
                    await yf2_50();

                    _yf2_99_exit:
                    await yf2_99_exit();
                    ss2++;
                } while (ss2 <= ss_clmdtl_oma);
            }
        }

        // pricing_logic.rtn
        private async Task yf0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task<string> yf2_search_oma_recs_4_addon_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf2_search_oma_recs_4_addon_cd");

            // if hold-sv-date (ss2) not = hold-sv-date (ss) then            
            if (hold_sv_date[ss2] != hold_sv_date[ss])
            {
                //         go to yf2-99-exit.;                
                return "yf2_99_exit";
            }

            // if hold-icc-cd (ss2) = 'SP98' then           
            if (hold_icc_cd[ss2] == "SP98")
            {
                ws_reduc_rate = ws_reduc_rate98;
            }
            // else if hold-icc-cd (ss2) = 'SP99'  then            
            else if (hold_icc_cd[ss2] == "SP99")
            {
                ws_reduc_rate = ws_reduc_rate99;
            }
            else
            {
                ws_reduc_rate = 1;
            }

            //     if hold-oma-cd (ss2) =    hold-oma-add-on-cd (ss, 1);
            //                            or hold-oma-add-on-cd (ss, 2);
            //                            or hold-oma-add-on-cd (ss, 3);
            //                            or hold-oma-add-on-cd (ss, 4);
            //                            or hold-oma-add-on-cd (ss, 5);
            //                            or hold-oma-add-on-cd (ss, 6);
            //                            or hold-oma-add-on-cd (ss, 7);
            //                            or hold-oma-add-on-cd (ss, 8);
            //                            or hold-oma-add-on-cd (ss, 9);
            //                            or hold-oma-add-on-cd (ss,10);
            //                            or "E400";
            //                            or "E401";
            //                            or "E420";
            //     then;
            if (
                hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 1]
               || hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 2]
               || hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 3]
               || hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 4]
               || hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 5]
               || hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 6]
               || hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 7]
               || hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 8]
               || hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 9]
               || hold_oma_cd[ss2] == hold_oma_add_on_cd[ss, 10]
               || hold_oma_cd[ss2] == "E400"
               || hold_oma_cd[ss2] == "E401"
               || hold_oma_cd[ss2] == "E420"
                )
            {
                //         next sentence;
            }
            else
            {
                //         go to yf2-99-exit.;                
                return "yf2_99_exit";
            }

            // if hold-oma-cd(ss2) = "E420" then          
            if (hold_oma_cd[ss2] == "E420")
            {
                // 	    if hold-oma-cd (ss) <> "E400"
                if (hold_oma_cd[ss] != "E400"
                     // 	       and hold-oma-cd (ss) <> "E401"
                     && hold_oma_cd[ss] != "E401"
                     // 	       and hold-oma-cd (ss) <> "E409"
                     && hold_oma_cd[ss] != "E409"
                     // 	       and hold-oma-cd (ss) <> "E412"
                     && hold_oma_cd[ss] != "E412"
                     // 	       and hold-oma-cd (ss) <> "E410"
                     && hold_oma_cd[ss] != "E410"
                     // 	       and hold-oma-cd (ss) <> "E413"
                     && hold_oma_cd[ss] != "E413"
                     // 	       and hold-oma-cd (ss) <> "E411"
                     && hold_oma_cd[ss] != "E411"
                     //            and (   ( hold-icc-cd    (ss) =  "SP00"
                     && ((hold_icc_cd[ss] == "SP00"
                    // 	           )
                    )
                    //                 or (    hold-icc-cd    (ss) = "CV00";
                    || (hold_icc_cd[ss] == "CV00"
                     //                     and hold-oma-suff  (ss) = "A";
                     && hold_oma_suff[ss] == "A"
                    // 	            and (   hold-oma-cd-num(ss) < 990;
                    && (Util.NumInt(hold_oma_cd_num[ss]) < 990
                    // 	                 or hold-oma-cd-num(ss) > 997;
                    || Util.NumInt(hold_oma_cd_num[ss]) > 997
                                    // 		        );
                                    )
                               // 		   );
                               )
                                       //                 or (    hold-oma-suff  (ss) = "A";
                                       || (hold_oma_suff[ss] == "A"
                                    // 	            and (   hold-oma-cd-num(ss) =;
                                    && (hold_oma_cd_num[ss] ==
                               // 			   "G395";
                               "G395"
                               // 			or "G391";
                               || hold_oma_cd_num[ss] == "G391"
                               // 			or "G521";
                               || hold_oma_cd_num[ss] == "G521"
                               // 			or "G523";
                               || hold_oma_cd_num[ss] == "G523"
                                    // 		        );
                                    )
                                   // 	           );
                                   )
                                // 	        );
                                )
                    //         then;

                    )
                {
                    // 	           next sentence;
                }
                else
                {
                    //             go to yf2-99-exit;                    
                    return "yf2_99_exit";
                }
            }
            else
            {
                // 	   next sentence.;
            }

            //  if  hold-oma-suff(ss2)      = hold-oma-suff(ss) or (    hold-oma-cd  (ss2) = "E420" and hold-oma-suff(ss2) = "A"  ) then
            if (
                hold_oma_suff[ss2] == hold_oma_suff[ss] || (hold_oma_cd[ss2] == "E420" && hold_oma_suff[ss2] == "A")
                )
            {
                //     	next sentence;
            }
            else
            {
                //         go to yf2-99-exit.;
                return "yf2_99_exit";
            }

            //  if  hold-oma-rec-ind (ss2 , ss-add-on-perc-or-flat-ind) <> "P" or  (    hold-oma-suff (ss2) = "B"   and hold-oma-cd   (ss2) = "E676" and hold-sv-date  (ss2) < "20110901" )  then            
            if (
                 hold_oma_rec_ind[ss2, ss_add_on_perc_or_flat_ind] != "P" || (hold_oma_suff[ss2] == "B" && hold_oma_cd[ss2] == "E676" && hold_sv_date[ss2].CompareTo("20110901") < 0)
                )
            {
                //         go to yf2-30.;                
                return "yf2_30";
            }


            //  if  hold-oma-suff (ss2) = "B" and hold-oma-cd   (ss2) = "E676" and hold-sv-date  (ss2) >= "20110901"  then            
            if (hold_oma_suff[ss2] == "B" && hold_oma_cd[ss2] == "E676" && hold_sv_date[ss2].CompareTo("20110901") >= 0)
            {
                // 	   go to yf2-99-exit.;                
                return "yf2_99_exit";
            }


            //  if hold-sv-day ( ss2, 1) not = "OP" then            
            if (hold_sv_day[ss2, 1] != "OP")
            {
                //         compute hold-fee-oma  (ss2) rounded = hold-fee-oma  (ss2)     + (   hold-fee-oma   (ss) * hold-oma-fee-1 (ss2 , oma) * ws-reduc-rate    )
                hold_fee_oma[ss2] = Util.Round(hold_fee_oma[ss2] + (hold_fee_oma[ss] * hold_oma_fee_1[ss2, oma] * ws_reduc_rate), 0);

                //         compute hold-fee-ohip  (ss2) rounded = hold-fee-ohip  (ss2)    + (   hold-fee-ohip   (ss) * hold-oma-fee-1 (ss2 , ohip) * ws-reduc-rate    )
                hold_fee_ohip[ss2] = Util.Round(hold_fee_ohip[ss2] + (hold_fee_ohip[ss] * hold_oma_fee_1[ss2, ohip] * ws_reduc_rate), 0);
                //         if hold-oma-cd (ss2) = "E400" or "E401" then                
                if (hold_oma_cd[ss2] == "E400" || hold_oma_cd[ss2] == "E401")
                {
                    //             compute hold-sv-nbr-serv (ss2) = hold-sv-nbr-serv ( ss2) + hold-sv-nbr-serv ( ss) + hold-sv-nbr ( ss, 1) + hold-sv-nbr( ss, 2) + hold-sv-nbr( ss, 3)
                    hold_sv_nbr_serv[ss2] = hold_sv_nbr_serv[ss2] + hold_sv_nbr_serv[ss] + hold_sv_nbr[ss, 1] + hold_sv_nbr[ss, 2] + hold_sv_nbr[ss, 3];
                    // 	            compute nbr-of-services	= nbr-of-services  + hold-sv-nbr-serv ( ss)  + hold-sv-nbr( ss, 1) + hold-sv-nbr ( ss, 2) + hold-sv-nbr ( ss, 3);                
                    nbr_of_services = nbr_of_services + hold_sv_nbr_serv[ss] + hold_sv_nbr[ss, 1] + hold_sv_nbr[ss, 2] + hold_sv_nbr[ss, 3];
                    //  	         display scr-last-claim;
                    last_claim_flag = Util.Str(nbr_of_services).PadLeft(3, '0');
                    Display("scr-last-claim-lit.", "scr-last-claim");
                    //             go to yf2-50;                    
                    return "yf2_50";
                }
                else
                {
                    //   go to yf2-50;                    
                    return "yf2_50";
                }
            }
            else
            {
                //         next sentence.;
            }

            return string.Empty;
        }

        // pricing_logic.rtn
        private async Task yf2_30()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf2_30");

            //  compute ws-pricing-nbr-serv =  hold-sv-nbr-serv ( ss2)  + hold-sv-nbr ( ss2, 1)  + hold-sv-nbr ( ss2, 2)  + hold-sv-nbr      ( ss2, 3)
            ws_pricing_nbr_serv = hold_sv_nbr_serv[ss2] + hold_sv_nbr[ss2, 1] + hold_sv_nbr[ss2, 2] + hold_sv_nbr[ss2, 3];


            //  if hold-sv-day ( ss2, 1) not = "OP" then
            if (hold_sv_day[ss2, 1] != "OP")
            {
                //   compute hold-fee-oma   (ss2) rounded =  hold-fee-oma(ss2)  +   (   hold-oma-fee-2 (ss2 ,  oma)  * ws - hold - wcb - rate  * ws - pricing - nbr - serv   * ws - reduc - rate       )    
                hold_fee_oma[ss2] = Util.Round(hold_fee_oma[ss2] + (hold_oma_fee_2[ss2, oma] * ws_hold_wcb_rate * ws_pricing_nbr_serv * ws_reduc_rate), 2);


                //   compute hold-fee-ohip  (ss2) rounded =  hold-fee-ohip  (ss2)   +  (   hold-oma-fee-2 (ss2 , ohip)  *  ws - hold - wcb - rate  * ws - pricing - nbr - serv  * ws - reduc - rate       ).
                hold_fee_ohip[ss2] = Util.Round(hold_fee_ohip[ss2] + (hold_oma_fee_2[ss2, ohip] * ws_hold_wcb_rate * ws_pricing_nbr_serv * ws_reduc_rate), 2);
                int x = 1;
            }

        }

        // pricing_logic.rtn
        private async Task yf2_50()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf2_50");

            // if def-agent-bill-direct  or def-agent-foreign-direct or def-agent-ifhp-direct  or def-agent-ontario-direct   or def-agent-quebec-direct  then
            if (def_agent_code.Equals(def_agent_bill_direct) || def_agent_code.Equals(def_agent_foreign_direct) || def_agent_code.Equals(def_agent_ifhp_direct) || def_agent_code.Equals(def_agent_ontario_direct) || def_agent_code.Equals(def_agent_quebec_direct))
            {
                //      move hold-fee-oma (ss)      to hold-fee-ohip (ss)            
                hold_fee_ohip[ss] = hold_fee_oma[ss];
            }
            else
            {
                //      next sentence.;
            }
        }

        // pricing_logic.rtn
        private async Task yf2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf2_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yf1_special_add_on_incr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf1_special_add_on_incr");

            //  if  hold-oma-cd (ss) = "E400"  or "E409"  or "E412"  or "E401"  or "E410"   or "E413"  or "E420" then      
            if (hold_oma_cd[ss] == "E400" || hold_oma_cd[ss] == "E409" || hold_oma_cd[ss] == "E412" || hold_oma_cd[ss] == "E401" || hold_oma_cd[ss] == "E410" || hold_oma_cd[ss] == "E413" || hold_oma_cd[ss] == "E420")
            {
                //   go to yf1-99-exit.;
                await yf1_99_exit();
                return;
            }

            //  if     ws-special-add-on-cd-entered = "N";
            if (
                ws_special_add_on_cd_entered == "N"
                //       and (hold-oma-add-on-cd (ss, 1) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 1]) || Util.NumInt(hold_oma_add_on_cd[ss, 1]) == 0)
                //       and (hold-oma-add-on-cd (ss, 2) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 2]) || Util.NumInt(hold_oma_add_on_cd[ss, 2]) == 0)
                //       and (hold-oma-add-on-cd (ss, 3) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 3]) || Util.NumInt(hold_oma_add_on_cd[ss, 3]) == 0)
                //       and (hold-oma-add-on-cd (ss, 4) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 4]) || Util.NumInt(hold_oma_add_on_cd[ss, 4]) == 0)
                //       and (hold-oma-add-on-cd (ss, 5) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 5]) || Util.NumInt(hold_oma_add_on_cd[ss, 5]) == 0)
                //       and (hold-oma-add-on-cd (ss, 6) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 6]) || Util.NumInt(hold_oma_add_on_cd[ss, 6]) == 0)
                //       and (hold-oma-add-on-cd (ss, 7) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 7]) || Util.NumInt(hold_oma_add_on_cd[ss, 7]) == 0)
                //       and (hold-oma-add-on-cd (ss, 8) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 8]) || Util.NumInt(hold_oma_add_on_cd[ss, 8]) == 0)
                //       and (hold-oma-add-on-cd (ss, 9) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 9]) || Util.NumInt(hold_oma_add_on_cd[ss, 9]) == 0)
                //       and (hold-oma-add-on-cd (ss,10) = spaces  or  zeroes);
                && (string.IsNullOrWhiteSpace(hold_oma_add_on_cd[ss, 10]) || Util.NumInt(hold_oma_add_on_cd[ss, 10]) == 0)
                //     then;              
                )
            {
                //         next sentence;
            }
            else
            {
                //         perform yf3-search-oma-recs-4-addon-cd  thru yf3-99-exit;
                //             varying ss2;
                //             from 1 by 1;
                //             until   ss2 > ss-clmdtl-oma.;

                ss2 = 1;
                do
                {
                    string retval = await yf3_search_oma_recs_4_addon_cd();
                    if (retval.ToLower().Equals("yf3_99_exit"))
                    {
                        goto _yf3_99_exit;
                    }
                    else if (retval.ToLower().Equals("yf3_50"))
                    {
                        goto _yf3_50;
                    }

                    await yf3_30();
                    _yf3_50:
                    await yf3_50();

                    _yf3_99_exit:
                    await yf3_99_exit();
                    ss2++;
                } while (ss2 <= ss_clmdtl_oma);

            }
        }

        // pricing_logic.rtn
        private async Task yf1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf1_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task<string> yf3_search_oma_recs_4_addon_cd()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf3_search_oma_recs_4_addon_cd");

            // if hold-sv-date (ss2) not = hold-sv-date (ss) then            
            if (hold_sv_date[ss2] != hold_sv_date[ss])
            {
                //         go to yf3-99-exit.;                
                return "yf3_99_exit";
            }

            // if hold-icc-cd (ss2) = 'SP98'  then    
            if (hold_icc_cd[ss2] == "SP98")
            {
                ws_reduc_rate = ws_reduc_rate98;
            }
            // else if hold-icc-cd (ss2) = 'SP99'  then            
            else if (hold_icc_cd[ss2] == "SP99")
            {
                ws_reduc_rate = ws_reduc_rate99;
            }
            else
            {
                ws_reduc_rate = 1;
            }

            // 	if hold-oma-cd(ss2) = "E409" or "E412"  or "E410" or "E413"  then            
            if (hold_oma_cd[ss2] == "E409" || hold_oma_cd[ss2] == "E412" || hold_oma_cd[ss2] == "E410" || hold_oma_cd[ss2] == "E413")
            {
                // 	    if ( hold-oma-cd(ss) = "G395" or "G391" or "G521" or "G523"  ) or (hold-icc-sec(ss) = "CV" ) then     
                if ((hold_oma_cd[ss] == "G395" || hold_oma_cd[ss] == "G391" || hold_oma_cd[ss] == "G521" || hold_oma_cd[ss] == "G523") || (hold_icc_sec[ss] == "CV"))
                {
                    // 		   go to yf3-99-exit;                    
                    return "yf3_99_exit";
                }
                else
                {
                    // 	     	next sentence;
                }
            }
            else
            {
                //             go to yf3-99-exit.;               
                return "yf3_99_exit";
            }

            // if hold-oma-suff(ss2) not = hold-oma-suff(ss) then
            if (hold_oma_suff[ss2] != hold_oma_suff[ss])
            {
                //         go to yf3-99-exit.;                
                return "yf3_99_exit";
            }

            // if hold-oma-rec-ind (ss2 , ss-add-on-perc-or-flat-ind) <> "P"  then
            if (hold_oma_rec_ind[ss2, ss_add_on_perc_or_flat_ind] != "P")
            {
                //         go to yf3-30.;                
                return "yf3_30";
            }


            //  if hold-sv-day ( ss2, 1) not = "OP" then            
            if (hold_sv_day[ss2, 1] != "OP")
            {
                //  compute hold-fee-oma  (ss2) rounded = hold-fee-oma  (ss2)     + (   hold-fee-oma   (ss)   * hold - oma - fee - 1(ss2, oma)  * ws - reduc - rate    )                
                hold_fee_oma[ss2] = Util.Round(hold_fee_oma[ss2] + (hold_fee_oma[ss] * hold_oma_fee_1[ss2, oma] * ws_reduc_rate), 0);

                //  compute hold-fee-ohip  (ss2) rounded = hold-fee-ohip  (ss2)    + (   hold-fee-ohip   (ss) *hold - oma - fee - 1(ss2, ohip) * ws - reduc - rate    )                
                hold_fee_ohip[ss2] = Util.Round(hold_fee_ohip[ss2] + (hold_fee_ohip[ss] * hold_oma_fee_1[ss2, ohip] * ws_reduc_rate), 0);

                //  if hold-oma-cd(ss2) =    "E409"  or "E412"  or "E410" or "E413"  then    
                if (hold_oma_cd[ss2] == "E409" || hold_oma_cd[ss2] == "E412" || hold_oma_cd[ss2] == "E410" || hold_oma_cd[ss2] == "E413")
                {
                    hold_sv_nbr_serv[ss2] = 1;
                    //     go to yf3-50;                    
                    return "yf3_50";
                }
                else
                {
                    //     go to yf3-50;                    
                    return "yf3_50";
                }
            }
            else
            {
                //         next sentence.;
            }
            return string.Empty;
        }

        // pricing_logic.rtn
        private async Task yf3_30()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf3_30");

            // if hold-oma-cd ( ss2 ) =    "E409" or "E412"  or "E410"  or "E413"   then            
            if (hold_oma_cd[ss2] == "E409" || hold_oma_cd[ss2] == "E412" || hold_oma_cd[ss2] == "E410" || hold_oma_cd[ss2] == "E413")
            {
                ws_pricing_nbr_serv = 1;
            }

            // if hold-sv-day ( ss2, 1) not = "OP"  then            
            if (hold_sv_day[ss2, 1] != "OP")
            {
                //    compute hold-fee-oma   (ss2) rounded = hold-fee-oma(ss2)   +   (   hold-oma-fee-2 (ss2 ,  oma) * ws - hold - wcb - rate   * ws - pricing - nbr - serv   * ws - reduc - rate )  
                hold_fee_oma[ss2] = Util.Round(hold_fee_oma[ss2] + (hold_oma_fee_2[ss2, oma] * ws_hold_wcb_rate * ws_pricing_nbr_serv * ws_reduc_rate), 2);

                //    compute hold-fee-ohip  (ss2) rounded = hold-fee-ohip  (ss2)        +  (   hold-oma-fee-2 (ss2 , ohip) *ws - hold - wcb - rate * ws - pricing - nbr - serv * ws - reduc - rate ).
                hold_fee_ohip[ss2] = Util.Round(hold_fee_ohip[ss2] + (hold_oma_fee_2[ss2, ohip] * ws_hold_wcb_rate * ws_pricing_nbr_serv * ws_reduc_rate), 2);
            }
        }

        // pricing_logic.rtn
        private async Task yf3_50()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf3_50");

            // if (hold-oma-cd (ss2) = "E409" or "E412" 	or "E413"   or "E410")  and hold-sv-day ( ss2, 1) not = "OP"  then     
            if (
                (hold_oma_cd[ss2] == "E409" || hold_oma_cd[ss2] == "E412" || hold_oma_cd[ss2] == "E413" || hold_oma_cd[ss2] == "E410") && hold_sv_day[ss2, 1] != "OP"
                )
            {
                //     if  hold-fee-oma (ss2)     < hold-oma-fee-2 (ss2, oma) then            
                if (hold_fee_oma[ss2] < hold_oma_fee_2[ss2, oma])
                {
                    hold_fee_oma[ss2] = hold_oma_fee_2[ss2, oma];
                    //           move hold-oma-fee-2 (ss2,ohip)      to hold-fee-ohip (ss2)
                    hold_fee_ohip[ss2] = hold_oma_fee_2[ss2, ohip];
                }
                else
                {
                    //             next sentence.;
                }
            }

            // if def-agent-bill-direct or def-agent-foreign-direct  or def-agent-ifhp-direct or def-agent-ontario-direct  or def-agent-quebec-direct  then            
            if (def_agent_code.Equals(def_agent_bill_direct) || def_agent_code.Equals(def_agent_foreign_direct) || def_agent_code.Equals(def_agent_ifhp_direct) || def_agent_code.Equals(def_agent_ontario_direct) || def_agent_code.Equals(def_agent_quebec_direct))
            {
                //       move hold-fee-oma (ss)      to hold-fee-ohip (ss)
                hold_fee_ohip[ss] = hold_fee_oma[ss];
            }
            else
            {
                //             next sentence.;
            }
        }

        // pricing_logic.rtn
        private async Task yf3_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yf3_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yh0_find_high_grp_within_sec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yh0_find_high_grp_within_sec");

            hold_grp_totals_tbl_grp = "0";
            hold_grp_tot = new decimal[91];
            hold_grp_nbr = new string[91];
            hold_grp_nbr_sec = new int[91];
            hold_grp_nbr_grp = new int[91];


            ss_grp_tot = 0;
            ws_highest_grp_tot = 0;
            ws_highest_grp_nbr = 0;

            flag_new_sec = "N";
        }

        // pricing_logic.rtn
        private async Task yh0_100_find_sp_suffix_a()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yh0_100_find_sp_suffix_a");

            // if hold-oma-suff (ss-from) = "A" then            
            if (hold_oma_suff[ss_from] == "A")
            {
                //         add 1                           to      ss-grp-tot;
                ss_grp_tot++;
                ss = ss_from;
                //   perform yh11-add-singular-value thru    yh11-99-exit;
                await yh11_add_singular_value();
                await yh11_99_exit();

            }
            else
            {
                //         add 1                           to      ss-from;
                ss_from++;
                //  if ss-from > ss-clmdtl-oma then            
                if (ss_from > ss_clmdtl_oma)
                {
                    ss_to = ss_clmdtl_oma;
                    flag_new_sec = "Y";
                }
                else
                {
                    // go to yh0-100-find-sp-suffix-a.;
                    await yh0_100_find_sp_suffix_a();
                    return;
                }
            }

            //     add 1, ss-from                              giving ss-from-plus-one.;
            ss_from_plus_one = ss_from + 1;

            //     perform yh1-calc-group-values               thru yh1-99-exit;
            //                 varying ss;
            //                 from ss-from-plus-one by 1;
            //                 until   flag-new-sec = "Y".;

            ss = ss_from_plus_one;
            do
            {
                await yh1_calc_group_values();
                await yh1_99_exit();
                ss++;
            } while (flag_new_sec != "Y");


            flag_z_highest_grp = "N";

            //     perform yh2-find-highest-value              thru yh2-99-exit;
            //                 varying ss;
            //                 from 1 by 1;
            //                 until ss > ss-grp-tot.;

            ss = 1;
            do
            {
                await yh2_find_highest_value();
                await yh2_99_exit();
                ss++;
            } while (ss <= ss_grp_tot);

        }

        // pricing_logic.rtn
        private async Task yh0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yh0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yh1_calc_group_values()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yh1_calc_group_values");

            //  if ss > ss-clmdtl-oma then            
            if (ss > ss_clmdtl_oma)
            {
                ss_to = ss_clmdtl_oma;
                flag_new_sec = "Y";
                //  go to yh1-99-exit.;
                await yh1_99_exit();
                return;
            }

            //  if hold-oma-suff (ss) = "B" or "C" then   
            if (hold_oma_suff[ss] == "B" || hold_oma_suff[ss] == "C")
            {
                //         go to yh1-99-exit.;
                await yh1_99_exit();
                return;
            }

            //  if hold-icc-sec  (ss) not = "SP" then           
            if (hold_icc_sec[ss] != "SP")
            {
                //         next sentence;
            }
            //  else if  hold-flag-sec-group (ss) = hold-flag-sec-group (ss - 1) then            
            else if (hold_flag_sec_group[ss] == hold_flag_sec_group[ss - 1])
            {
                //             perform yh11-add-singular-value     thru    yh11-99-exit;
                await yh11_add_singular_value();
                await yh11_99_exit();

                //  go to yh1-99-exit;
                await yh1_99_exit();
                return;
            }
            //  else if hold-flag-sec (ss) = hold-flag-sec (ss - 1)  then            
            else if (hold_flag_sec[ss] == hold_flag_sec[ss - 1])
            {
                //            add 1                           to ss-grp-tot;
                ss_grp_tot++;
                //            perform yh11-add-singular-value thru    yh11-99-exit;
                await yh11_add_singular_value();
                await yh11_99_exit();
                //           go to yh1-99-exit.;
                await yh1_99_exit();
                return;
            }

            //     subtract 1 from ss                          giving ss-to.;
            ss_to = ss - 1;
            flag_new_sec = "Y";

        }

        // pricing_logic.rtn
        private async Task yh1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yh1_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yh11_add_singular_value()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yh11_add_singular_value");

            //move hold-flag-sec-group (ss)               to hold-grp-nbr (ss-grp-tot).
            hold_grp_nbr[ss_grp_tot] = Util.Str(hold_flag_sec_group[ss]);

            // if hold-flag-fee-used (ss) = "0"  then;           
            if (hold_flag_fee_used[ss] == "0")
            {
                //         add hold-fee-oma (ss)                   to hold-grp-tot (ss-grp-tot);
                hold_grp_tot[ss_grp_tot] += hold_fee_oma[ss];
            }
            // else if hold-flag-fee-used (ss) = "1" then            
            else if (hold_flag_fee_used[ss] == "1")
            {
                //             add hold-oma-fee-1 (ss, ohip)       to hold-grp-tot (ss-grp-tot);
                hold_grp_tot[ss_grp_tot] += hold_oma_fee_1[ss, ohip];
            }
            // else  if hold-flag-fee-used (ss) = "2"  then            
            else if (hold_flag_fee_used[ss] == "2")
            {
                //                 add hold-oma-fee-2 (ss, ohip)   to hold-grp-tot (ss-grp-tot);
                hold_grp_tot[ss_grp_tot] += hold_oma_fee_2[ss, ohip];
            }
            // else if hold-flag-fee-used (ss) = "3" then            
            else if (hold_flag_fee_used[ss] == "3")
            {
                //   add hold-oma-fee-1 (ss, ohip) hold-oma-fee-2 (ss, ohip)  hold-grp-tot (ss-grp-tot) giving hold-grp-tot (ss-grp-tot).
                hold_grp_tot[ss_grp_tot] = hold_oma_fee_1[ss, ohip] + hold_oma_fee_2[ss, ohip] + hold_grp_tot[ss_grp_tot];
            }
        }

        // pricing_logic.rtn
        private async Task yh11_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yh11_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yh2_find_highest_value()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yh2_find_highest_value");

            // if hold-grp-tot ( ss ) > ws-highest-grp-tot then            
            if (hold_grp_tot[ss] > ws_highest_grp_tot)
            {
                ws_highest_grp_tot = hold_grp_tot[ss];
                ws_highest_grp_nbr = Util.NumInt(hold_grp_nbr[ss]);
                //     if hold-oma-cd-alpha(ss) = 'Z' then            
                if (hold_oma_cd_alpha[ss] == "Z")
                {
                    flag_z_highest_grp = "Y";
                }
            }
        }

        // pricing_logic.rtn
        private async Task yh2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yh2_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yi0_sec_reduct_within_sec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yi0_sec_reduct_within_sec");

            ss_curr_prev = hold_ss_curr_prev[ss];

            //     if  hold-oma-rec-ind(ss, ss-add-on-perc-or-flat-ind) <> "P"  and hold-oma-rec-ind(ss, ss-add-on-perc-or-flat-ind) <> "F" and hold-sv-day(ss, 1)  <> "MR"  and hold-sv-day(ss, 1)  <> "OP"  and hold-oma-suff(ss) <> "B" and hold-oma-suff(ss) <> "C"  then            
            if (hold_oma_rec_ind[ss, ss_add_on_perc_or_flat_ind] != "P" && hold_oma_rec_ind[ss, ss_add_on_perc_or_flat_ind] != "F" && hold_sv_day[ss, 1] != "MR" && hold_sv_day[ss, 1] != "OP" && hold_oma_suff[ss] != "B" && hold_oma_suff[ss] != "C")
            {
                //         if    hold-flag-sec-group (ss) = ws-highest-grp-nbr or  flag-z-highest-grp = 'Y' then            
                if (Util.NumInt(hold_flag_sec_group[ss]) == ws_highest_grp_nbr || flag_z_highest_grp == "Y")
                {
                    //             next sentence;
                }
                //         else if  hold-oma-cd-alpha (ss) <> "Z" and hold-oma-rec-ind  (ss, ss-add-on-perc-or-flat-ind) <> "P"  and hold-oma-rec-ind  (ss, ss-add-on-perc-or-flat-ind) <> "F" and (hold-icc-cd (ss) not = "SP98") and (hold-icc-cd (ss) not = "SP99") then            
                else if (hold_oma_cd_alpha[ss] != "Z" && hold_oma_rec_ind[ss, ss_add_on_perc_or_flat_ind] != "P" && hold_oma_rec_ind[ss, ss_add_on_perc_or_flat_ind] != "F" && (hold_icc_cd[ss] != "SP98") && (hold_icc_cd[ss] != "SP99"))
                {
                    // GW2019. Scaling
                    //                 compute hold-fee-oma  (ss) rounded =  hold-fee-oma  (ss) * const-sr (ss-curr-prev);
                    hold_fee_oma[ss] = Util.Round(hold_fee_oma[ss] * (CONST_SR_GET(objConstants_mstr_rec_2, ss_curr_prev) / 100), 0);  //const-sr(ss - curr - prev);
                    //                 compute hold-fee-ohip (ss) rounded = hold-fee-ohip (ss) * const-sr (ss-curr-prev).            
                    hold_fee_ohip[ss] = Util.Round(hold_fee_ohip[ss] * (CONST_SR_GET(objConstants_mstr_rec_2, ss_curr_prev) / 100), 0);  //const-sr(ss - curr - prev)
                }
            }
        }

        // pricing_logic.rtn
        private async Task yi0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yi0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task<string> ym0_create_desc_record()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ym0_create_desc_record");

            // if not online-claim then            
            if (!flag_claim_source.Equals(online_claim))
            {
                //     if adjudication-desc-entry  then            
                if (flag_desc_rec.Equals(adjudication_desc_entry))
                {
                    flag_adjudication_required = "Y";
                    // 	      go to ym0-99-exit;                    
                    return "ym0_99_exit";
                }
                else
                {
                    //  go to ym0-99-exit.;                    
                    return "ym0_99_exit";
                }
            }

            // if adjudication-desc-entry then        
            if (flag_desc_rec.Equals(adjudication_desc_entry))
            {
                flag_adjudication_required = "Y";
                //  go to ym0-90-display.;                
                return "ym0_90_display";
            }

            //     add 1                               to ss-basic-times.;
            ss_basic_times++;

            // if ( basic-plus-times-entry and ss-basic-times > 2  )  then            
            if (flag_desc_rec.Equals(basic_plus_times_entry) && ss_basic_times > 2)
            {
                ss_basic_times = 1;
                //     add 1, ss-basic-times-desc-rec  giving ss-basic-times-desc-rec.;
                ss_basic_times_desc_rec = ss_basic_times_desc_rec + 1;
            }

            // if basic-plus-times-entry then          
            if (flag_desc_rec.Equals(basic_plus_times_entry))
            {
                //move "B +"                        to hold-basic - b(ss - basic - times)
                hold_basic_b[ss_basic_times] = "B +";
                //move "T /"                        to hold-times - t(ss - basic - times)
                hold_times_t[ss_basic_times] = "T /";
                hold_times_units[ss_basic_times] = Util.Str(ws_tot_serv);
                // 	  if hold-oma-suff (ss) = "B" then            
                if (hold_oma_suff[ss] == "B")
                {
                    hold_basic_units[ss_basic_times] = Util.Str(hold_oma_fee_asst[ss, ohip]);

                    //hold_desc[ss_basic_times_desc_rec] = hold_basic_times_desc;
                    hold_desc[ss_basic_times_desc_rec] = hold_basic_units[1] + hold_basic_b[1] + hold_times_units[1] + hold_times_t[1] +
                                                        hold_basic_units[2] + hold_basic_b[2] + hold_times_units[2] + hold_times_t[2];

                    /* 05  hold-basic-times-desc.
                         10  hold-basic-plus-times-desc     occurs  2  times.
                             15  hold-basic-units        pic zz9.
                             15  hold-basic-b            pic xxx.
                             15  hold-times-units        pic zz9.
                             15  hold-times-t            pic xxx. */

                    /* 05  hold - descriptions.
                         10  hold-desc-1                 pic x(22).
                             10  hold-desc-2                 pic x(22).
                             10  hold-desc-3                 pic x(22).
                             10  hold-desc-4                 pic x(22).
                             10  hold-desc-5                 pic x(22).

                         05  hold-descs-r   redefines   hold-descriptions.
                             10  hold-descs  occurs 5 times.
                                15  hold-desc               pic x(22). */


                    // 	       go to ym0-90-display;                    
                    return "ym0_90_display";
                }
                else
                {
                    hold_basic_units[ss_basic_times] = Util.Str(hold_oma_fee_anae[ss, ohip]);
                    //hold_desc[ss_basic_times_desc_rec] = hold_basic_times_desc;
                    hold_desc[ss_basic_times_desc_rec] = hold_basic_units[1] + hold_basic_b[1] + hold_times_units[1] + hold_times_t[1] +
                                                        hold_basic_units[2] + hold_basic_b[2] + hold_times_units[2] + hold_times_t[2];


                    // 	       go to ym0-90-display.;                  
                    return "ym0_90_display";
                }
            }
            return string.Empty;
        }

        // pricing_logic.rtn
        private async Task ym0_90_display()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ym0_90_display");

            await display_hold_desc();

            // display scr-acpt-det-desc.;
            Display("scr-acpt-det-desc.");
        }

        // pricing_logic.rtn
        private async Task ym0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "ym0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yz0_reset_verify_prices()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yz0_reset_verify_prices");

            //  perform yz1-check-price		thru yz1-99-exit;
            //         varying ss;
            //         from 1 by 1;
            //         until   ss > ss-clmdtl-oma.;

            ss = 1;
            do
            {
                await yz1_check_price();
                await yz1_99_exit();
                ss++;
            } while (ss <= ss_clmdtl_oma);

        }

        // pricing_logic.rtn
        private async Task yz0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yz0_99_exit");

            //     exit.;
        }

        // pricing_logic.rtn
        private async Task yz1_check_price()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yz1_check_price");

            // if ( diskette-claim and retain-incoming-prices )  or  web-claim  and ( retain-incoming-prices  or hold-sv-day (ss,1) = "MR" or "OP"  ) then
            if (
                (flag_claim_source.Equals(diskette_claim) && flag_retain_prices.Equals(retain_incoming_prices)) || flag_claim_source.Equals(web_claim) && (flag_retain_prices.Equals(retain_incoming_prices) || hold_sv_day[ss, 1] == "MR" || hold_sv_day[ss, 1] == "OP")
                )
            {
                //     move hold-fee-incoming (ss)     to hold-fee-ohip    (ss).
                hold_fee_ohip[ss] = hold_fee_incoming[ss];
            }

            // if  diskette-claim then;     
            if (flag_claim_source.Equals(diskette_claim))
            {
                hold_sv_nbr_serv[ss] = hold_sv_nbr_serv_incoming[ss];
            }
        }

        // pricing_logic.rtn
        private async Task yz1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yz1_99_exit");

            //     exit.;
        }

        private async Task za0_common_error()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "za0_common_error");

            err_msg_comment = err_msg[err_ind];

            // display err-msg-line.;
            Display("err-msg-line.");

            continue_reply = "";

            //  display confirm.;
            //  accept  confirm.;
            Display("confirm.");
            await Prompt("continue_reply");

            // if err-ind = 4 or  9  or 14 or 29  or 30  or 31  or 43  or 46 or 48  or 51  or 52  or 53 or 59 or 84 or 101 	or 104 or 105 or 106  or 107 or 111 or 163 	or 164 or 165 or 186 or 187            
            if (
                err_ind == 4 || err_ind == 9 || err_ind == 14 || err_ind == 29 || err_ind == 30 || err_ind == 31 || err_ind == 43 || err_ind == 46 || err_ind == 48 || err_ind == 51 || err_ind == 52 ||
                err_ind == 53 || err_ind == 59 || err_ind == 84 || err_ind == 101 || err_ind == 104 || err_ind == 105 || err_ind == 106 || err_ind == 107 || err_ind == 111 || err_ind == 163 || err_ind == 164 ||
                err_ind == 165 || err_ind == 186 || err_ind == 187
                )
            {
                //     if   continue-reply = "!" then       
                if (continue_reply == "!")
                {
                    //             next sentence;
                }
                else
                {
                    //           go to za0-common-error;
                    await za0_common_error();
                    return;
                }
            }
            else
            {
                //         next sentence.;
            }

            //     display blank-line-24.;
            Display("blank-line-25.");
        }

        private async Task za0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "za0_99_exit");

            //     exit.;
        }

        private async Task za1_make_them_notice_error()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "za1_make_them_notice_error");

            //     display "ENTER ! AND [NL] TO CONTINUE:".;
            //     accept continue-reply.;
            Display("ENTER !AND[NL] TO CONTINUE: ");
            await Prompt("continue_reply");

            // if continue-reply not = "!" then            
            if (continue_reply != "!")
            {
                //       display "INVALID RESPONSE PLEASE ENTER AN ! TO CONTINUE:";
                Display("INVALID RESPONSE PLEASE ENTER AN !TO CONTINUE: ");
            }
            else
            {
                //     next sentence.;
            }
        }

        private async Task za1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "za1_99_exit");

            //     exit.;
        }

        private async Task zf0_test_field()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zf0_test_field");

            // if test-field-occ(i)  = '~' then            
            if (test_field_occ[i] == "~")
            {
                flag = "N";
                //  go to zf0-99-exit.;
                await zf0_99_exit();
                return;
            }
        }

        private async Task zf0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zf0_99_exit");

            // exit.
        }

        private async Task exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "exit");
        }

        private async Task zh0_initialization()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh0_initialization");

            //counters = 0;
            ctr_read_batctrl_mstr = 0;
            ctr_read_claims_mstr = 0;
            ctr_read_pat_mstr = 0;
            ctr_read_doc_mstr = 0;
            ctr_read_loc_mstr = 0;
            ctr_read_oma_mstr = 0;
            ctr_read_const_mstr = 0;
            ctr_writ_batctrl_file = 0;
            ctr_writ_claims_mstr = 0;
            ctr_write_corrected_pat = 0;
            ctr_write_pat_elig_hist = 0;
            ctr_rewrit_batctrl_file = 0;
            ctr_rewrit_claims_mstr = 0;
            ctr_rewrit_const_mstr = 0;
            ctr_read_msg_sub_mstr = 0;
            ctr_read_rejected_claims = 0;
            ctr_updated_rejected_claims = 0;


            objBatctrl_rec = new F001_BATCH_CONTROL_FILE();   //batctrl_rec = 0;
            //objBatctrl_rec.batctrl_adj_cd = 0;
            //clmhdr_date_admit = 0;
            clmhdr_date_admit_yy = "0";
            clmhdr_date_admit_mm = 0;
            clmhdr_date_admit_dd = 0;

            claims_occur = 0;
            feedback_claims_mstr = "";
            ws_highest_grp_nbr = 0;
            ws_highest_grp_tot = 0;


            //objBatctrl_rec.batctrl_batch_type = "";
            //objBatctrl_rec.batctrl_hosp = "";
            //objBatctrl_rec.batctrl_i_o_pat_ind = "";
            //claim_header_rec = "";
            objClaims_mstr_hdr_rec = new F002_CLAIMS_MSTR_HDR();
            //objClaims_mstr_rec.claim_detail_rec = "";
            objClaims_mstr_dtl_rec = new F002_CLAIMS_MSTR_DTL();

            // perform uk0-zero-claim-hold-area thru uk0-99-exit.;
            await uk0_zero_claim_hold_area();
            await uk0_99_exit();

            flag_claim_source = "O";
            flag_retain_prices = "N";
        }

        private async Task zh0_10_acpt_old_new_batch_opt()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh0_10_acpt_old_new_batch_opt");

            //     display blank-screen.;
            Display("blank-screen.");
            //     display scr-title-batch-control-data.;
            Display("scr-title-batch-control-data.");

            //     perform zi0-process-in-progress-batch;
            // 					thru	zi0-99-exit.;

            await Zi0_process_in_progress_batch();
            await zi0_99_exit();


            //   display scr-title-batch-control-data.;
            Display("scr-title-batch-control-data.");

            //     display scr-old-or-new-batch-option.;
            Display("scr-old-or-new-batch-option.");

            //     perform zh1-acpt-old-or-new-batch-opt       thru    zh1-99-exit.;
            await zh1_acpt_old_or_new_batch_opt();
            await zh1_99_exit();

            //  if stop-option then;        
            if (option.Equals(stop_option))
            {
                //         go to zh0-99-exit.;
                await zh0_99_exit();
                return;
            }

            //  if old-batch then         
            if (option.Equals(old_batch))
            {
                //         display scr-acpt-batch-nbr;
                Display("scr-acpt-batch-nbr.");

                //         display scr-dis-week-day;
                Display("scr-dis-week-day.");

                //         accept  scr-acpt-batch-nbr;
                await Prompt("batctrl_bat_clinic_nbr_1_2");
                await Prompt("batctrl_bat_doc_nbr");

                //         accept  scr-acpt-week-day;
                await Prompt("batctrl_bat_week_day_d");

                //         perform zh2-read-batctrl-file           thru    zh2-99-exit;
                await zh2_read_batctrl_file();
                await zh2_99_exit();

                //         if   not-ok or batctrl-batch-type not = "C"  then;            
                if (flag.Equals(not_ok) || Util.Str(batctrl_batch_type).ToUpper() != "C")
                {
                    err_ind = 2;
                    //   perform za0-common-error            thru    za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();

                    //    go to zh0-10-acpt-old-new-batch-opt;
                    await zh0_10_acpt_old_new_batch_opt();
                    return;
                }
                else
                {
                    //             objDoc_mstr_rec.Doc_nbr = objBatctrl_rec.batctrl_bat_doc_nbr;
                    objDoc_mstr_rec.DOC_NBR = batctrl_bat_doc_nbr;
                    //             perform zp0-read-doc-mstr           thru    zp0-99-exit;
                    await zp0_read_doc_mstr();
                    await zp0_99_exit();

                    //             if not-ok then            
                    if (flag.Equals(not_ok))
                    {
                        err_ind = 9;
                        //                 perform za0-common-error        thru    za0-99-exit;
                        await za0_common_error();
                        await za0_99_exit();

                        //                 perform zz0-end-of-batch        thru zz0-99-exit;
                        await zz0_end_of_batch();
                        await zz0_99_exit();
                        //              go to mainline-shutdown;
                        await mainline_shutdown();
                        return;
                    }
                    else
                    {
                        flag = "Y";
                        //                 perform zh00-verify-batch-status thru zh00-99-exit
                        await zh00_verify_batch_status();
                        await zh00_99_exit();

                        //                 if not-ok then            
                        if (flag.Equals(not_ok))
                        {
                            //                     go zh0-10-acpt-old-new-batch-opt;
                            await zh0_10_acpt_old_new_batch_opt();
                            return;
                        }
                        else
                        {
                            //                     if batctrl-adj-cd-sub-type = "D" then                                       
                            if (Util.Str(batctrl_adj_cd_sub_type).ToUpper().Equals("D"))
                            {
                                err_ind = 62;
                                //                         perform za0-common-error;
                                await za0_common_error();
                                //                         perform zz0-end-of-batch thru zz0-99-exit;
                                await zz0_end_of_batch();
                                await zz0_10();

                                //                         go to zh0-10-acpt-old-new-batch-opt;
                                await zh0_10_acpt_old_new_batch_opt();
                                return;
                            }
                            else
                            {
                                def_claim_source = Util.Str(objBatctrl_rec.BATCTRL_ADJ_CD_SUB_TYPE);
                                //                         perform zm0-disp-batctrl-data  thru     zm0-99-exit;
                                await zm0_disp_batctrl_data();
                                await zm0_99_exit();
                                change_reply = "Y";
                                //                         perform zm1-allow-change-of-estimates;
                                //                                                 thru    zm1-99-exit;
                                //                                 until  change-reply = "N";
                                do
                                {
                                    await zm1_allow_change_of_estimates();
                                    await zm1_99_exit();
                                } while (!Util.Str(change_reply).Equals("N"));
                                ws_batctrl_amt_act = batctrl_amt_act;

                                //  if batctrl-last-claim-nbr = 0 then                                         
                                if (batctrl_last_claim_nbr == 0)
                                {
                                    //                                 next sentence;
                                }
                                else
                                {
                                    //  display scr-title-claim-rec-data;
                                    Display("scr-title-claim-rec-data.");
                                    //  display scr-claim-lit;
                                    Display("scr-claim-lit.");
                                    //  perform zh3-disp-last-claim-in-batch;
                                    //       thru    zh3-99-exit;
                                    await zh3_disp_last_claim_in_batch();
                                    await zh3_99_exit();
                                }
                            }
                        }
                    }
                }
            }
            else
            {
                //         perform zh4-acpt-new-batch-hdr-info     thru    zh4-99-exit;
                _zh4_acpt_new_batch_hdr_info:
                await zh4_acpt_new_batch_hdr_info();
                string retval = await zh4_20_acpt_source();
                if (Util.Str(retval).Equals("zh4_acpt_new_batch_hdr_info"))
                {
                    goto _zh4_acpt_new_batch_hdr_info;
                }
                else if (Util.Str(retval).Equals("zh4_99_exit"))
                {
                    goto _zh4_99_exit;
                }
                await zh4_30_acpt_agent();
                _zh4_99_exit:
                await zh4_99_exit();

                //         if batctrl-loc1 = "*" then            
                batctrl_loc1 = Util.Str(batctrl_loc).PadRight(4).Substring(0, 1);
                batctrl_loc2_4 = Util.Str(batctrl_loc).PadRight(4).Substring(1, 3);
                if (Util.Str(batctrl_loc1).PadRight(1).Substring(0, 1) == "*")
                {
                    //             objBatctrl_rec.batctrl_loc = "";
                    batctrl_loc = "";
                    batctrl_loc1 = "";
                    batctrl_loc2_4 = "";
                    //             go to zh0-10-acpt-old-new-batch-opt;
                    await zh0_10_acpt_old_new_batch_opt();
                    return;
                }
                //         else if flag-accept = "Y" then                            
                else if (flag_accept == "Y")
                {
                    change_reply = "Y";
                    //             perform zm1-allow-change-of-estimates thru  zm1-99-exit;
                    //                       until   change-reply = "N";
                    do
                    {
                        await zm1_allow_change_of_estimates();
                        await zm1_99_exit();
                    } while (!change_reply.Equals("N"));

                    batctrl_last_claim_nbr = 0;
                    //             display scr-title-claim-rec-data;
                    Display("scr-title-claim-rec-data.");
                    //             display scr-claim-lit;
                    Display("scr-claim-lit.");
                }
                else
                {
                    //             go to zh0-10-acpt-old-new-batch-opt.;
                    await zh0_10_acpt_old_new_batch_opt();
                    return;
                }
            }

            def_agent_code = Util.Str(batctrl_agent_cd);
            //     perform zk0-store-in-progress-batch;
            // 					thru	zk0-99-exit.;
            await Zk0_store_in_progress_batch();
            await zk0_99_exit();

        }

        private async Task zh0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh0_99_exit");

            //     exit.;
        }

        private async Task Zi0_process_in_progress_batch()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "Zi0_process_in_progress_batch");

            //     open i-o d001-batch-in-progress.;
            // D001_batch_in_progress_rec_Collection = Read_D001_batch_in_progress_rec();

            //  if status-cobol-batch-in-progress <> "00";  // 00 - means Successful completion.
            //     then;
            // 	close d001-batch-in-progress;
            // 	go to zi0-99-exit.;

            //if (Read_D001_batch_in_progress_rec() == false)
            //{
            //    await zi0_99_exit();
            //    return;
            //}

            //return; // this is only for debugging only to bypass the code below.....

            if (File.Exists(Environment.GetEnvironmentVariable("HOMEDIR") + "\\batch_in_progress.d001"))
            {
                D001_batch_in_progress_rec_Collection = Read_D001_batch_in_progress_rec(true);

                if (D001_batch_in_progress_rec_Collection.Count() == 0)
                {
                    await zi0_99_exit();
                    return;
                }

                //  read d001-batch-in-progress;
                // 	    at end;
                // 	    close d001-batch-in-progress;
                // 	    go to zi0-99-exit.;

                objD001_batch_in_progress_rec = D001_batch_in_progress_rec_Collection.FirstOrDefault();     // todo: NOT sure of this part....???

                //     display "";
                //     display " ";
                //     display "";
                //     display "           !!!!! WARNING !!!!!";
                //     display "";
                //     display " ";
                //     display "An OUTSTANDING BATCH was found - " "[ " d001-batch-nbr " ]";
                //     display " ";            

                d001_batch_nbr_grp = Util.Str(objD001_batch_in_progress_rec.D001_bat_clinic_nbr_1_2).PadLeft(2, '0') + Util.Str(objD001_batch_in_progress_rec.D001_bat_doc_nbr).PadRight(3, ' ') + Util.Str(objD001_batch_in_progress_rec.D001_bat_week_day).PadRight(3, ' ');
                Display("ConsoleDisplay.");

                batctrl_batch_nbr_grp = objD001_batch_in_progress_rec.D001_bat_clinic_nbr_1_2 + objD001_batch_in_progress_rec.D001_bat_doc_nbr + objD001_batch_in_progress_rec.D001_bat_week_day;
                batctrl_bat_clinic_nbr_1_2 = Util.NumInt(Util.Str(batctrl_batch_nbr_grp).PadRight(8).Substring(0, 2));
                batctrl_bat_doc_nbr = Util.Str(batctrl_batch_nbr_grp).PadRight(8).Substring(2, 3);
                batctrl_bat_week_day_d = Util.NumInt(Util.Str(batctrl_batch_nbr_grp).PadRight(8).Substring(5, 3));

                //     perform zh2-read-batctrl-file	thru    zh2-99-exit.;
                await zh2_read_batctrl_file();
                await zh2_99_exit();

                //     if ok  then            
                if (flag.Equals(ok))
                {
                    objD001_batch_in_progress_rec.D001_f001_exists_ind = "Y";
                    // 	       if    batctrl-batch-nbr = "        " or batctrl-batch-nbr = "00000000";
                    if (string.IsNullOrWhiteSpace(objBatctrl_rec.BATCTRL_BATCH_NBR) || Util.Str(objBatctrl_rec.BATCTRL_BATCH_NBR) == "00000000"
                        // 	             or batctrl-loc = "    "           or batctrl-loc = "0000";
                        || string.IsNullOrWhiteSpace(objBatctrl_rec.BATCTRL_LOC) || objBatctrl_rec.BATCTRL_LOC == "0000"
                        // 	             or batctrl-agent-cd = " ";
                        || string.IsNullOrWhiteSpace(objBatctrl_rec.BATCTRL_AGENT_CD.ToString())
                        // 	             or (     batctrl-i-o-pat-ind <> "I";
                        || (Util.Str(objBatctrl_rec.BATCTRL_I_O_PAT_IND).ToUpper() != "I"
                        // 		         and batctrl-i-o-pat-ind <> "O";
                        && Util.Str(objBatctrl_rec.BATCTRL_I_O_PAT_IND) != "O"
                        // 		         and batctrl-i-o-pat-ind <> "B";
                        && Util.Str(objBatctrl_rec.BATCTRL_I_O_PAT_IND) != "B"
                        // 	             );
                        )
                        // 	             or batctrl-payroll = " " or batctrl-payroll = "0";
                        || string.IsNullOrWhiteSpace(objBatctrl_rec.BATCTRL_HOSP) || objBatctrl_rec.BATCTRL_HOSP == "0"
                        // 	            then;                    
                        )
                    {
                        //      perform zi1-ask-user-for-parameters thru zi1-99-exit;
                        await zi1_ask_user_for_parameters();
                        await zi1_99_exit();
                    }
                    else
                    {
                        // 	            display "LOCATION was: " batctrl-loc;
                        // 	            display "AGENT    was: " batctrl-agent-cd;
                        // 	            display "PAT I/O  was: " batctrl-i-o-pat-ind;
                        // 	            display "PAYROLL  was: " batctrl-payroll;

                        batctrl_loc = Util.Str(objBatctrl_rec.BATCTRL_LOC);
                        batctrl_agent_cd = Util.NumInt(objBatctrl_rec.BATCTRL_AGENT_CD);
                        batctrl_i_o_pat_ind = Util.Str(objBatctrl_rec.BATCTRL_I_O_PAT_IND);
                        batctrl_payroll = Util.Str(objBatctrl_rec.BATCTRL_HOSP);
                        Display("ConsoleDisplay1.");

                        objD001_batch_in_progress_rec.D001_loc = objBatctrl_rec.BATCTRL_LOC;
                        objD001_batch_in_progress_rec.D001_agent_cd = Util.Str(objBatctrl_rec.BATCTRL_AGENT_CD);
                        objD001_batch_in_progress_rec.D001_i_o_pat_ind = objBatctrl_rec.BATCTRL_I_O_PAT_IND;
                        objD001_batch_in_progress_rec.D001_payroll = objBatctrl_rec.BATCTRL_HOSP;
                    }
                }
                // 	  else if  d001-batch-nbr = "        " or d001-batch-nbr = "00000000";
                else if (string.IsNullOrWhiteSpace(objD001_batch_in_progress_rec.D001_batch_nbr) || Util.Str(objD001_batch_in_progress_rec.D001_batch_nbr) == "00000000"
                    // 	           or d001-loc = "    " 	  or d001-loc = "0000";
                    || string.IsNullOrWhiteSpace(objD001_batch_in_progress_rec.D001_loc) || Util.Str(objD001_batch_in_progress_rec.D001_loc) == "0000"
                    // 	           or d001-agent-cd = " ";
                    || string.IsNullOrWhiteSpace(objD001_batch_in_progress_rec.D001_agent_cd)
                    // 	           or (     d001-i-o-pat-ind <> "I";
                    || (objD001_batch_in_progress_rec.D001_i_o_pat_ind != "I"
                    // 		       and d001-i-o-pat-ind <> "O";
                    && objD001_batch_in_progress_rec.D001_i_o_pat_ind != "O"
                    // 		       and d001-i-o-pat-ind <> "B";
                    & objD001_batch_in_progress_rec.D001_i_o_pat_ind != "B"
                    // 	           );
                    )
                    // 	           OR d001-payroll = " " or d001-payroll = "0";
                    || string.IsNullOrWhiteSpace(objD001_batch_in_progress_rec.D001_payroll) || objD001_batch_in_progress_rec.D001_payroll == "0"
                    // 	           then;
                    )
                {
                    // 	     perform zi1-ask-user-for-parameters thru zi1-99-exit;
                    await zi1_ask_user_for_parameters();
                    await zi1_99_exit();
                }
                else
                {
                    // 	    display "LOCATION was: " d001-loc;
                    // 	    display "AGENT    was: " d001-agent-cd;
                    // 	    display "PAT I/O  was: " d001-i-o-pat-ind;
                    // 	    display "PAYROLL  was: " d001-payroll.;
                    d001_loc = Util.Str(objD001_batch_in_progress_rec.D001_loc);
                    d001_agent_cd = Util.Str(objD001_batch_in_progress_rec.D001_agent_cd);
                    d001_i_o_pat_ind = Util.Str(objD001_batch_in_progress_rec.D001_i_o_pat_ind);
                    d001_payroll = Util.Str(objD001_batch_in_progress_rec.D001_payroll);
                    Display("ConsoleDisplay2.");
                }

                //     display "Recovery of the batch will now commence - Press ENTER to BEGIN Process ...".;
                //     accept confirm-space.;
                Display("ConsoleDisplay4.");
                await Prompt("process_batch");

                //     close d001-batch-in-progress.;
                File.Delete(Environment.GetEnvironmentVariable("HOMEDIR") + "\\batch_in_progress.d001");

                //      move d001-recovery - command - line             to macro
                //      macro = objD001_batch_in_progress_rec.d001_recovery_command_line;
                //     call "SYSTEM" using macro.;
                //     open output d001-batch-in-progress.;   // TODO: Not sure why is it open Output then close afterwards.....????
                //     close d001-batch-in-progress.;
            }
            else
            {
                File.Create(Environment.GetEnvironmentVariable("HOMEDIR") + "\\batch_in_progress.d001");
            }
        }

        private async Task zi0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zi0_99_exit");

            //     exit.;
        }

        private async Task zi1_ask_user_for_parameters()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zi1_ask_user_for_parameters");

            //     display "Unfortunately all required parameters were not available.".;
            //     display " ".;
            //     display "For the displayed batch, please re-enter the parameters, as prompted below:".;
            //     display " ".;
            //     display "Enter a 6 character BATCH NUMBER:".;
            //     accept  d001-batch-nbr.;
            //     display "Enter a 4 character LOCATION:".;
            //     accept  d001-loc.;
            //     display "Enter a 1 character AGENT:".;
            //     accept  d001-agent-cd.;
            //     display "Enter a 1 character Patient IN/OUT:".;
            //     accept  d001-i-o-pat-ind.;
            //     display "Enter a 1 character Payroll:".;
            Display("ConsoleDisplay3.");
            await Prompt("d001_batch_nbr");
            await Prompt("d001_loc");
            await Prompt("d001_agent_cd");
            await Prompt("d001_i_o_pat_ind");

            //  if site-id = 'RMA' then            
            if (site_id == "RMA")
            {
                //        accept  d001-payroll;
                await Prompt("d001_payroll");
            }
            //     else if site-id = 'HSC' then 
            else if (site_id == "HSC")
            {
                //     move 'A'	to d001-payroll            
                objD001_batch_in_progress_rec.D001_payroll = "A";
                d001_payroll = "A";
                // 	   display d001-payroll.;  // todo....???

            }

            //     objD001_batch_in_progress_rec.d001_f001_exists_ind = "N";
            objD001_batch_in_progress_rec.D001_f001_exists_ind = "N";
            //     display " ".;
            //     display "Thank you!".;

        }

        private async Task zi1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zi1_99_exit");

            //     exit.;
        }

        private async Task Zk0_store_in_progress_batch()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "Zk0_store_in_progress_batch");

            //     open output d001-batch-in-progress.;
            if (!File.Exists(Environment.GetEnvironmentVariable("HOMEDIR") + "\\batch_in_progress.d001"))
            {
                // if status-cobol-batch-in-progress <> "00" then       
                //if (Read_D001_batch_in_progress_rec() == false)
                //{
                // 	display "";
                // 	display " ";
                // 	display "";
                // 	display " ";
                // 	display "";
                // 	display "           !!!!! ERROR !!!!!";
                // 	display "";
                // 	display " ";
                // 	display "";
                // 	display " ";
                // 	display "The file which stores the batch you were working on CAN'T BE READ!";
                // 	display "Report this error to DYAD.";
                // 	display " ";
                //Display("ConsoleDisplay6.");
                // 	close d001-batch-in-progress;
                // 	go to zk0-99-exit.;
                await zk0_99_exit();
                return;
                //}
            }

            //Read_D001_batch_in_progress_rec();
            objD001_batch_in_progress_rec.D001_command_part_1 = ws_d001_command_part_1;
            objD001_batch_in_progress_rec.D001_command_part_2 = ws_d001_command_part_2;

            objD001_batch_in_progress_rec.D001_space_1 = "";
            objD001_batch_in_progress_rec.D001_space_2 = "";
            objD001_batch_in_progress_rec.D001_space_3 = "";
            objD001_batch_in_progress_rec.D001_space_4 = "";
            objD001_batch_in_progress_rec.D001_space_5 = "";
            objD001_batch_in_progress_rec.D001_space_6 = "";
            objD001_batch_in_progress_rec.D001_space_7 = "";

            objD001_batch_in_progress_rec.D001_batch_nbr = batctrl_batch_nbr_grp;
            objD001_batch_in_progress_rec.D001_loc = batctrl_loc;
            objD001_batch_in_progress_rec.D001_agent_cd = Util.Str(batctrl_agent_cd);
            objD001_batch_in_progress_rec.D001_i_o_pat_ind = batctrl_i_o_pat_ind;
            objD001_batch_in_progress_rec.D001_payroll = batctrl_payroll;  //objBatctrl_rec.BATCTRL_HOSP;

            //     write d001-batch-in-progress-rec.;
            Write_D001_batch_in_progress_rec(objD001_batch_in_progress_rec, true);
            //     close d001-batch-in-progress.;
        }

        private async Task zk0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zk0_99_exit");

            //     exit.;
        }

        private async Task zh00_verify_batch_status()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh00_verify_batch_status");

            // if batctrl-batch-status > "1" then            
            if (Util.Str(objBatctrl_rec.BATCTRL_BATCH_STATUS).CompareTo("1") > 0)
            {
                err_ind = 51;
                //    perform za0-common-error                thru    za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //         display scr-acpt-change-password;
                //         accept  scr-acpt-change-password;
                Display("scr-acpt-change-password.");
                await Prompt("password_input");

                // if password-input = password-special-privledges then            
                if (password_input == password_special_privledges)
                {
                    flag = "Y";
                }
                else
                {
                    flag = "N";
                }
            }
        }

        private async Task zh00_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh00_99_exit");

            //     exit.;
        }

        private async Task zh1_acpt_old_or_new_batch_opt()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh1_acpt_old_or_new_batch_opt");

            await initialize_screen_variables();
            await initialize_clmHdr_record_screenVariables();
            await initialize_clmdtl_record_screenVariables();
            await initialize_ws_pat_mstr_rec();

            // accept scr-old-or-new-batch-option.;
            Display("scr-old-or-new-batch-option.");
            await Prompt("option");

            //  if  old-batch or new-batch  or stop-option  then      
            if (option.Equals(old_batch) || option.Equals(new_batch) || option.Equals(stop_option))
            {
                //         next sentence;
            }
            else
            {
                err_ind = 1;
                //   perform za0-common-error        thru    za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //   go to zh1-acpt-old-or-new-batch-opt.;
                await zh1_acpt_old_or_new_batch_opt();
                return;
            }
        }

        private async Task zh1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh1_99_exit");

            //     exit.;
        }

        private async Task zh2_read_batctrl_file()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh2_read_batctrl_file");

            //objBatctrl_rec.key_batctrl_file = objBatctrl_rec.batctrl_batch_nbr;

            //     read batch-ctrl-file  key is key-batctrl-file;
            //         invalid key;
            //             flag = "N";
            //             go to zh2-99-exit.;

            batctrl_batch_nbr_grp = Util.Str(batctrl_bat_clinic_nbr_1_2).PadLeft(2, '0') + Util.Str(batctrl_bat_doc_nbr).PadRight(3) + Util.Str(batctrl_bat_week_day_d).PadLeft(3, '0');

            objBatctrl_rec = new F001_BATCH_CONTROL_FILE
            {
                WhereBatctrl_batch_nbr = batctrl_batch_nbr_grp
            }.Collection().FirstOrDefault();

            if (objBatctrl_rec == null)
            {
                flag = "N";
                //   go to zh2-99-exit.;
                await zh2_99_exit();
                return;
            }

            await assign_batctrl_to_variables();

            flag = "Y";
            //   add  1    to      ctr-read-batctrl-mstr.;
            ctr_read_batctrl_mstr++;
        }

        private async Task zh2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh2_99_exit");

            //     exit.;
        }

        private async Task zh3_disp_last_claim_in_batch()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh3_disp_last_claim_in_batch");

            clmhdr_batch_nbr = batctrl_batch_nbr_grp;
            clmhdr_claim_nbr = batctrl_last_claim_nbr;

            //clmhdr_zeroed_oma_suff_adj_grp = 0;
            clmhdr_adj_oma_cd = "0";
            clmhdr_adj_oma_suff = "";
            clmhdr_adj_adj_nbr = 0;

            clmhdr_b_key_type = "B";

            //clmhdr_b_data = clmhdr_claim_id;
            clmhdr_b_batch_num = clmhdr_batch_nbr;
            clmhdr_b_claim_nbr = clmhdr_claim_nbr;
            clmhdr_b_oma_cd = clmhdr_adj_oma_cd;
            clmhdr_b_oma_suff = clmhdr_adj_oma_suff;
            clmhdr_b_adj_nbr = Util.Str(clmhdr_adj_adj_nbr);

            //objClaims_mstr_rec.key_claims_mstr = clmhdr_key_claims_mstr;
            clmdtl_b_key_type = clmhdr_b_key_type;
            clmdtl_b_batch_num = clmhdr_b_batch_num;
            clmdtl_b_claim_nbr = clmhdr_b_claim_nbr;
            clmdtl_b_oma_cd = clmhdr_b_oma_cd;
            clmdtl_b_oma_suff = clmhdr_b_oma_suff;
            clmdtl_b_adj_nbr = clmhdr_b_adj_nbr;

            // perform ai0-read-claims-mstr        thru    ai0-99-exit.;
            await ai0_read_claims_mstr();
            await ai0_99_exit();


            // if not-ok then            
            if (flag.Equals(not_ok))
            {
                err_ind = 4;
                //   perform za0-common-error        thru    za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //  perform zz0-end-of-batch        thru    zz0-99-exit;
                await zz0_end_of_batch();
                await zz0_10();
                await zz0_99_exit();
                //         go to mainline-shutdown.;
                await mainline_shutdown();
                return;
            }

            ws_doc_spec_cd = clmhdr_doc_spec_cd;

            //     perform zj0-read-all-clmdtl         thru    zj0-99-exit.;
            await zj0_read_all_clmdtl();
            await zj0_10_read_index_rec();
            await zj0_99_exit();

            //     display scr-acpt-clmhdr.;
            Display("scr-acpt-clmhdr.");

            //    objPat_mstr.Key_pat_mstr = objClaim_header_rec.Clmhdr_pat_ohip_id_or_chart;            

            //     read pat-mstr into ws-pat-mstr-rec;
            //         invalid key;
            //             ws_pat_mstr_rec = "";

            objPat_mstr_rec = new F010_PAT_MSTR
            {
                WherePat_i_key = clmhdr_pat_key_type,
                WherePat_con_nbr = Util.NumDec(Util.Str(clmhdr_pat_key_data_grp).PadRight(15, ' ').Substring(0, 2)),
                WherePat_i_nbr = Util.NumDec(Util.Str(clmhdr_pat_key_data_grp).PadRight(15, ' ').Substring(2, 12))
            }.Collection().FirstOrDefault();

            if (objPat_mstr_rec == null)
            {
                //ws_pat_mstr_rec = "";
                objPat_mstr_rec = new F010_PAT_MSTR();
            }

            await patMstr_to_screenVariables();
            await patMstr_record_to_wsPatmstrRec_screenVariables();

            ws_scr_health_nbr = Util.Str(ws_pat_health_nbr);
            //     perform ca1-display-pat-info        thru ca1-99-exit.;
            await ca1_display_pat_info();
            await ca1_99_exit();


            //     display scr-clmhdr-pat-surname.;
            Display("scr-acpt-pat-surname.");

            ss_hold_clmdtl_oma = ss_clmdtl_oma;

            // if ss-hold-clmdtl-oma > 0 then            
            if (ss_hold_clmdtl_oma > 0)
            {
                ss_clmdtl_oma = 1;
                do
                {
                    //     perform xa0-display-details     thru xa0-99-exit.;
                    await xa0_display_details(true, ss_clmdtl_oma);
                    await xa0_99_exit();
                    ss_clmdtl_oma++;
                } while (ss_clmdtl_oma <= ss_hold_clmdtl_oma);
            }

            // if ss-hold-clmdtl-oma > 1  then        
            /* if (ss_hold_clmdtl_oma > 1)
             {
                 ss_clmdtl_oma = 2;
                 //    perform xa0-display-details     thru xa0-99-exit.;
                 await xa0_display_details(true, ss_clmdtl_oma);
                 await xa0_99_exit();
             }

             //  if ss-hold-clmdtl-oma > 2 then          
             if (ss_hold_clmdtl_oma > 2)
             {
                 ss_clmdtl_oma = 3;
                 //     perform xa0-display-details     thru xa0-99-exit.;
                 await xa0_display_details(true, ss_clmdtl_oma);
                 await xa0_99_exit();
             }

             // if ss-hold-clmdtl-oma > 3 then            
             if (ss_hold_clmdtl_oma > 3)
             {
                 ss_clmdtl_oma = 4;
                 //     perform xa0-display-details     thru xa0-99-exit.;
                 await xa0_display_details(true, ss_clmdtl_oma);
                 await xa0_99_exit();
             }

             // if ss-hold-clmdtl-oma > 4 then            
             if (ss_hold_clmdtl_oma > 4)
             {
                 ss_clmdtl_oma = 5;
                 //    perform xa0-display-details     thru xa0-99-exit.;
                 await xa0_display_details(true, ss_clmdtl_oma);
                 await xa0_99_exit();
             }

             // if ss-hold-clmdtl-oma > 5 then            
             if (ss_hold_clmdtl_oma > 5)
             {
                 ss_clmdtl_oma = 6;
                 //    perform xa0-display-details     thru xa0-99-exit.;
                 await xa0_display_details(true, ss_clmdtl_oma);
                 await xa0_99_exit();
             }

             // if ss-hold-clmdtl-oma > 6 then          
             if (ss_hold_clmdtl_oma > 6)
             {
                 ss_clmdtl_oma = 7;
                 //    perform xa0-display-details     thru xa0-99-exit.;
                 await xa0_display_details(true, ss_clmdtl_oma);
                 await xa0_99_exit();
             }

             // if ss-hold-clmdtl-oma > 7 then            
             if (ss_hold_clmdtl_oma > 7)
             {
                 ss_clmdtl_oma = 8;
                 //     perform xa0-display-details     thru xa0-99-exit.;
                 await xa0_display_details(true, ss_clmdtl_oma);
                 await xa0_99_exit();
             }

             // if ss-hold-clmdtl-oma > 8 then            
             if (ss_hold_clmdtl_oma > 8)
             {
                 ss_clmdtl_oma = 9;
                 //    perform xa0-display-details     thru xa0-99-exit.;
                 await xa0_display_details(true, ss_clmdtl_oma);
                 await xa0_99_exit();
             }

             // if ss-hold-clmdtl-oma > 9 then         
             if (ss_hold_clmdtl_oma > 9)
             {
                 ss_clmdtl_oma = 10;
                 //    perform xa0-display-details     thru xa0-99-exit.;
                 await xa0_display_details(true, ss_clmdtl_oma);
                 await xa0_99_exit();
             } */

            ss_clmdtl_oma = ss_hold_clmdtl_oma;

            await display_hold_desc();
            //     display scr-acpt-det-desc.;
            Display("scr-acpt-det-desc.");

            //     display confirm.;
            //     accept confirm.;
            Display("confirm.");
            await Prompt("continue_reply");
            Display("confirm.", false);
        }

        private async Task zh3_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh3_99_exit");

            //     exit.;
        }

        private async Task zh4_acpt_new_batch_hdr_info()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh4_acpt_new_batch_hdr_info");

            //  display scr-acpt-batch-type.;
            Display("scr-acpt-batch-type.");
            batctrl_batch_type = "C";

            //  display scr-acpt-batch-type.;
            Display("scr-acpt-batch-type.");
        }

        private async Task<string> zh4_20_acpt_source()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh4_20_acpt_source");

            def_claim_source = "S";

            //     display scr-claim-source.;
            //     accept  scr-claim-source.;
            Display("scr-claim-source.");
            await Prompt("def_claim_source");

            // if  source-computer-genned or source-source-document  then            
            if (def_claim_source.Equals(source_computer_genned) || def_claim_source.Equals(source_source_document))
            {
                //objBatctrl_rec.BATCTRL_ADJ_CD_SUB_TYPE = def_claim_source;
                batctrl_adj_cd_sub_type = def_claim_source;
            }
            else
            {
                err_ind = 1;
                //    perform za0-common-error        thru    za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //         go to zh4-20-acpt-source.;
                await zh4_20_acpt_source();
                return string.Empty;
            }

            //objBatctrl_rec.BATCTRL_BATCH_NBR = "0";
            batctrl_batch_nbr_grp = "0";
            //     display scr-acpt-batch-nbr.;
            Display("scr-acpt-batch-nbr.");

            ws_hold_screen_dept = 0;

            //     perform zh42-acpt-batch-nbr         thru    zh42-99-exit.;
            await zh42_acpt_batch_nbr();
            await zh42_99_exit();

            flag = "1";
            //     perform ma0-acpt-verification       thru    ma0-99-exit.;
            await ma0_acpt_verification();
            await ma0_99_exit();

            // if flag-accept = "M" then            
            if (flag_accept.ToUpper().Equals("M"))
            {
                //         go to zh4-acpt-new-batch-hdr-info;                
                return "zh4_acpt_new_batch_hdr_info";
            }
            //  else  if flag-accept = "N"  then            
            else if (flag_accept.ToUpper().Equals("N"))
            {
                //             go to zh4-99-exit;                
                return "zh4_99_exit";
            }
            else
            {
                //             next sentence.;
            }

            //  rewrite doc-mstr-rec;
            //            invalid key;
            //               err_ind = 55;
            //             perform za0-common-error    thru    za0-99-exit;
            //             perform zz0-10              thru    zz0-99-exit;
            //             go to mainline-shutdown.;

            try
            {

                foreach (var obj in F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection)
                {
                    obj.RecordState = State.Modified;
                    obj.Submit();
                }

                objDoc_mstr_rec.RecordState = State.Modified;
                objDoc_mstr_rec.Submit();
            }
            catch (Exception e)
            {
                err_ind = 55;
                //   perform za0-common-error    thru    za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //    perform zz0-10              thru    zz0-99-exit;
                await zz0_10();
                await zz0_99_exit();
                //             go to mainline-shutdown.;
                await mainline_shutdown();
                return string.Empty;
            }

            batctrl_cycle_nbr = ws_iconst_clinic_cycle_nbr;
            batctrl_date_period_end = Util.Str(ws_iconst_date_period_end);

            Display("scr-acpt-doc-name.", "scr-acpt-doc-name1", false);
            Display("scr-acpt-doc-name.", "scr-disp-inits", false);
            Display("scr-acpt-doc-name.", "scr-disp-name", false);

            batctrl_date_period_end_yy = Util.NumInt(Util.Str(batctrl_date_period_end).PadLeft(8, '0').Substring(0, 4));
            batctrl_date_period_end_mm = Util.NumInt(Util.Str(batctrl_date_period_end).PadLeft(8, '0').Substring(4, 2));
            batctrl_date_period_end_dd = Util.NumInt(Util.Str(batctrl_date_period_end).PadLeft(8, '0').Substring(6, 2));
            batctrl_date_period_end_grp = Util.Str(batctrl_date_period_end_yy).PadLeft(4, '0') + Util.Str(batctrl_date_period_end_mm).PadLeft(2, '0') + Util.Str(batctrl_date_period_end_dd).PadLeft(2, '0');

            //     display scr-val-batch-period-cycle.;
            Display("scr-val-batch-period-cycle.");

            //     display scr-acpt-mask.;
            Display("scr-acpt-mask.");


            //  perform zh46-acpt-loc               thru    zh46-99-exit.;
            await zh46_acpt_loc();
            await zh46_99_exit();

            //     if batctrl-loc1 = "*" then                        
            if (Util.Str(batctrl_loc1).Equals("*"))
            {
                //         go to zh4-99-exit.;                
                return "zh4_99_exit";
            }

            return string.Empty;
        }

        private async Task zh4_30_acpt_agent()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh4_30_acpt_agent");

            //  accept scr-batctrl-agent-cd.;
            Display("scr-acpt-mask.");
            await Prompt("batctrl_agent_cd");

            //     perform zh4-30-verify-agent		thru zh4-30-99-exit.;
            await zh4_30_verify_agent();
            await zh4_30_99_exit();

            // if  ( site-id = "RMA"  and invalid-agent-cd ) then        
            if (site_id == "RMA" && flag_agent_cd.Equals(invalid_agent_cd))
            {
                err_ind = 112;
                // 	perform za0-common-error	thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //   go to zh4-30-acpt-agent.;
                await zh4_30_acpt_agent();
                return;
            }

            // if ( site-id = "RMA" and (batctrl-agent-cd not = 6) and (batctrl-bat-clinic-nbr-1-2 = 98) )  then                        
            if ((site_id == "RMA" && (batctrl_agent_cd != 6) && (Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 98)))
            {
                err_ind = 113;
                // 	    perform za0-common-error	thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //      go to zh4-30-acpt-agent.;
                await zh4_30_acpt_agent();
                return;
            }

            // if ( site-id = "RMA" and (batctrl-agent-cd = 6) and (batctrl-bat-clinic-nbr-1-2 not = 98)) then                        
            if ((site_id == "RMA" && (Util.NumInt(batctrl_agent_cd) == 6) && (Util.NumInt(batctrl_bat_clinic_nbr_1_2) != 98)))
            {
                err_ind = 194;
                // 	    perform za0-common-error	thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //     go to zh4-30-acpt-agent.;
                await zh4_30_acpt_agent();
                return;
            }

            def_agent_code = Util.Str(batctrl_agent_cd);

            batctrl_payroll = "A";

            //     display scr-batctrl-payroll.;
            Display("scr-acpt-mask.", "scr-batctrl-payroll");

            //     perform zh48-acpt-payroll           thru    zh48-99-exit.;
            await zh48_acpt_payroll();
            await zh48_99_exit();


            clmhdr_payroll = batctrl_payroll;

            batctrl_batch_status = "0";

            //  perform zh9-write-batctrl-file      thru    zh9-99-exit.;
            await zh9_write_batctrl_file();
            await zh9_99_exit();

            // if not-ok then            
            if (flag.Equals(not_ok))
            {
                flag_accept = "N";
                err_ind = 42;
                //  perform za0-common-error        thru    za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //      go to zh4-99-exit.;
                await zh4_99_exit();
                return;
            }


            batctrl_adj_cd = "0";
            batctrl_calc_ar_due = 0;
            batctrl_calc_tot_rev = 0;
            batctrl_manual_pay_tot = 0;
            batctrl_amt_est = 0;
            batctrl_amt_act = 0;

            ws_batctrl_amt_act = 0;

            batctrl_svc_est = 0;
            batctrl_svc_act = 0;

            ws_batctrl_amt_diff = 0;
            ws_batctrl_svc_diff = 0;

            //  display scr-lit-batctrl-data.;
            Display("scr-lit-batctrl-data.");

            //  display scr-val-batctrl-data.;
            Display("scr-val-batctrl-data.");
        }

        private async Task zh4_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh4_99_exit");

            //     exit.;
        }

        // verify_agent_code.rtn
        private async Task zh4_30_verify_agent()  //XX00_VERIFY_AGENT()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh4_30_verify_agent");

            //DEF_AGENT_CODE = AGENT_2B_TESTED;
            def_agent_code = Util.Str(batctrl_agent_cd);

            // IF  DEF-AGENT-OHIP OR DEF-AGENT-OHIP-WCB  OR DEF-AGENT-IN-PAT-DIAG-BILLING  OR DEF-AGENT-OHIP-NOT-VALID OR DEF-AGENT-BILL-DIRECT  OR DEF-AGENT-WCB  THEN    
            if (
               def_agent_code.Equals(def_agent_ohip) || def_agent_code.Equals(def_agent_ohip_wcb) || def_agent_code.Equals(def_agent_in_pat_diag_billing) || def_agent_code.Equals(def_agent_ohip_not_valid)
               || def_agent_code.Equals(def_agent_bill_direct) || def_agent_code.Equals(def_agent_wcb)
                )
            {
                //      FLAG_AGENT_CD = "Y";
                flag_agent_cd = "Y";
            }
            else
            {
                //    FLAG_AGENT_CD = "N";
                flag_agent_cd = "N";
            }
        }

        // verify_agent_code.rtn
        private async Task zh4_30_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh4_30_99_exit");

            //     EXIT.;
            //      replacing  ==xx00-verify-agent==   by ==zh4-30-verify-agent==;
            //                 ==xx00-99-exit==        by ==zh4-30-99-exit==;
            //                 ==agent-2b-tested==     by ==batctrl-agent-cd==.;
        }

        private async Task zh42_acpt_batch_nbr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh42_acpt_batch_nbr");

            //     accept scr-acpt-clinic-nbr-1-2.;
            Display("scr-acpt-batch-nbr.");
            await Prompt("batctrl_bat_clinic_nbr_1_2");

            //  if  batctrl-bat-clinic-nbr-1-2 > 21 and batctrl-bat-clinic-nbr-1-2 < 100 and batctrl-bat-clinic-nbr-1-2 not = 60  then;                        
            if (batctrl_bat_clinic_nbr_1_2 > 21 && batctrl_bat_clinic_nbr_1_2 < 100 && batctrl_bat_clinic_nbr_1_2 != 60)
            {
                //         next sentence;
            }
            else
            {
                err_ind = 64;
                //   perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //         go to zh42-acpt-batch-nbr.;
                await zh42_acpt_batch_nbr();
                return;
            }

            iconst_clinic_nbr_1_2 = batctrl_bat_clinic_nbr_1_2;
            ws_iconst_clinic_nbr_1_2 = batctrl_bat_clinic_nbr_1_2;

            //  perform uj1-read-isam-const-mstr    thru    uj1-99-exit.;
            await uj1_read_isam_const_mstr();
            await uj1_99_exit();

            // if not-ok then            
            if (flag.Equals(not_ok))
            {
                err_ind = 20;
                //   perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //   go to zh42-acpt-batch-nbr.;
                await zh42_acpt_batch_nbr();
                return;
            }

            // if sys-date-long-r > iconst-date-period-end then       
            sys_date_long_r_grp = sys_date_long_child;
            if (Util.NumInt(sys_date_long_r_grp) > Util.NumInt(Util.Str(objIconst_mstr_rec.ICONST_DATE_PERIOD_END_YY.ToString()).PadLeft(4, '0') + Util.Str(objIconst_mstr_rec.ICONST_DATE_PERIOD_END_MM.ToString()).PadLeft(2, '0') + Util.Str(objIconst_mstr_rec.ICONST_DATE_PERIOD_END_DD.ToString()).PadLeft(2, '0')))
            {
                err_ind = 60;
                // perform za0-common-error       thru    za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
            }
            else
            {
                //          next sentence.;
            }

            // if rec-locked  then           
            if (flag_lock.Equals(rec_locked))
            {
                //         go to zh42-acpt-batch-nbr.;
                await zh42_acpt_batch_nbr();
                return;
            }

            ws_iconst_clinic_card_colour = Util.Str(objIconst_mstr_rec.ICONST_CLINIC_CARD_COLOUR); //iconst_clinic_card_colour;
            ws_iconst_clinic_cycle_nbr = Util.NumInt(objIconst_mstr_rec.ICONST_CLINIC_CYCLE_NBR);  //iconst_clinic_cycle_nbr;
            ws_iconst_clinic_nbr = Util.Str(objIconst_mstr_rec.ICONST_CLINIC_NBR); //iconst_clinic_nbr;
            ws_iconst_date_period_end = Util.NumInt(Util.Str(Util.Str(objIconst_mstr_rec.ICONST_DATE_PERIOD_END_YY.ToString()).PadLeft(4, '0') + Util.Str(objIconst_mstr_rec.ICONST_DATE_PERIOD_END_MM.ToString()).PadLeft(2, '0') + Util.Str(objIconst_mstr_rec.ICONST_DATE_PERIOD_END_DD.ToString()).PadLeft(2, '0'))); // iconst_date_period_end;

            batctrl_clinic_nbr = ws_iconst_clinic_nbr;

            //     accept scr-acpt-doc-nbr.;
            Display("scr-acpt-batch-nbr.");
            await Prompt("batctrl_bat_doc_nbr");

            objDoc_mstr_rec.DOC_NBR = batctrl_bat_doc_nbr;
            //     perform zp0-read-doc-mstr                   thru zp0-99-exit.;
            await zp0_read_doc_mstr();
            await zp0_99_exit();

            //     if not-ok then            
            if (flag.Equals(not_ok))
            {
                err_ind = 7;
                //   perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //  go to zh42-acpt-batch-nbr.;
                await zh42_acpt_batch_nbr();
                return;
            }

            //  if doc-date-fac-start > sys-date-long then            
            if (Util.NumInt(Util.Str(objDoc_mstr_rec.DOC_DATE_FAC_START_YY.ToString()).PadLeft(4, '0') + Util.Str(objDoc_mstr_rec.DOC_DATE_FAC_START_MM.ToString()).PadLeft(2, '0') + Util.Str(objDoc_mstr_rec.DOC_DATE_FAC_START_DD.ToString()).PadLeft(2, '0')) > Util.NumInt(sys_date_long_child))
            {
                err_ind = 181;
                //   perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            //  if  doc-date-fac-term <> zero and doc-date-fac-term <> spaces and doc-date-fac-term <  sys-date-long  then                   
            if (objDoc_mstr_rec.DOC_DATE_FAC_TERM_YY + objDoc_mstr_rec.DOC_DATE_FAC_TERM_MM + objDoc_mstr_rec.DOC_DATE_FAC_TERM_DD != 0 && Util.NumInt(Util.Str(objDoc_mstr_rec.DOC_DATE_FAC_TERM_YY.ToString()).PadLeft(4, '0') + Util.Str(objDoc_mstr_rec.DOC_DATE_FAC_TERM_MM.ToString()).PadLeft(2, '0') + Util.Str(objDoc_mstr_rec.DOC_DATE_FAC_TERM_DD.ToString()).PadLeft(2, '0')) < Util.NumInt(sys_date_long_child))
            {
                err_ind = 107;
                //    perform za0-common-error                thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }

            F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection = new F020C_DOC_CLINIC_NEXT_BATCH_NBR
            {
                WhereDoc_nbr = objDoc_mstr_rec.DOC_NBR
            }.Collection();

            //     if batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr then                        
            if (batctrl_bat_clinic_nbr_1_2 == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[0].DOC_CLINIC_NBR))
            {
                //         next sentence;
            }
            //     else if doc-clinic-nbr-2 not equal 0 and batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-2 then                        
            else if (Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[1].DOC_CLINIC_NBR) != 0 && Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[1].DOC_CLINIC_NBR))
            {
                //         next sentence;
            }
            //     else if doc-clinic-nbr-3 not equal 0 and batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-3 then                        
            else if (Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[2].DOC_CLINIC_NBR) != 0 && Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[2].DOC_CLINIC_NBR))
            {
                //         next sentence;
            }
            //     else if doc-clinic-nbr-4 not equal 0 and batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-4 then                        
            else if (Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[3].DOC_CLINIC_NBR) != 0 && Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[3].DOC_CLINIC_NBR))
            {
                //         next sentence;
            }
            //     else if doc-clinic-nbr-5 not equal 0 and batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-5 then                 
            else if (Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[4].DOC_CLINIC_NBR) != 0 && Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[4].DOC_CLINIC_NBR))
            {
                //         next sentence;
            }
            //     else if doc-clinic-nbr-6 not equal 0 and batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-6 then                        
            else if (Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[5].DOC_CLINIC_NBR) != 0 && Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[5].DOC_CLINIC_NBR))
            {
                //         next sentence;
            }
            else
            {
                err_ind = 72;
                //   perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //         go to zh42-acpt-batch-nbr.;
                await zh42_acpt_batch_nbr();
                return;
            }

            doc_inits = Util.Str(objDoc_mstr_rec.DOC_INIT1) + Util.Str(objDoc_mstr_rec.DOC_INIT2) + Util.Str(objDoc_mstr_rec.DOC_INIT3);
            doc_name = Util.Str(objDoc_mstr_rec.DOC_NAME);
            //     display scr-acpt-doc-name.;
            Display("scr-acpt-doc-name.");

            Display("scr-dis-week-day.", false);
            //     display scr-acpt-dept-nbr.;
            //     accept scr-acpt-dept.;
            Display("scr-acpt-dept-nbr.");
            await Prompt("ws_hold_screen_dept");


            //  if Ws-hold-screen-dept not = doc-dept then            
            if (ws_hold_screen_dept != Util.NumInt(objDoc_mstr_rec.DOC_DEPT))
            {
                ws_hold_screen_dept = Util.NumInt(objDoc_mstr_rec.DOC_DEPT);
                err_ind = 54;
                //       perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //   go to zh42-acpt-batch-nbr.;
                await zh42_acpt_batch_nbr();
                return;

                //  if (ws-hold-screen-dept = 8) and (batctrl-bat-clinic-nbr-1-2 = 22 or 61 or 62 or 63 or 64 or 65 or 66 or 71 or 72 or 73 or 74 or 75) then      
                if (
                    (ws_hold_screen_dept == 8) && (Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 22 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 61 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 62 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 63 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 64 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 65 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 66 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 71 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 72 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 73 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 74 ||
                    Util.NumInt(batctrl_bat_clinic_nbr_1_2) == 75)
                    )
                {
                    err_ind = 54;
                    //   perform za0-common-error                thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //   go to zh42-acpt-batch-nbr.;
                    await zh42_acpt_batch_nbr();
                    return;
                }
            }

            //     display scr-acpt-spec-cd.;
            //     accept scr-acpt-spec.;
            Display("scr-acpt-spec-cd.");
            await Prompt("ws_doc_spec_cd");

            //     if ws-doc-spec-cd = doc-spec-cd then       
            if (ws_doc_spec_cd == Util.NumInt(objDoc_mstr_rec.DOC_SPEC_CD))
            {
                //         next sentence;
            }
            //     else if ws-doc-spec-cd = doc-spec-cd-2 then            
            else if (ws_doc_spec_cd == Util.NumInt(objDoc_mstr_rec.DOC_SPEC_CD_2))
            {
                //         next sentence;
            }
            //     else if ws-doc-spec-cd = doc-spec-cd-3 then
            else if (ws_doc_spec_cd == Util.NumInt(objDoc_mstr_rec.DOC_SPEC_CD_3))
            {
                //         next sentence;
            }
            else
            {
                err_ind = 71;
                //   perform za0-common-error        thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();

                //    go to zh42-acpt-batch-nbr.;
                await zh42_acpt_batch_nbr();
                return;
            }

            //   if batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr  then            
            if (Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[0].DOC_CLINIC_NBR))
            {
                //         if doc-nx-avail-batch not < 999 then            
                if (Util.NumInt(objDoc_mstr_rec.DOC_NX_AVAIL_BATCH) >= 999)
                {
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH = 1M;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[0].DOC_NX_AVAIL_BATCH = 1;
                    //            objBatctrl_rec.batctrl_bat_week_day_r = objDoc_mstr_rec.doc_nx_avail_batch;                    
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[0].DOC_NX_AVAIL_BATCH);
                }
                else
                {
                    //             add  1                                  to doc-nx-avail-batch;
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH++;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[0].DOC_NX_AVAIL_BATCH += 1;
                    //             objBatctrl_rec.batctrl_bat_week_day_r = objDoc_mstr_rec.doc_nx_avail_batch;                    
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[0].DOC_NX_AVAIL_BATCH);
                }
            }

            //  if batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-2 then       
            if (Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[1].DOC_CLINIC_NBR))
            {
                //      if doc-nx-avail-batch-2 not < 999 then            
                if (Util.NumInt(objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_2) >= 999)
                {
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_2 = 1;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[1].DOC_NX_AVAIL_BATCH = 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[1].DOC_NX_AVAIL_BATCH);
                }
                else
                {
                    //             add  1                                  to doc-nx-avail-batch-2;
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_2++;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[1].DOC_NX_AVAIL_BATCH += 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[1].DOC_NX_AVAIL_BATCH);
                }
            }

            //  if batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-3 then            
            if (Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[2].DOC_CLINIC_NBR))
            {
                //         if doc-nx-avail-batch-3 not < 999 then            
                if (Util.NumInt(objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_3) >= 999)
                {
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_3 = 1;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[2].DOC_NX_AVAIL_BATCH = 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[2].DOC_NX_AVAIL_BATCH);
                }
                else
                {
                    //             add  1                                  to doc-nx-avail-batch-3;                    
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[2].DOC_NX_AVAIL_BATCH += 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[2].DOC_NX_AVAIL_BATCH);
                }
            }

            //  if batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-4 then          
            if (Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[3].DOC_CLINIC_NBR))
            {
                //         if doc-nx-avail-batch-4 not < 999 then            
                if (Util.NumInt(objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_4) >= 999)
                {
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_4 = 1;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[3].DOC_NX_AVAIL_BATCH = 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[3].DOC_NX_AVAIL_BATCH);
                }
                else
                {
                    //             add  1                                  to doc-nx-avail-batch-4;
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_4++;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[3].DOC_NX_AVAIL_BATCH += 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[3].DOC_NX_AVAIL_BATCH);
                }
            }

            //  if batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-5 then           
            if (Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[4].DOC_CLINIC_NBR))
            {
                //         if doc-nx-avail-batch-5 not < 999 then            
                if (objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_5 >= 999)
                {
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_5 = 1;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[4].DOC_NX_AVAIL_BATCH = 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[4].DOC_NX_AVAIL_BATCH);
                }
                else
                {
                    //             add  1                                  to doc-nx-avail-batch-5;
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_5++;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[4].DOC_NX_AVAIL_BATCH += 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[4].DOC_NX_AVAIL_BATCH);
                }
            }

            //  if batctrl-bat-clinic-nbr-1-2 = doc-clinic-nbr-6 then            
            if (Util.NumInt(batctrl_bat_clinic_nbr_1_2) == Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[5].DOC_CLINIC_NBR))
            {
                //       if doc-nx-avail-batch-6 not < 999  then            
                if (objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_6 >= 999)
                {
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_6 = 1;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[5].DOC_NX_AVAIL_BATCH = 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[5].DOC_NX_AVAIL_BATCH);
                }
                else
                {
                    //             add  1                                  to doc-nx-avail-batch-6;
                    //objDoc_mstr_rec.DOC_NX_AVAIL_BATCH_6++;
                    F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[5].DOC_NX_AVAIL_BATCH += 1;
                    batctrl_bat_week_day_r = Util.NumInt(F020C_DOC_CLINIC_NEXT_BATCH_NBR_Collection[5].DOC_NX_AVAIL_BATCH);
                }
            }

            batctrl_bat_week_day_d = batctrl_bat_week_day_r;
            batctrl_bat_week_day_grp = Util.Str(batctrl_bat_week_day_r);
            batctrl_bat_week = Util.NumInt(Util.Str(batctrl_bat_week_day_r).PadLeft(3, '0').Substring(0, 2));
            batctrl_bat_day = Util.NumInt(Util.Str(batctrl_bat_week_day_r).PadLeft(3, '0').Substring(2, 1));

            Display("scr-acpt-dept-nbr.", "scr-clear-dept1", false);
            //  display scr-dis-week-day.;
            Display("scr-dis-week-day.");
            Display("batctrl_bat_week_day_d");

            batctrl_doc_nbr_ohip = Util.NumInt(objDoc_mstr_rec.DOC_OHIP_NBR);
        }

        private async Task zh42_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh42_99_exit");

            //     exit.;
        }

        private async Task zh46_acpt_loc()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh46_acpt_loc");

            //     accept scr-batctrl-loc.;
            Display("scr-acpt-mask.");
            await Prompt("batctrl_loc");

            // if batctrl-loc1 = "*" then;            
            batctrl_loc1 = Util.Str(batctrl_loc).PadRight(4).Substring(0, 1);
            batctrl_loc2_4 = Util.Str(batctrl_loc).PadRight(4).Substring(1, 3);
            if (Util.Str(batctrl_loc).PadRight(4).Substring(0, 1) == "*")
            {
                //         go to zh46-99-exit.;
                await zh46_99_exit();
                return;
            }

            ws_loc_grp = batctrl_loc;
            ws_loc_1 = Util.Str(batctrl_loc).PadRight(4).Substring(0, 1);
            ws_loc_2 = Util.Str(batctrl_loc).PadRight(4).Substring(1, 3);

            //  perform zr0-verify-loc-for-doc              thru zr0-99-exit.;
            await zr0_verify_loc_for_doc();
            await zr0_99_exit();


            //  if not-ok then;            
            if (flag.Equals(not_ok))
            {
                err_ind = 10;
                //         perform za0-common-error                thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //         go to zh46-acpt-loc.;
                await zh46_acpt_loc();
                return;
            }

            objLoc_mstr_rec.LOC_NBR = batctrl_loc;

            //     perform xb0-verify-location			thru xb0-99-exit.;
            await xb0_verify_location();
            await xb0_99_exit();

            //  if loc-not-found then           
            if (flag_loc_code.Equals(loc_not_found))
            {
                err_ind = 102;
                // 	    perform za0-common-error		thru xa0-99-exit;
                await za0_common_error();
                await xa0_99_exit();
                //      go to zh46-acpt-loc;
                await zh46_acpt_loc();
                return;
            }
            //  else if  loc-found and loc-active-for-entry = "N" then            
            else if (flag_loc_code.Equals(loc_found) && Util.Str(objLoc_mstr_rec.LOC_ACTIVE_FOR_ENTRY).ToUpper().Equals("N"))
            {
                err_ind = 103;
                //      perform za0-common-error            thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                //             go to ia0-acpt-loc.;
                await ia0_acpt_loc();
                return;
            }

            // objBatctrl_rec.BATCTRL_I_O_PAT_IND = Util.Str(objLoc_mstr_rec.LOC_CARD_COLOUR);
            batctrl_i_o_pat_ind = Util.Str(objLoc_mstr_rec.LOC_CARD_COLOUR);

            //   display scr-batctrl-i-o-pat-ind.;
            Display("scr-acpt-mask.", "scr-batctrl-i-o-pat-ind");

        }

        private async Task zh46_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh46_99_exit");

            //     exit.;
        }

        private async Task zh48_acpt_payroll()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh48_acpt_payroll");

            // if site-id = "RMA" then
            if (site_id == "RMA")
            {
                //         accept scr-batctrl-payroll;
                Display("scr-acpt-mask.");
                await Prompt("batctrl_payroll");
            }
            else
            {
                batctrl_payroll = "A";
                //     display scr-batctrl-payroll.;
                Display("scr-acpt-mask.", "scr-batctrl-payroll");
            }

            //  if batctrl-payroll     <> "A"  and <> "B" then                  
            if (Util.Str(batctrl_payroll).ToUpper() != "A" && Util.Str(batctrl_payroll).ToUpper() != "B")
            {
                err_ind = 104;
                //  perform za0-common-error		thru za0-99-exit;
                await za0_common_error();
                await za0_99_exit();
                // 	   go to zh48-acpt-payroll;
                await zh48_acpt_payroll();
                return;
            }
            else
            {
                //   	    next sentence.;
            }
        }

        private async Task zh48_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh48_99_exit");

            //     exit.;
        }

        private async Task zh9_write_batctrl_file()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh9_write_batctrl_file");

            //objBatctrl_rec.BATCTRL_DATE_BATCH_ENTERED = sys_date_grp;
            batctrl_date_batch_entered = sys_date_grp;

            //objBatctrl_rec.key_batctrl_file = objBatctrl_rec.batctrl_batch_nbr;


            //     write   batctrl-rec;
            //         invalid key;
            //          flag = "N";
            //          go to zh9-99-exit.;
            try
            {
                if (await assign_variables_to_batctrl())
                {
                    objBatctrl_rec.RecordState = State.Added;
                    objBatctrl_rec.Submit();
                }
            }
            catch (Exception e)
            {
                flag = "N";
                await zh9_99_exit();
                return;
            }

            flag = "Y";
            // add  1                                      to ctr-writ-batctrl-file.;
            ctr_writ_batctrl_file++;
        }

        private async Task zh9_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zh9_99_exit");

            //     exit.;
        }

        private async Task zj0_read_all_clmdtl()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zj0_read_all_clmdtl");

            ss_clmdtl_oma = 0;
            ss_clmdtl_desc = 0;
        }

        private async Task zj0_10_read_index_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zj0_10_read_index_rec");

            //     perform zj00-read-clmdtl-rec        thru zj00-99-exit.;
            await zj00_read_clmdtl_rec();
            await zj00_99_exit();

            //  if  ok then;            
            if (flag.Equals(ok))
            {
                //    perform zj02-move-clmdtl-to-hold-area   thru zj02-99-exit;
                await zj02_move_clmdtl_to_hold_area();
                await zj02_99_exit();

                //         if ss-clmdtl-desc < ss-max-nbr-of-desc-rec-allow then    
                if (ss_clmdtl_desc < ss_max_nbr_of_desc_rec_allow)
                {
                    //             go to zj0-10-read-index-rec;
                    await zj0_10_read_index_rec();
                    return;
                }
                else
                {
                    //             next sentence;
                }
            }
            else
            {
                //         next sentence.;
            }
        }

        private async Task zj0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zj0_99_exit");

            //     exit.;
        }

        private async Task zj00_read_clmdtl_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zj00_read_clmdtl_rec");

            //   read    claims-mstr    next   into claim-detail-rec;
            //         at end;
            //             flag = "N";
            //             go to zj00-99-exit.;


            if (Claims_mstr_dtl_rec_Collection.Count() == 0)
            {
                flag = "N";
                //  go to zj00-99-exit.;
                await zj00_99_exit();
                return;
            }
            else
            {
                if (ctr_read_claims_mstr >= Claims_mstr_dtl_rec_Collection.Count())
                {
                    flag = "N";
                    //  go to zj00-99-exit.;
                    await zj00_99_exit();
                    return;
                }
                else
                {
                    objClaims_mstr_dtl_rec = Claims_mstr_dtl_rec_Collection[ctr_read_claims_mstr];
                    ctr_read_claims_mstr++;
                    await clmdtl_record_to_screenVariables();
                }
            }

            // if (clmdtl-b-key-type  = "B") and (    clmdtl-batch-nbr = clmhdr-batch-nbr  and clmdtl-claim-nbr = clmhdr-claim-nbr) then            
            if (
                (Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_TYPE).ToUpper() == "B") && (Util.Str(objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR) == Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR) && Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_CLAIM_NBR) == Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_CLAIM_NBR))
                )
            {
                flag = "Y";
            }
            else
            {
                flag = "N";
            }
        }

        private async Task zj00_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zj00_99_exit");

            //     exit.;
        }

        private async Task zj02_move_clmdtl_to_hold_area()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zj02_move_clmdtl_to_hold_area");

            //  if clmdtl-oma-cd = "ZZZZ" then            
            if (Util.Str(clmdtl_oma_cd).ToUpper() == "ZZZZ")
            {
                //     add 1                           to           ss-clmdtl-desc;
                ss_clmdtl_desc++;
                hold_desc[ss_clmdtl_desc] = clmdtl_desc;
            }
            else
            {
                //         add 1                           to                   ss-clmdtl-oma;
                ss_clmdtl_oma++;
                hold_oma_cd[ss_clmdtl_oma] = clmdtl_oma_cd;
                hold_oma_suff[ss_clmdtl_oma] = clmdtl_oma_suff;
                hold_sv_nbr_serv[ss_clmdtl_oma] = clmdtl_nbr_serv;
                hold_sv_date[ss_clmdtl_oma] = clmdtl_sv_date;
                hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(clmdtl_sv_date).PadRight(8).Substring(0, 4));
                hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(clmdtl_sv_date).PadRight(8).Substring(4, 2));
                hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(clmdtl_sv_date).PadRight(8).Substring(6, 2));
                hold_diag_cd[ss_clmdtl_oma] = clmdtl_diag_cd;

                //         perform zj020-move-conseq-sv-day thru zj020-99-exit;
                //                     varying   ss;
                //                     from  1 by 1;
                //                     until     ss > 3;

                ss = 1;
                do
                {
                    await zj020_move_conseq_sv_day();
                    await zj020_99_exit();
                    ss++;
                } while (ss <= 3);

                hold_fee_oma[ss_clmdtl_oma] = clmdtl_fee_oma;
                hold_fee_ohip[ss_clmdtl_oma] = clmdtl_fee_ohip;
            }
        }

        private async Task zj02_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zj02_99_exit");

            //     exit.;
        }

        private async Task zj020_move_conseq_sv_day()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zj020_move_conseq_sv_day");

            //move clmdtl-sv - nbr(ss)     to hold-sv - nbr(ss - clmdtl - oma, ss).
            hold_sv_nbr[ss_clmdtl_oma, ss] = clmdtl_sv_nbr[ss];
            //move clmdtl - sv - day(ss)     to hold-sv - day(ss - clmdtl - oma, ss).
            hold_sv_day[ss_clmdtl_oma, ss] = clmdtl_sv_day[ss];
        }

        private async Task zj020_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zj020_99_exit");

            //     exit.;
        }

        private async Task zl2_preset_clmdtl_data()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zl2_preset_clmdtl_data");

            //objClaims_mstr_rec.claim_detail_rec = "";
            await initialize_clmdtl_record_screenVariables();

            clmhdr_claim_id_grp = clmhdr_batch_nbr + clmhdr_adj_oma_cd + clmhdr_adj_oma_suff + clmhdr_adj_adj_nbr;
            clmdtl_id = this.clmhdr_claim_id_grp; // clmhdr_claim_id;

            //move clmhdr-claim - id    to clmdtl-id.
            clmdtl_batch_nbr = clmhdr_batch_nbr;
            clmdtl_claim_nbr = clmhdr_claim_nbr;
            clmdtl_oma_cd = clmhdr_adj_oma_cd;
            clmdtl_oma_suff = clmhdr_adj_oma_suff;
            clmdtl_adj_nbr = clmhdr_adj_adj_nbr;

            clmdtl_cycle_nbr = clmhdr_cycle_nbr;

            clmhdr_date_period_end_grp = Util.Str(clmhdr_period_end_yy).PadLeft(4, '0') + Util.Str(clmhdr_period_end_mm).PadLeft(2, '0') + Util.Str(clmhdr_period_end_dd).PadLeft(2, '0');
            clmdtl_date_period_end = clmhdr_date_period_end_grp;
            clmdtl_agent_cd = clmhdr_agent_cd;
            clmdtl_adj_cd = clmhdr_adj_cd;

            clmhdr_orig_batch_id_grp = Util.Str(clmhdr_orig_batch_nbr_1_2) + Util.Str(clmhdr_orig_batch_nbr_4_9) + Util.Str(clmhdr_orig_claim_nbr).PadLeft(2, '0');
            clmhdr_orig_complete_batch_nbr = clmhdr_orig_batch_id_grp;

            clmdtl_orig_batch_id_grp = this.clmhdr_orig_batch_id_grp;
            clmdtl_orig_batch_nbr = Util.Str(clmdtl_orig_batch_id_grp).PadRight(10).Substring(0, 8);
            clmdtl_orig_batch_nbr_1_2 = Util.NumInt(Util.Str(clmdtl_orig_batch_nbr).PadRight(10).Substring(0, 2));
            clmdtl_orig_batch_nbr_4_9 = Util.Str(clmdtl_orig_batch_nbr).PadRight(10).Substring(2, 6);
            clmdtl_orig_claim_nbr_in_batch = Util.NumInt(Util.Str(clmdtl_orig_batch_id_grp).PadRight(10).Substring(8, 2));
            clmdtl_orig_complete_batch_nbr = Util.Str(clmdtl_orig_batch_id_grp).PadRight(10);
        }

        private async Task zl2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zl2_99_exit");

            //     exit.;
        }

        private async Task zm0_disp_batctrl_data()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zm0_disp_batctrl_data");

            //     display scr-acpt-batch-type.;
            Display("scr-acpt-batch-type.");

            //     display scr-val-batch-period-cycle.;
            Display("scr-val-batch-period-cycle.");


            //     display scr-claim-source.;
            Display("scr-claim-source.");

            //     display scr-acpt-mask.;
            Display("scr-acpt-mask.");

            //     display scr-lit-batctrl-data.;
            Display("scr-lit-batctrl-data.");

            //     subtract batctrl-amt-act                    from      batctrl-amt-est;
            //                                                 giving ws-batctrl-amt-diff.;
            ws_batctrl_amt_diff = batctrl_amt_est - batctrl_amt_act;  //Util.NumDec(objBatctrl_rec.BATCTRL_AMT_EST) - Util.NumDec(objBatctrl_rec.BATCTRL_AMT_ACT);

            //     subtract batctrl-svc-act                    from      batctrl-svc-est;
            //                                                 giving ws-batctrl-svc-diff.;

            ws_batctrl_svc_diff = batctrl_svc_est - batctrl_svc_act;

            //     display scr-val-batctrl-data.;
            Display("scr-val-batctrl-data.");

        }

        private async Task zm0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zm0_99_exit");

            //     exit.;
        }

        private async Task zm1_allow_change_of_estimates()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zm1_allow_change_of_estimates");

            //     display scr-acpt-change-verification.;
            //     accept  scr-acpt-change-verification.;
            Display("scr-acpt-change-verification.");
            await Prompt("change_reply");

            // if change-reply = "Y" then            
            if (Util.Str(change_reply).ToUpper().Equals("Y"))
            {
                //         display scr-acpt-change-password;
                //         accept  scr-acpt-change-password;
                Display("scr-acpt-change-password.");
                await Prompt("password_input");

                //         if password-input  =  password  or password-special-privledges  then
                if (password_input == password || password_input == password_special_privledges)
                {
                    //             perform zm2-input-batctrl-est       thru zm2-99-exit;
                    await zm2_input_batctrl_est();
                    await zm2_99_exit();
                    //             go to zm1-allow-change-of-estimates;
                    await zm1_allow_change_of_estimates();
                    return;
                }
                else
                {
                    err_ind = 3;
                    //   perform za0-common-error            thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //             go to zm1-allow-change-of-estimates.;
                    await zm1_allow_change_of_estimates();
                    return;
                }
            }
        }

        private async Task zm1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zm1_99_exit");

            //     exit.;
        }

        private async Task zm2_input_batctrl_est()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zm2_input_batctrl_est");

            //     accept scr-amt-est.;
            Display("scr-val-batctrl-data.", "scr-amt-est", false);
            Display("scr-batctrl-estimates.", "scr-amt-est-input");
            await Prompt("batctrl_amt_est", "scr-batctrl-estimates.", "scr-amt-est-input");

            //     if password-input = password-special-privledges then            
            if (password_input == password_special_privledges)
            {
                //         accept scr-amt-act.;
                Display("scr-val-batctrl-data.");
                await Prompt("batctrl_amt_act", "scr-val-batctrl-data.", "scr-amt-act");
            }

            //     subtract batctrl-amt-act                    from      batctrl-amt-est;
            //                                                 giving ws-batctrl-amt-diff.;
            ws_batctrl_amt_diff = batctrl_amt_est - batctrl_amt_act;

            Display("scr-batctrl-estimates.", "scr-svc-est-input", false);
            //     display scr-amt-diff.;            
            Display("scr-val-batctrl-data.", "scr-amt-diff");

            //     accept scr-svc-est.;
            await Prompt("batctrl_svc_est", "scr-val-batctrl-data.", "scr-svc-est");

            //     if password-input = password-special-privledges then            
            if (password_input == password_special_privledges)
            {
                //         accept scr-svc-act.;
                Display("scr-val-batctrl-data.");
                await Prompt("batctrl_svc_act");
            }

            //     subtract batctrl-svc-act                    from      batctrl-svc-est;
            //                                                 giving ws-batctrl-svc-diff.;
            ws_batctrl_svc_diff = batctrl_svc_est - batctrl_svc_act;

            //     display scr-svc-diff.;
            Display("scr-val-batctrl-data.", "scr-svc-diff");
        }

        private async Task zm2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zm2_99_exit");

            //     exit.;
        }

        private async Task zp0_read_doc_mstr()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zp0_read_doc_mstr");

            //  read doc-mstr      key is doc-nbr of doc-mstr-rec;
            //         invalid key;
            //             flag = "N";
            //             go to zp0-99-exit.;

            objDoc_mstr_rec = new F020_DOCTOR_MSTR
            {
                WhereDoc_nbr = objDoc_mstr_rec.DOC_NBR
            }.Collection().FirstOrDefault();

            if (objDoc_mstr_rec == null)
            {
                objDoc_mstr_rec = new F020_DOCTOR_MSTR();
                flag = "N";
                //  go to zp0-99-exit.;
                await zp0_99_exit();
                return;
            }

            flag = "Y";
            //   add  1                              to ctr-read-doc-mstr.;
            ctr_read_doc_mstr++;

            ws_doc_nx_batch_nbr = Util.NumInt(objDoc_mstr_rec.DOC_NX_AVAIL_BATCH);
            ws_doc_dept = Util.NumInt(objDoc_mstr_rec.DOC_DEPT);
            ws_doc_ohip_nbr = Util.NumInt(objDoc_mstr_rec.DOC_OHIP_NBR);
            ws_doc_spec_cd = Util.NumInt(objDoc_mstr_rec.DOC_SPEC_CD);

            F020L_DOC_LOCATIONS_Collection = new F020L_DOC_LOCATIONS
            {
                WhereDoc_nbr = objDoc_mstr_rec.DOC_NBR
            }.Collection();

            ws_doc_locations_grp = string.Empty;

            ws_doc_loc = new string[31];
            int tmpRow = 1;
            foreach (var obj in F020L_DOC_LOCATIONS_Collection)
            {
                F020L_DOC_LOCATIONS objF020L_DOC_LOCATIONS = obj;
                ws_doc_loc[tmpRow] = Util.Str(objF020L_DOC_LOCATIONS.DOC_LOC);
                tmpRow++;
            }
        }

        private async Task zp0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zp0_99_exit");

            //     exit.;
        }

        private async Task zr0_verify_loc_for_doc()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zr0_verify_loc_for_doc");

            ws_loc_grp = Util.Str(ws_loc_1) + Util.Str(ws_loc_2);
            // if ws-loc = spaces then            
            if (string.IsNullOrWhiteSpace(ws_loc_grp))
            {
                flag = "N";
                //    go to zr0-99-exit.;
                await zr0_99_exit();
                return;
            }

            flag = "N";
            //   perform zr1-search-doc-loc-tbl              thru zr1-99-exit;
            //                 varying  ss;
            //                 from  1  by 1;
            //                 until   ss > ss-max-nbr-locs-in-doc-rec;
            //                      or flag = "Y".;
            ss = 1;
            do
            {
                await zr1_search_doc_loc_tbl();
                await zr1_99_exit();
                ss++;
            } while (ss <= ss_max_nbr_locs_in_doc_rec && flag != "Y");
        }

        private async Task zr0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zr0_99_exit");

            //     exit.;
        }

        private async Task zr1_search_doc_loc_tbl()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zr1_search_doc_loc_tbl");

            // if ws-loc = ws-doc-loc(ss) then    
            ws_loc_grp = Util.Str(ws_loc_1) + Util.Str(ws_loc_2);
            if (ws_loc_grp == ws_doc_loc[ss])
            {
                flag = "Y";
            }
            //  else if ws-doc-loc(ss) = spaces then            
            else if (string.IsNullOrWhiteSpace(ws_doc_loc[ss]))
            {
                ss = ss_max_nbr_locs_in_doc_rec;
            }
        }

        private async Task zr1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zr1_99_exit");

            //     exit.;
        }

        private async Task zs0_verify_hosp()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zs0_verify_hosp");

            //     if  (    site-id = "RMA";
            if (
                (site_id == "RMA"
            //          and clmhdr-hosp =   "A";
             && clmhdr_hosp == "A"
            // 	  		  or "B";
            || clmhdr_hosp == "B"
            //                           or "C";
            || clmhdr_hosp == "C"
            //                           or "D";
            || clmhdr_hosp == "D"
            //                           or "E";
            || clmhdr_hosp == "E"
            //                           or "F";
            || clmhdr_hosp == "F"
            //                           or "G";
            || clmhdr_hosp == "G"
            //                           or "H";
            || clmhdr_hosp == "H"
            //                           or "I";
            || clmhdr_hosp == "I"
            //                           or "J";
            || clmhdr_hosp == "J"
            //                           or "K";
            || clmhdr_hosp == "K"
            //                           or "L";
            || clmhdr_hosp == "L"
            //                           or "M";
            || clmhdr_hosp == "M"
            //                           or "N";
            || clmhdr_hosp == "N"
            //                           or "O";
            || clmhdr_hosp == "O"
            //                           or "P";
            || clmhdr_hosp == "P"
            //                           or "Q";
            || clmhdr_hosp == "Q"
            //                           or "R";
            || clmhdr_hosp == "R"
            //                           or "S";
            || clmhdr_hosp == "S"
            //                           or "T";
            || clmhdr_hosp == "T"
            //                           or "U";
            || clmhdr_hosp == "U"
            //                           or "V";
            || clmhdr_hosp == "V"
            //                           or "W";
            || clmhdr_hosp == "W"
            //                           or "X";
            || clmhdr_hosp == "X"
            //                           or "Y";
            || clmhdr_hosp == "Y"
            //                           or "Z";
            || clmhdr_hosp == "Z"
            //                           or "1";
            || clmhdr_hosp == "1"
            //                           or "2";
            || clmhdr_hosp == "2"
            //                           or "3";
            || clmhdr_hosp == "3"
            //                           or "4";
            || clmhdr_hosp == "4"
            //                           or "5";
            || clmhdr_hosp == "5"
            //                           or "6";
            || clmhdr_hosp == "6"
            //                           or "7";
            || clmhdr_hosp == "7"
            //                           or "8";
            || clmhdr_hosp == "8"
            //                           or "9";
            || clmhdr_hosp == "9"
            // 	);
                )
            //      or (;
            || (
            // 	     site-id = "HSC";
            site_id == "HSC"
            //          and clmhdr-hosp =   "G";
            && clmhdr_hosp == "G"
            //                           or "K";
            || clmhdr_hosp == "K"
            //                           or "M";
            || clmhdr_hosp == "M"
            //                           or "S";
            || clmhdr_hosp == "S"
            //                           or "T";
            || clmhdr_hosp == "T"
            //                           or "W";
            || clmhdr_hosp == "W"
            // 	);
            )
            )
            {
                //     then;
                flag = "Y";
            }
            else
            {
                flag = "N";
            }
        }

        private async Task zs0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zs0_99_exit");

            //     exit.;
        }

        private async Task zt0_verify_i_o_pat_ind()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zt0_verify_i_o_pat_ind");

            // if   ws-i-o-pat-ind = "I" or "O"  or "B" then            
            if (ws_i_o_pat_ind.Equals("I") || ws_i_o_pat_ind.Equals("O") || ws_i_o_pat_ind.Equals("B"))
            {
                flag = "Y";
            }
            else
            {
                flag = "N";
                err_ind = 12;
                //  perform za0-common-error        thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }
        }

        private async Task zt0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zt0_99_exit");

            //     exit.;
        }

        private async Task<string> zz0_end_of_batch()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz0_end_of_batch");

            //     display scr-title-batch-control-data.;
            Display("scr-title-batch-control-data.");

            //     display scr-acpt-batch-nbr.;
            Display("scr-acpt-batch-nbr.");

            //     display scr-dis-week-day.;
            Display("scr-dis-week-day.");

            //     perform zm0-disp-batctrl-data          thru zm0-99-exit.;
            await zm0_disp_batctrl_data();
            await zm0_99_exit();

            change_reply = "Y";
            //     perform zm1-allow-change-of-estimates  thru zm1-99-exit;
            //                 until    change-reply = "N".;

            do
            {
                await zm1_allow_change_of_estimates();
                await zm1_99_exit();
            } while (change_reply != "N");

            //  if batctrl-last-claim-nbr < 1 then                        
            if (Util.NumInt(batctrl_last_claim_nbr) < 1)
            {
                //     perform zz1-delete-batctrl-rec  thru zz1-99-exit;
                await zz1_delete_batctrl_rec();
                await zz1_99_exit();

                //     if  ok then            
                if (flag.Equals(ok))
                {
                    //          go to zz0-10;                    
                    return "zz0_10";
                }
                else
                {
                    err_ind = 46;
                    //   perform za0-common-error    thru za0-99-exit;
                    await za0_common_error();
                    await za0_99_exit();
                    //          go to zz0-10.;                    
                    return "zz0_10";
                }
            }

            //  if  batctrl-amt-est = batctrl-amt-act or batctrl-svc-est = batctrl-svc-act  then                        
            if (Util.NumDec(batctrl_amt_est) == Util.NumDec(batctrl_amt_act) || Util.NumDec(batctrl_svc_est) == Util.NumDec(batctrl_svc_act))
            {
                batctrl_batch_status = "1";
            }
            else
            {
                batctrl_batch_status = "0";
            }

            //  perform zz2-rewrite-batctrl-rec     thru zz2-99-exit.;
            await zz2_rewrite_batctrl_rec();
            await zz2_99_exit();

            //  if not-ok then            
            if (ok.Equals(not_ok))
            {
                err_ind = 43;
                //  perform za0-common-error        thru za0-99-exit.;
                await za0_common_error();
                await za0_99_exit();
            }
            return string.Empty;
        }

        private async Task zz0_10()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz0_10");

            //     display blank-screen.;
            Display("blank-screen.");
            //     accept  sys-time                    from time.;

            /*  //     display scr-closing-screen-1.;
              Display("scr-closing-screen-1.");

              //     display scr-closing-screen-2.;
              Display("scr-closing-screen-2.");

              //     display scr-closing-screen-3.;
              Display("scr-closing-screen-3.");

              //     display scr-closing-screen-4.;
              Display("scr-closing-screen-4.");

              //     display confirm.;
              Display("confirm.");
              await Prompt("continue_reply"); */
        }

        private async Task zz0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz0_99_exit");

            //     exit.;
        }

        private async Task zz1_delete_batctrl_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz1_delete_batctrl_rec");

            flag = "Y";
            //     delete    batch-ctrl-file;
            //         invalid key;
            //         flag = "N";

            objBatctrl_rec.BATCTRL_BATCH_NBR = Util.Str(batctrl_bat_clinic_nbr_1_2) + Util.Str(batctrl_bat_doc_nbr) + batctrl_bat_week_day_r;  // todo: Verify this....???
            objBatctrl_rec.Delete();
        }

        private async Task zz1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz1_99_exit");

            //     exit.;
        }

        private async Task zz2_rewrite_batctrl_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz2_rewrite_batctrl_rec");

            //  rewrite    batctrl-rec;
            //         invalid key;
            //         flag = "N";
            //         go to zz2-99-exit.;

            try
            {
                await assign_variables_to_batctrl();

                objBatctrl_rec.RecordState = State.Modified;
                objBatctrl_rec.Submit();
            }
            catch (Exception e)
            {
                flag = "N";
                //  go to zz2-99-exit.;
                await zz2_99_exit();
                return;
            }

            flag = "Y";
            //  add  1                              to ctr-rewrit-batctrl-file.;
            ctr_rewrit_batctrl_file++;
        }

        private async Task zz2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz2_99_exit");

            //     exit.;
        }

        // tech_prof_suff_split_part2.rtn
        private async Task zz6_calc_ss_for_next_dtl()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz6_calc_ss_for_next_dtl");

            // if  online-claim then            
            if (flag_claim_source.Equals(online_claim))
            {
                //   	add 1				to     ss-clmdtl-oma;
                // 					giving ss-clmdtl-new-dtl;
                ss_clmdtl_new_dtl = ss_clmdtl_oma + 1;
            }
            else
            {
                // 	     add 1				to     ss-clmdtl-next-avail-dtl;
                // 					giving ss-clmdtl-new-dtl.;
                ss_clmdtl_new_dtl = ss_clmdtl_next_avail_dtl + 1;
            }
        }

        // tech_prof_suff_split_part2.rtn
        private async Task zz6_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz6_99_exit");

            //     exit.;
        }

        // tech_prof_suff_split_part2.rtn
        private async Task zz7_split_a_into_b_and_c()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz7_split_a_into_b_and_c");

            flag_tech_prof_suffix_rule = "Y";
            hold_oma_suff[ss_clmdtl_oma] = "B";
            //hold_oma_rec[ss_clmdtl_new_dtl] = hold_oma_rec[ss_clmdtl_oma];
            await assign_hold_oma_rec_to_next_hold_oma_rec(ss_clmdtl_oma, ss_clmdtl_new_dtl);
            hold_oma_suff[ss_clmdtl_new_dtl] = "C";
            hold_line_no[ss_clmdtl_new_dtl] = ss_clmdtl_new_dtl;
        }

        // tech_prof_suff_split_part2.rtn
        private async Task zz7_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "zz7_99_exit");

            //     exit.;
        }

        // y2k_default_century_year.rtn
        private async Task y2k_add_century_to_year()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "y2k_add_century_to_year");

            // if century-year > 99 then            
            if (century_year > 99)
            {
                // 	   next sentence;
            }
            //  else if century-year = 99 then            
            else if (century_year == 99)
            {
                //      add 1900                to   century-year;
                century_year += 1900;
            }
            else
            {
                //     add 2000		    to	 century-year.;
                century_year += 2000;
            }
        }

        // y2k_default_century_year.rtn
        private async Task y2k_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "y2k_99_exit");

            //     exit.;
        }

        // y2k_default_sysdate_century.rtn
        private async Task y2k_default_sysdate()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "y2k_default_sysdate");

            sys_date_temp = sys_date_left;
            sys_date_right = sys_date_temp;
            sys_date_blank = "0";
            //     add 20000000                        to sys-date-numeric.;
            sys_date_numeric += 20000000;
        }

        // y2k_default_sysdate_century.rtn
        private async Task y2k_default_sysdate_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "y2k_default_sysdate_exit");

            //     exit.;
        }

        // pricing_test_min_max_limits.rtn
        private async Task test_min_max_limits()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "test_min_max_limits");

            // if  hold-fee-min(ss, oma) <> 0 and hold-fee-oma (ss) <  hold-fee-min(ss, oma) and hold-sv-day (ss,1) <> "OP"  and hold-oma-suff (ss) = "A"  then            
            if (hold_fee_min[ss, oma] != 0 && hold_fee_oma[ss] < hold_fee_min[ss, oma] && hold_sv_day[ss, 1] != "OP" && hold_oma_suff[ss] == "A")
            {
                hold_fee_oma[ss] = hold_fee_min[ss, oma];
            }

            //  if hold-fee-min(ss,ohip) <> 0 and hold-fee-ohip (ss)  <  hold-fee-min(ss,ohip)  and hold-sv-day(ss,1) <> "OP" and hold-oma-suff (ss)   = "A"  then;
            if (hold_fee_min[ss, ohip] != 0 && hold_fee_ohip[ss] < hold_fee_min[ss, ohip] && hold_sv_day[ss, 1] != "OP" && hold_oma_suff[ss] == "A")
            {
                hold_fee_ohip[ss] = hold_fee_min[ss, ohip];
            }

            //  if hold-fee-max    (ss, oma) <> 0 and hold-fee-oma(ss) > hold-fee-max(ss, oma)   and hold-sv-day(ss,1) <> "OP"  and hold-oma-suff   (ss)   = "A" then      
            if (hold_fee_max[ss, oma] != 0 && hold_fee_oma[ss] > hold_fee_max[ss, oma] && hold_sv_day[ss, 1] != "OP" && hold_oma_suff[ss] == "A")
            {
                hold_fee_oma[ss] = hold_fee_max[ss, oma];
            }

            //  if  hold-fee-max(ss,ohip) <> 0  and hold-fee-ohip(ss) > hold-fee-max(ss,ohip) and hold-sv-day(ss,1) <> "OP" and hold-oma-suff (ss)   = "A"  then            
            if (hold_fee_max[ss, ohip] != 0 && hold_fee_ohip[ss] > hold_fee_max[ss, ohip] && hold_sv_day[ss, 1] != "OP" && hold_oma_suff[ss] == "A")
            {
                hold_fee_ohip[ss] = hold_fee_max[ss, ohip];
            }
        }

        // pricing_test_min_max_limits.rtn
        private async Task test_min_max_limits_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "test_min_max_limits_99_exit");

            //     exit.;
        }

        // desc_text_translation.rtn
        private async Task desc_text_translation()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "desc_text_translation");

            // if hold-desc-tmp-start = "PS" or "ps" then            
            if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "PS" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "ps")
            {
                hold_desc_tmp_grp = "1STTIMEPATIENTSEEN";
                hold_desc_tmp_start = "1ST";
                hold_desc_tmp_end = "TIMEPATIENTSEEN";
            }
            // else if hold-desc-tmp-start = "ID" or "id" then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "ID" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "id")
            {
                hold_desc_tmp_grp = "MDC-INFECTIOUS DISEASE";
                hold_desc_tmp_start = "MDC";
                hold_desc_tmp_end = "-INFECTIOUS DISEASE";
            }
            // else if hold-desc-tmp-start = "AM" or "am"  then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "AM" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "am")
            {
                //   move "AM / PM"                  to      hold-desc-tmp
                hold_desc_tmp_grp = "AM / PM";
                hold_desc_tmp_start = "AM ";
                hold_desc_tmp_end = "/ PM";
            }
            // else if hold-desc-tmp-start = "SBA" or "sba"   then
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "SBA" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "sba")
            {
                //     move "SEPARATE BOOKED APPT."    to      hold-desc-tmp
                hold_desc_tmp_grp = "SEPARATE BOOKED APPT.";
                hold_desc_tmp_start = "SEP";
                hold_desc_tmp_end = "ARATE BOOKED APPT.";
            }
            // else if hold-desc-tmp-start = "OR" or "or" then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "OR" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "or")
            {
                hold_desc_tmp_grp = "O.R.ATTACHED";
                hold_desc_tmp_start = "O.R";
                hold_desc_tmp_end = ".ATTACHED";
            }
            // else  if hold-desc-tmp-start = "LT" or "lt"  then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "LT" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "lt")
            {
                hold_desc_tmp_grp = "LETTER ATTACHED";
                hold_desc_tmp_start = "LET";
                hold_desc_tmp_end = "TER ATTACHED";
            }
            // else if hold-desc-tmp-start = "NV" or "nv"  then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "NV" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "nv")
            {
                //     move "NO VERIFICATION PLEASE"   to      hold-desc-tmp
                hold_desc_tmp_grp = "NO VERIFICATION PLEASE";
                hold_desc_tmp_start = "NO ";
                hold_desc_tmp_end = "VERIFICATION PLEASE";
            }
            // else if hold-desc-tmp-start = "DP" or "dp"  then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "DP" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "dp")
            {
                hold_desc_tmp_grp = "DIAG.PREGNANCY";
                hold_desc_tmp_start = "DIA";
                hold_desc_tmp_end = "G.PREGNANCY";
            }
            // else  if hold-desc-tmp-start = "DR" or "dr"  then
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "DR" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "dr")
            {
                //    move "DIAG. RENAL FAILURE"      to      hold-desc-tmp
                hold_desc_tmp_grp = "DIAG. RENAL FAILURE";
                hold_desc_tmp_start = "DIA";
                hold_desc_tmp_end = "G. RENAL FAILURE";
            }
            // else if hold-desc-tmp-start = "PR" or "pr" then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "PR" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "pr")
            {
                hold_desc_tmp_grp = "2NDPROCEDURESAMEDAY.";
                hold_desc_tmp_start = "2ND";
                hold_desc_tmp_end = "PROCEDURESAMEDAY.";
            }
            // else if hold-desc-tmp-start = "NO" or "no" then
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "NO" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "no")
            {
                //    move " NOT A DUPLICATE CLAIM."  to      hold-desc-tmp
                hold_desc_tmp_grp = " NOT A DUPLICATE CLAIM.";
                hold_desc_tmp_start = " NO";
                hold_desc_tmp_end = "T A DUPLICATE CLAIM.";
            }
            // else if hold-desc-tmp-start = "SI" or "si" then;
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "SI" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "si")
            {
                //     move "SEND IMMIGRATION PAPER."  to      hold-desc-tmp 
                hold_desc_tmp_grp = "SEND IMMIGRATION PAPER.";
                hold_desc_tmp_start = "SEN";
                hold_desc_tmp_end = "D IMMIGRATION PAPER.";
            }
            // else if hold-desc-tmp-start = "SO" or "so" then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "SO" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "so")
            {
                hold_desc_tmp_grp = "SENDOHIPNUMBER.";
                hold_desc_tmp_start = "SEN";
                hold_desc_tmp_end = "DOHIPNUMBER.";
            }
            // else if hold-desc-tmp-start = "CP" or "cp"  then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "CP" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "cp")
            {
                hold_desc_tmp_grp = "DIAG: COMPLICATION PREG";
                hold_desc_tmp_start = "DIA";
                hold_desc_tmp_end = "G: COMPLICATION PREG";
            }
            // else if hold-desc-tmp-start = "DI" or "di" then            
            else if (Util.Str(hold_desc_tmp_start).Trim().ToUpper() == "DI" || Util.Str(hold_desc_tmp_start).Trim().ToLower() == "di")
            {
                hold_desc_tmp_grp = "DIAG: DIABETES.";
                hold_desc_tmp_start = "DIA";
                hold_desc_tmp_end = "G: DIABETES.";
            }
            // else if hold-desc-tmp-start = "70" then            
            else if (Util.Str(hold_desc_tmp_start).Trim() == "70")
            {
                hold_desc_tmp_grp = "Provider #70828";
                hold_desc_tmp_start = "Pro";
                hold_desc_tmp_end = "vider #70828";
            }
        }

        // desc_text_translation.rtn
        private async Task desc_text_translation_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "desc_text_translation_99_exit");

            //     exit.;
        }

        // process_pat_eligibility_change.rtn
        private async Task yy0_process_pat_elig_change()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy0_process_pat_elig_change");

            ws_pat_date_last_maint = Util.NumInt(sys_date_long_child);
            ws_pat_date_last_elig_maint = Util.NumInt(sys_date_long_child);
            ws_pat_no_of_letter_sent = 0;

            // if  ws-pat-mess-code <> spaces then            
            if (!string.IsNullOrWhiteSpace(ws_pat_mess_code))
            {
                ws_pat_mess_code = "";
            }

            //     perform yy1-write-corrected-pat-rec	thru	yy1-99-exit.;
            await yy1_write_corrected_pat_rec();
            await yy1_99_exit();

            //     perform yy2-write-pat-elig-hist-rec	thru	yy2-99-exit.;
            await yy2_write_pat_elig_hist_rec();
            await yy2_99_exit();
        }

        // process_pat_eligibility_change.rtn
        private async Task yy0_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy0_99_exit");

            //     exit.;
        }

        // process_pat_eligibility_change.rtn
        private async Task yy1_write_corrected_pat_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy1_write_corrected_pat_rec");

            //objPat_id_rec.Clmhdr_pat_ohip_id_or_chart = objPat_mstr.Key_pat_mstr;
            // 				to clmhdr-pat-ohip-id-or-chart	of pat-id-rec.;
            objPat_id_rec.Clmhdr_pat_ohip_id_or_chart = Util.Str(objPat_mstr_rec.PAT_I_KEY) + Util.Str(objPat_mstr_rec.PAT_CON_NBR) + Util.Str(objPat_mstr_rec.PAT_I_NBR) + Util.Str(objPat_mstr_rec.FILLER);

            //objPat_id_rec.Pat_last_birth_date = ws_pat_last_birth_date;
            objPat_id_rec.Pat_last_birth_date = ws_pat_last_birth_date;

            //objPat_id_rec.Pat_last_version_cd = ws_pat_last_version_cd;
            objPat_id_rec.Pat_last_version_cd = ws_pat_last_version_cd;

            //     write pat-id-rec.;
            if (Write_F086_Pat_Id_d001_rec(objPat_id_rec, true))
            {
                //     add 1                       to ctr-write-corrected-pat.;
                ctr_write_corrected_pat++;
            }
        }

        // process_pat_eligibility_change.rtn
        private async Task yy1_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy1_99_exit");

            //     exit.;
        }

        // process_pat_eligibility_change.rtn
        private async Task yy2_write_pat_elig_hist_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy2_write_pat_elig_hist_rec");

            //objPat_elig_history.Key_pat_mstr = objPat_mstr.Key_pat_mstr;
            objF011_pat_mstr_elig_history_rec.PAT_I_KEY = objPat_mstr_rec.PAT_I_KEY;
            objF011_pat_mstr_elig_history_rec.PAT_CON_NBR = objPat_mstr_rec.PAT_CON_NBR;
            objF011_pat_mstr_elig_history_rec.PAT_I_NBR = objPat_mstr_rec.PAT_I_NBR;

            //objPat_elig_history.Pat_expiry_date = objPat_mstr.Pat_expiry_date;
            objF011_pat_mstr_elig_history_rec.PAT_EXPIRY_YY = objPat_mstr_rec.PAT_EXPIRY_YY;
            objF011_pat_mstr_elig_history_rec.PAT_EXPIRY_MM = objPat_mstr_rec.PAT_EXPIRY_MM;

            //objPat_elig_history.Pat_health_nbr = objPat_mstr.Pat_health_nbr;
            objF011_pat_mstr_elig_history_rec.PAT_HEALTH_NBR = objPat_mstr_rec.PAT_HEALTH_NBR;

            //objPat_elig_history.Pat_health_nbr_last = objPat_mstr.Pat_health_nbr;
            objF011_pat_mstr_elig_history_rec.PAT_LAST_HEALTH_NBR = objPat_mstr_rec.PAT_HEALTH_NBR;

            //objPat_elig_history.Pat_birth_date = ws_pat_birth_date;
            objF011_pat_mstr_elig_history_rec.PAT_BIRTH_DATE = ws_pat_birth_date;

            //objPat_elig_history.Pat_birth_date_last = ws_pat_last_birth_date;
            objF011_pat_mstr_elig_history_rec.PAT_BIRTH_DATE_LAST = ws_pat_last_birth_date;

            //objPat_elig_history.Pat_version_cd = ws_pat_version_cd;
            objF011_pat_mstr_elig_history_rec.PAT_VERSION_CD = ws_pat_version_cd;

            //objPat_elig_history.Pat_version_cd_last = ws_pat_last_version_cd;
            objF011_pat_mstr_elig_history_rec.PAT_LAST_VERSION_CD = ws_pat_last_version_cd;

            //objPat_elig_history.Pat_date_last_maint = sys_date;
            objF011_pat_mstr_elig_history_rec.PAT_DATE_LAST_MAINT = Util.NumDec(DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString());

            //     accept sys-time                  from time.;
            //objPat_elig_history.Pat_time_last_maint = sys_time;
            objF011_pat_mstr_elig_history_rec.ENTRY_TIME_LONG = Util.NumDec(DateTime.Now.ToString("h:mm:ss tt"));

            //     write f011-pat-mstr-elig-history-rec.;
            objF011_pat_mstr_elig_history_rec.RecordState = State.Added;
            objF011_pat_mstr_elig_history_rec.Submit();

            //     add 1                            to ctr-write-pat-elig-hist.;
            ctr_write_pat_elig_hist++;
        }

        // process_pat_eligibility_change.rtn
        private async Task yy2_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy2_99_exit");

            //     exit.;
        }

        // process_rejected_claims_change.rtn
        private async Task yy3_update_rejected_claim()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy3_update_rejected_claim");

            //objRejected_claims_rec.Clmhdr_pat_id = objClaim_header_rec.Clmhdr_pat_ohip_id_or_chart;


            //     read rejected-claims into rejected-claims-rec  key is clmhdr-pat-id;
            //         invalid key;
            //            go to yy3-99-exit.;

            // Rejected_claims_rec_Collection = Read_Rejected_claims_rec(true);

            if (Rejected_claims_rec_Collection.Count() == 0)
            {
                //            go to yy3-99-exit.;
                await yy3_99_exit();
                return;
            }
            objRejected_claims_rec.CLMHDR_PAT_OHIP_ID_OR_CHART = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_KEY_TYPE) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_KEY_DATA);
            //  Rejected_claims_rec_Collection = (ObservableCollection<Rejected_claims_rec>) Rejected_claims_rec_Collection.Where(x => x.Clmhdr_pat_id == objRejected_claims_rec.Clmhdr_pat_id);

            Rejected_claims_rec_Collection = new REJECTED_CLAIMS
            {
                WhereClmhdr_pat_ohip_id_or_chart = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_KEY_TYPE) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_KEY_DATA)
            }.Collection();

            if (Rejected_claims_rec_Collection.Count() == 0)
            {
                //            go to yy3-99-exit.;
                await yy3_99_exit();
                return;
            }

            objRejected_claims_rec = Rejected_claims_rec_Collection[RowCtr];
            //     add 1                               to ctr-read-rejected-claims.;
            ctr_read_rejected_claims++;

            //     perform yy3a-update-matching-pat-recs thru yy3a-99-exit.;
            await yy3a_update_matching_pat_recs();
            await yy3a_99_exit();

        }

        // process_rejected_claims_change.rtn
        private async Task yy3_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy3_99_exit");

            //     exit.;
        }

        // process_rejected_claims_change.rtn
        private async Task yy3a_update_matching_pat_recs()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy3a_update_matching_pat_recs");

            //Note: This is recursive..
            while (RowCtr < Rejected_claims_rec_Collection.Count())
            {

                // if clmhdr-pat-ohip-id-or-chart of claim-header-rec = clmhdr-pat-id of rejected-claims-rec then            
                if (Util.Str(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_KEY_TYPE) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_KEY_DATA)) == Util.Str(objRejected_claims_rec.CLMHDR_PAT_OHIP_ID_OR_CHART))
                {
                    //         objRejected_claims_rec.logically_deleted_flag = "Y";
                    objRejected_claims_rec.LOGICALLY_DELETED_FLAG = "Y";
                    //         rewrite rejected-claims-rec;
                    //             invalid key;
                    //                 go to yy3a-99-exit.;


                    objRejected_claims_rec.RecordState = State.Modified;
                    objRejected_claims_rec.Submit();
                }

                //      add 1				to ctr-updated-rejected-claims.;
                ctr_updated_rejected_claims++;

                //      read rejected-claims next  into rejected-claims-rec;
                //         at end;
                //             go to yy3a-99-exit.;

                RowCtr++;

                if (RowCtr >= Rejected_claims_rec_Collection.Count())
                {
                    //go to yy3a - 99 - exit.;
                    await yy3a_99_exit();
                    break;
                }

                objRejected_claims_rec = Rejected_claims_rec_Collection[RowCtr];

                //      add 1                              to ctr-read-rejected-claims.;
                ctr_read_rejected_claims++;

                //  if clmhdr-pat-ohip-id-or-chart of claim-header-rec not = clmhdr-pat-id of rejected-claims-rec  then            
                // 	    go to yy3a-99-exit;
                // else;
                //     go to yy3a-update-matching-pat-recs.;
            }
        }



        // process_rejected_claims_change.rtn
        private async Task yy3a_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "yy3a_99_exit");

            //    exit.;
        }

        // d001_newu701_oma_code_edit.rtn
        private async Task la4_oma_code_edit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la4_oma_code_edit");

            // if hold-oma-cd(ss-clmdtl-oma) =   "E078"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E078")
            {
                ws_e078_premium = "Y";
            }

            // if  hold-oma-cd(ss-clmdtl-oma) =   "E020" and  hold-oma-suff(ss-clmdtl-oma) = "C"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E020" && hold_oma_suff[ss_clmdtl_oma] == "C")
            {
                ws_e020 = "Y";
            }

            // if (hold-oma-cd(ss-clmdtl-oma) =   "E022" or  hold-oma-cd(ss-clmdtl-oma) =   "E017"  or  hold-oma-cd(ss-clmdtl-oma) =   "E016" )  and  hold-oma-suff(ss-clmdtl-oma) = "C"  then            
            if (
                (hold_oma_cd[ss_clmdtl_oma] == "E022" || hold_oma_cd[ss_clmdtl_oma] == "E017" || hold_oma_cd[ss_clmdtl_oma] == "E016") && hold_oma_suff[ss_clmdtl_oma] == "C"
                )
            {
                ws_e022_e017_e016 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "E719"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E719")
            {
                ws_e719 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "Z570" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "Z570")
            {
                ws_z570 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "E720" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E720")
            {
                ws_e720 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "Z571" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "Z571")
            {
                ws_z571 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "E717" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E717")
            {
                ws_e717 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "Z580" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "Z580")
            {
                ws_z555_z580 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "Z555"  or (     hold-oma-cd(ss-clmdtl-oma) >=  "Z491" and  hold-oma-cd(ss-clmdtl-oma) <=  "Z499" )  then            
            if (
                hold_oma_cd[ss_clmdtl_oma] == "Z555" || (Util.Str(hold_oma_cd[ss_clmdtl_oma]).CompareTo("Z491") >= 0 && Util.Str(hold_oma_cd[ss_clmdtl_oma]).CompareTo("Z499") <= 0)
                )
            {
                ws_z491_to_z499 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "E702" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E702")
            {
                ws_e702 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "Z515" or  hold-oma-cd(ss-clmdtl-oma) =   "Z399" or  hold-oma-cd(ss-clmdtl-oma) =   "Z400"   or  hold-oma-cd(ss-clmdtl-oma) =   "Z561"  or  hold-oma-cd(ss-clmdtl-oma) =   "Z558"  or  hold-oma-cd(ss-clmdtl-oma) =   "Z760"  then            
            if (
                hold_oma_cd[ss_clmdtl_oma] == "Z515" || hold_oma_cd[ss_clmdtl_oma] == "Z399" || hold_oma_cd[ss_clmdtl_oma] == "Z400" || hold_oma_cd[ss_clmdtl_oma] == "Z561" || hold_oma_cd[ss_clmdtl_oma] == "Z558" || hold_oma_cd[ss_clmdtl_oma] == "Z760"
                )
            {
                ws_z515_z760 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G123"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G123")
            {
                ws_g123 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G228" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G228")
            {
                ws_g228 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G223" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G223")
            {
                ws_g223 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G231"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G231")
            {
                ws_g231 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G265"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G265")
            {
                ws_g265 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "G264" then         
            if (hold_oma_cd[ss_clmdtl_oma] == "G264")
            {
                ws_g264 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G385" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G385")
            {
                ws_g385 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G384"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G384")
            {
                ws_g384 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G281" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G281")
            {
                ws_g281 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G381" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G381")
            {
                ws_g381 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "E793" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E793")
            {
                ws_e793 = "Y";
            }

            //     if    hold-oma-cd(ss-clmdtl-oma) =   "R905";
            if (
                 hold_oma_cd[ss_clmdtl_oma] == "R905"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S091";
              || hold_oma_cd[ss_clmdtl_oma] == "S091"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S092";
              || hold_oma_cd[ss_clmdtl_oma] == "S092"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S166";
              || hold_oma_cd[ss_clmdtl_oma] == "S166"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S167";
              || hold_oma_cd[ss_clmdtl_oma] == "S167"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S169";
              || hold_oma_cd[ss_clmdtl_oma] == "S169"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S171";
              || hold_oma_cd[ss_clmdtl_oma] == "S171"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S798";
              || hold_oma_cd[ss_clmdtl_oma] == "S798"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S799";
              || hold_oma_cd[ss_clmdtl_oma] == "S799"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S800";
              || hold_oma_cd[ss_clmdtl_oma] == "S800"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S122";
              || hold_oma_cd[ss_clmdtl_oma] == "S122"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S123";
              || hold_oma_cd[ss_clmdtl_oma] == "S123"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S125";
              || hold_oma_cd[ss_clmdtl_oma] == "S125"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S128";
              || hold_oma_cd[ss_clmdtl_oma] == "S128"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S120";
              || hold_oma_cd[ss_clmdtl_oma] == "S120"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S134";
              || hold_oma_cd[ss_clmdtl_oma] == "S134"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S149";
              || hold_oma_cd[ss_clmdtl_oma] == "S149"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S157";
              || hold_oma_cd[ss_clmdtl_oma] == "S157"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S165";
              || hold_oma_cd[ss_clmdtl_oma] == "S165"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S172";
              || hold_oma_cd[ss_clmdtl_oma] == "S172"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S168";
              || hold_oma_cd[ss_clmdtl_oma] == "S168"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S170";
              || hold_oma_cd[ss_clmdtl_oma] == "S170"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S189";
              || hold_oma_cd[ss_clmdtl_oma] == "S189"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S213";
              || hold_oma_cd[ss_clmdtl_oma] == "S213"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S214";
              || hold_oma_cd[ss_clmdtl_oma] == "S214"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S215";
              || hold_oma_cd[ss_clmdtl_oma] == "S215"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S217";
              || hold_oma_cd[ss_clmdtl_oma] == "S217"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S218";
              || hold_oma_cd[ss_clmdtl_oma] == "S218"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S113";
              || hold_oma_cd[ss_clmdtl_oma] == "S113"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S114";
              || hold_oma_cd[ss_clmdtl_oma] == "S114"
            //       or  hold-oma-cd(ss-clmdtl-oma) =   "S115";
              || hold_oma_cd[ss_clmdtl_oma] == "S115"
            //     then;
            )
            {
                ws_r905_s800 = "Y";
            }

            // if hold-oma-cd-alpha(ss-clmdtl-oma) =   "A" and  hold-oma-suff    (ss-clmdtl-oma) =   "A"  then            
            if (hold_oma_cd_alpha[ss_clmdtl_oma] == "A" && hold_oma_suff[ss_clmdtl_oma] == "A")
            {
                ws_annna = "Y";
            }

            // if  hold-oma-cd-alpha(ss-clmdtl-oma) =   "G" and  hold-oma-suff    (ss-clmdtl-oma) =   "A"  then            
            if (hold_oma_cd_alpha[ss_clmdtl_oma] == "G" && hold_oma_suff[ss_clmdtl_oma] == "A")
            {
                ws_gnnna = "Y";
            }

            //  if   (    hold-oma-cd(ss-clmdtl-oma) =   "K991";
            if ((hold_oma_cd[ss_clmdtl_oma] == "K991"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "K993";
               || hold_oma_cd[ss_clmdtl_oma] == "K993"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "K995";
               || hold_oma_cd[ss_clmdtl_oma] == "K995"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "K997";
               || hold_oma_cd[ss_clmdtl_oma] == "K997"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "U991";
               || hold_oma_cd[ss_clmdtl_oma] == "U991"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "U993";
               || hold_oma_cd[ss_clmdtl_oma] == "U993"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "U995";
               || hold_oma_cd[ss_clmdtl_oma] == "U995"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "U997";
               || hold_oma_cd[ss_clmdtl_oma] == "U997"
            // 	 );
              )
            //        and  hold-oma-suff    (ss-clmdtl-oma) =   "A";
              && hold_oma_suff[ss_clmdtl_oma] == "A"
            //     then;
              )
            {
                ws_k991_u997 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C998"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "C998")
            {
                ws_c998 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C999"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "C999")
            {
                ws_c999 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "E798" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E798")
            {
                ws_e798 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "Z400" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "Z400")
            {
                ws_z400 = "Y";
            }

            //  if  hold-oma-cd(ss-clmdtl-oma) =   "G400";
            if (
                hold_oma_cd[ss_clmdtl_oma] == "G400"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "G401";
               || hold_oma_cd[ss_clmdtl_oma] == "G401"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "G402";
               || hold_oma_cd[ss_clmdtl_oma] == "G402"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "G557";
               || hold_oma_cd[ss_clmdtl_oma] == "G557"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "G558";
               || hold_oma_cd[ss_clmdtl_oma] == "G558"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "G559";
               || hold_oma_cd[ss_clmdtl_oma] == "G559"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "G405";
               || hold_oma_cd[ss_clmdtl_oma] == "G405"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "G406";
               || hold_oma_cd[ss_clmdtl_oma] == "G406"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "G407";
               || hold_oma_cd[ss_clmdtl_oma] == "G407"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "E411";
               || hold_oma_cd[ss_clmdtl_oma] == "E411"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "P001";
               || hold_oma_cd[ss_clmdtl_oma] == "P001"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "G210";
               || hold_oma_cd[ss_clmdtl_oma] == "G210"
            //     then;
            )
            {
                ws_g400_other_codes = "Y";
            }

            // if  hold-oma-cd(ss-clmdtl-oma) =   "E409"  or  hold-oma-cd(ss-clmdtl-oma) =   "E410"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E409" || hold_oma_cd[ss_clmdtl_oma] == "E410")
            {
                ws_e409_e410 = "Y";
            }

            //  if  hold-oma-cd(ss-clmdtl-oma) =   "C990";
            if (hold_oma_cd[ss_clmdtl_oma] == "C990"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C991";
               || hold_oma_cd[ss_clmdtl_oma] == "C991"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C992";
               || hold_oma_cd[ss_clmdtl_oma] == "C992"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C993";
               || hold_oma_cd[ss_clmdtl_oma] == "C993"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C994";
               || hold_oma_cd[ss_clmdtl_oma] == "C994"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C995";
               || hold_oma_cd[ss_clmdtl_oma] == "C995"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C996";
               || hold_oma_cd[ss_clmdtl_oma] == "C996"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C997";
               || hold_oma_cd[ss_clmdtl_oma] == "C997"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C986";
               || hold_oma_cd[ss_clmdtl_oma] == "C986"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C987";
               || hold_oma_cd[ss_clmdtl_oma] == "C987"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C960";
               || hold_oma_cd[ss_clmdtl_oma] == "C960"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C961";
               || hold_oma_cd[ss_clmdtl_oma] == "C961"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C962";
               || hold_oma_cd[ss_clmdtl_oma] == "C962"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C963";
               || hold_oma_cd[ss_clmdtl_oma] == "C963"
            //           or  hold-oma-cd(ss-clmdtl-oma) =   "C964";
               || hold_oma_cd[ss_clmdtl_oma] == "C964"
            //      then;
            )
            {
                ws_sv_date_c1 = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_c990_to_c997 = "Y";
            }

            //  if ( hold-oma-cd(ss-clmdtl-oma) <>   "C990";
            if ((hold_oma_cd[ss_clmdtl_oma] != "C990"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>   "C991";
                && hold_oma_cd[ss_clmdtl_oma] != "C991"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>   "C992";
                && hold_oma_cd[ss_clmdtl_oma] != "C992"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>   "C993";
                && hold_oma_cd[ss_clmdtl_oma] != "C993"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>   "C994";
                && hold_oma_cd[ss_clmdtl_oma] != "C994"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>   "C995";
               && hold_oma_cd[ss_clmdtl_oma] != "C995"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>   "C996";
               && hold_oma_cd[ss_clmdtl_oma] != "C996"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>   "C997";
               && hold_oma_cd[ss_clmdtl_oma] != "C997"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>   "C101";
               && hold_oma_cd[ss_clmdtl_oma] != "C101"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>  "C986";
               && hold_oma_cd[ss_clmdtl_oma] != "C986"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>  "C987";
               && hold_oma_cd[ss_clmdtl_oma] != "C987"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>  "C960";
               && hold_oma_cd[ss_clmdtl_oma] != "C960"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>  "C961";
               && hold_oma_cd[ss_clmdtl_oma] != "C961"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>  "C962";
               && hold_oma_cd[ss_clmdtl_oma] != "C962"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>  "C963";
               && hold_oma_cd[ss_clmdtl_oma] != "C963"
            //          and  hold-oma-cd(ss-clmdtl-oma) <>  "C964";
               && hold_oma_cd[ss_clmdtl_oma] != "C964"
            //        );
               )
            //       and   hold-oma-cd-alpha(ss-clmdtl-oma) =   "C";
                && hold_oma_cd_alpha[ss_clmdtl_oma] == "C"
            //     then;
            )
            {
                ws_sv_date_c2 = Util.NumInt(hold_sv_date[ss_clmdtl_oma]);
                ws_cnnn = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "E450" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E450")
            {
                ws_e450 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "J315" then           
            if (hold_oma_cd[ss_clmdtl_oma] == "J315")
            {
                ws_j315 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "C985" then          
            if (hold_oma_cd[ss_clmdtl_oma] == "C985")
            {
                ws_c985 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "G222" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G222")
            {
                ws_g222 = "Y";
            }

            //  if  hold-oma-cd(ss-clmdtl-oma) =   "G248" or  hold-oma-cd(ss-clmdtl-oma) =   "G125" or  hold-oma-cd(ss-clmdtl-oma) =   "G118"  or  hold-oma-cd(ss-clmdtl-oma) =   "G062"  then
            if (hold_oma_cd[ss_clmdtl_oma] == "G248" || hold_oma_cd[ss_clmdtl_oma] == "G125" || hold_oma_cd[ss_clmdtl_oma] == "G118" || hold_oma_cd[ss_clmdtl_oma] == "G062")
            {
                ws_g248_g062 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "A770" or  hold-oma-cd(ss-clmdtl-oma) =   "A775"  or  hold-oma-cd(ss-clmdtl-oma) =   "A075"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "A770" || hold_oma_cd[ss_clmdtl_oma] == "A775" || hold_oma_cd[ss_clmdtl_oma] == "A075")
            {
                ws_a770_a775 = "Y";
            }

            // if hold-oma-cd-num (ss-clmdtl-oma) >= 900 and hold-oma-cd-num (ss-clmdtl-oma) <= 999 and (    hold-oma-cd-alpha(ss-clmdtl-oma) =   "C" or  hold-oma-cd-alpha(ss-clmdtl-oma) =   "W"  or  hold-oma-cd-alpha(ss-clmdtl-oma) =   "K"  )  then
            if (Util.NumInt(hold_oma_cd_num[ss_clmdtl_oma]) >= 900 && Util.NumInt(hold_oma_cd_num[ss_clmdtl_oma]) <= 999 && (hold_oma_cd_alpha[ss_clmdtl_oma] == "C" || hold_oma_cd_alpha[ss_clmdtl_oma] == "W" || hold_oma_cd_alpha[ss_clmdtl_oma] == "K"))
            {
                ws_X9nn = "Y";
            }

            //  if  hold-oma-cd(ss-clmdtl-oma) =   "H112"  or  hold-oma-cd(ss-clmdtl-oma) =   "H113"  then
            if (hold_oma_cd[ss_clmdtl_oma] == "H112" || hold_oma_cd[ss_clmdtl_oma] == "H113")
            {
                ws_h112_h113 = "Y";
            }

            //  if  hold-oma-cd(ss-clmdtl-oma) =   "G489" or  hold-oma-cd(ss-clmdtl-oma) =   "S323" then
            if (hold_oma_cd[ss_clmdtl_oma] == "G489" || hold_oma_cd[ss_clmdtl_oma] == "S323")
            {
                ws_g489_s323 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G222"  or  hold-oma-cd(ss-clmdtl-oma) =   "Z804" or  hold-oma-cd(ss-clmdtl-oma) =   "Z805"   then
            if (hold_oma_cd[ss_clmdtl_oma] == "G222" || hold_oma_cd[ss_clmdtl_oma] == "Z804" || hold_oma_cd[ss_clmdtl_oma] == "Z805")
            {
                ws_g222_z805 = "Y";
            }

            // if ( hold-oma-cd(ss-clmdtl-oma) =   "P014" or  hold-oma-cd(ss-clmdtl-oma) =   "P016" )  and  hold-oma-suff(ss-clmdtl-oma) = "C" then
            if ((hold_oma_cd[ss_clmdtl_oma] == "P014" || hold_oma_cd[ss_clmdtl_oma] == "P016") && hold_oma_suff[ss_clmdtl_oma] == "C")
            {
                ws_p014_p016 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "G221" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G221")
            {
                ws_g221 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G220" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "G220")
            {
                ws_g220 = "Y";
            }

            // if  hold-oma-cd(ss-clmdtl-oma) =   "S322" or  hold-oma-cd(ss-clmdtl-oma) =   "S326"  then
            if (hold_oma_cd[ss_clmdtl_oma] == "S322" || hold_oma_cd[ss_clmdtl_oma] == "S326")
            {
                ws_s322_a198 = "Y";
            }

            // if  hold-oma-cd(ss-clmdtl-oma) =   "A765"  or  hold-oma-cd(ss-clmdtl-oma) =   "C765"  then
            if (hold_oma_cd[ss_clmdtl_oma] == "A765" || hold_oma_cd[ss_clmdtl_oma] == "C765")
            {
                ws_a765_c765 = "Y";
            }

            //  if  hold-oma-cd(ss-clmdtl-oma) =   "G521"  or  hold-oma-cd(ss-clmdtl-oma) =   "G395" then
            if (hold_oma_cd[ss_clmdtl_oma] == "G521" || hold_oma_cd[ss_clmdtl_oma] == "G395")
            {
                ws_g521_g395 = "Y";
            }

            // if  hold-oma-cd(ss-clmdtl-oma) =   "H104" or  hold-oma-cd(ss-clmdtl-oma) =   "H134"  or  hold-oma-cd(ss-clmdtl-oma) =   "H154"  or  hold-oma-cd(ss-clmdtl-oma) =   "H124"  then
            if (hold_oma_cd[ss_clmdtl_oma] == "H104" || hold_oma_cd[ss_clmdtl_oma] == "H134" || hold_oma_cd[ss_clmdtl_oma] == "H154" || hold_oma_cd[ss_clmdtl_oma] == "H124")
            {
                ws_h104_h124 = "Y";
            }

            // if  hold-oma-cd(ss-clmdtl-oma) =   "G345" or  hold-oma-cd(ss-clmdtl-oma) =   "G359"  or  hold-oma-cd(ss-clmdtl-oma) =   "G381" then
            if (hold_oma_cd[ss_clmdtl_oma] == "G345" || hold_oma_cd[ss_clmdtl_oma] == "G359" || hold_oma_cd[ss_clmdtl_oma] == "G381")
            {
                ws_g345_g339 = "Y";
            }

            // if  ( hold-oma-cd(ss-clmdtl-oma) =   "G431" or  hold-oma-cd(ss-clmdtl-oma) =   "G478"  or  hold-oma-cd(ss-clmdtl-oma) =   "G479" )  and  hold-oma-suff    (ss-clmdtl-oma) =   "C" then
            if ((hold_oma_cd[ss_clmdtl_oma] == "G431" || hold_oma_cd[ss_clmdtl_oma] == "G478" || hold_oma_cd[ss_clmdtl_oma] == "G479") && hold_oma_suff[ss_clmdtl_oma] == "C")
            {
                ws_g431_g479 = "Y";
            }

            //  if  hold-oma-cd-alpha(ss-clmdtl-oma) =   "A" then            
            if (hold_oma_cd_alpha[ss_clmdtl_oma] == "A")
            {
                ws_annn = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "C983" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "C983")
            {
                ws_c983 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "J025" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "J025")
            {
                ws_j025 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "J021" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "J021")
            {
                ws_j021 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "J022" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "J022")
            {
                ws_j022 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "Z608" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "Z608")
            {
                ws_z608 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "Z611" or hold-oma-cd(ss-clmdtl-oma) =   "Z602" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "Z611" || hold_oma_cd[ss_clmdtl_oma] == "Z602")
            {
                ws_z611_z602 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "Z403" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "Z403")
            {
                ws_z403 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "Z408" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "Z408")
            {
                ws_z408 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "A195" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "A195")
            {
                ws_a195 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "K002"  then            
            if (hold_oma_cd[ss_clmdtl_oma] == "K002")
            {
                ws_k002 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C122" or hold-oma-cd(ss-clmdtl-oma) =   "C123"  or hold-oma-cd(ss-clmdtl-oma) =   "C124"  or hold-oma-cd(ss-clmdtl-oma) =   "C142" or hold-oma-cd(ss-clmdtl-oma) =   "C143" then
            if (hold_oma_cd[ss_clmdtl_oma] == "C122" || hold_oma_cd[ss_clmdtl_oma] == "C123" || hold_oma_cd[ss_clmdtl_oma] == "C124" || hold_oma_cd[ss_clmdtl_oma] == "C142" || hold_oma_cd[ss_clmdtl_oma] == "C143")
            {
                ws_c122_c143 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "E083" then            
            if (hold_oma_cd[ss_clmdtl_oma] == "E083")
            {
                ws_e083 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "C122";
            if (hold_oma_cd[ss_clmdtl_oma] == "C122"
            //     or hold-oma-cd(ss-clmdtl-oma) =   "C123";
             || hold_oma_cd[ss_clmdtl_oma] == "C123"
            //     or hold-oma-cd(ss-clmdtl-oma) =   "C124";
             || hold_oma_cd[ss_clmdtl_oma] == "C124"
            //     or hold-oma-cd(ss-clmdtl-oma) =   "C142";
             || hold_oma_cd[ss_clmdtl_oma] == "C142"
            //     or hold-oma-cd(ss-clmdtl-oma) =   "C143";
             || hold_oma_cd[ss_clmdtl_oma] == "C143"
            //     or hold-oma-cd(ss-clmdtl-oma) =   "C882";
             || hold_oma_cd[ss_clmdtl_oma] == "C882"
            //     or hold-oma-cd(ss-clmdtl-oma) =   "C982";
             || hold_oma_cd[ss_clmdtl_oma] == "C982"
            //     or (      hold-oma-cd-alpha(ss-clmdtl-oma) = 'C';
             || (hold_oma_cd_alpha[ss_clmdtl_oma] == "C"
            // 	and  (hold-oma-cd-num-3(ss-clmdtl-oma) = 2 or 7 or 9);
             && (hold_oma_cd_num_3[ss_clmdtl_oma] == 2 || hold_oma_cd_num_3[ss_clmdtl_oma] == 7 || hold_oma_cd_num_3[ss_clmdtl_oma] == 9)
            //        );
            )
            //     then;
            )
            {
                ws_c122_c982 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "G489"  or hold-oma-cd(ss-clmdtl-oma) =   "G482"   then
            if (hold_oma_cd[ss_clmdtl_oma] == "G489" || hold_oma_cd[ss_clmdtl_oma] == "G482")
            {
                ws_g489_g376 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "A197"  or hold-oma-cd(ss-clmdtl-oma) =   "A198"   then
            if (hold_oma_cd[ss_clmdtl_oma] == "A197" || hold_oma_cd[ss_clmdtl_oma] == "A198")
            {
                ws_a197_a198 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "K189" then
            if (hold_oma_cd[ss_clmdtl_oma] == "K189")
            {
                ws_k189 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "A190"  or hold-oma-cd(ss-clmdtl-oma) =   "A195"   or hold-oma-cd(ss-clmdtl-oma) =   "A695"   or hold-oma-cd(ss-clmdtl-oma) =   "A795"   then
            if (hold_oma_cd[ss_clmdtl_oma] == "A190" || hold_oma_cd[ss_clmdtl_oma] == "A195" || hold_oma_cd[ss_clmdtl_oma] == "A695" || hold_oma_cd[ss_clmdtl_oma] == "A795")
            {
                ws_a190_a795 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "K960"  then
            if (hold_oma_cd[ss_clmdtl_oma] == "K960")
            {
                ws_k960 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "K990" then
            if (hold_oma_cd[ss_clmdtl_oma] == "K990")
            {
                ws_k990 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "K961" then
            if (hold_oma_cd[ss_clmdtl_oma] == "K961")
            {
                ws_k961 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "K992" then
            if (hold_oma_cd[ss_clmdtl_oma] == "K992")
            {
                ws_k992 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "K962" then
            if (hold_oma_cd[ss_clmdtl_oma] == "K962")
            {
                ws_k962 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "K994"  then
            if (hold_oma_cd[ss_clmdtl_oma] == "K994")
            {
                ws_k994 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "K963" then
            if (hold_oma_cd[ss_clmdtl_oma] == "K963")
            {
                ws_k963 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "K998"  then
            if (hold_oma_cd[ss_clmdtl_oma] == "K998")
            {
                ws_k998 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "K964" then;
            if (hold_oma_cd[ss_clmdtl_oma] == "K964")
            {
                ws_k964 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "K996" then
            if (hold_oma_cd[ss_clmdtl_oma] == "K996")
            {
                ws_k996 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C960" then
            if (hold_oma_cd[ss_clmdtl_oma] == "C960")
            {
                ws_c960 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C990" then
            if (hold_oma_cd[ss_clmdtl_oma] == "C990")
            {
                ws_c990 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C961" then;
            if (hold_oma_cd[ss_clmdtl_oma] == "C961")
            {
                ws_c961 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C992" then
            if (hold_oma_cd[ss_clmdtl_oma] == "C992")
            {
                ws_c992 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C962" then
            if (hold_oma_cd[ss_clmdtl_oma] == "C962")
            {
                ws_c962 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C994" then
            if (hold_oma_cd[ss_clmdtl_oma] == "C994")
            {
                ws_c994 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C963" then
            if (hold_oma_cd[ss_clmdtl_oma] == "C963")
            {
                ws_c963 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C986" then
            if (hold_oma_cd[ss_clmdtl_oma] == "C986")
            {
                ws_c986 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C964" then
            if (hold_oma_cd[ss_clmdtl_oma] == "C964")
            {
                ws_c964 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "C996" then;
            if (hold_oma_cd[ss_clmdtl_oma] == "C996")
            {
                ws_c996 = "Y";
            }

            //  if hold-oma-cd(ss-clmdtl-oma) =   "G556" then;
            if (hold_oma_cd[ss_clmdtl_oma] == "G556")
            {
                ws_g556 = "Y";
            }

            // if  hold-oma-cd(ss-clmdtl-oma) =   "G400"  or  hold-oma-cd(ss-clmdtl-oma) =   "G405"  or  hold-oma-cd(ss-clmdtl-oma) =   "G557"   or  hold-oma-cd(ss-clmdtl-oma) =   "G600"   or  hold-oma-cd(ss-clmdtl-oma) =   "G603"                      
            if (hold_oma_cd[ss_clmdtl_oma] == "G400" || hold_oma_cd[ss_clmdtl_oma] == "G405" || hold_oma_cd[ss_clmdtl_oma] == "G557" || hold_oma_cd[ss_clmdtl_oma] == "G600" || hold_oma_cd[ss_clmdtl_oma] == "G603"
            //     or  hold-oma-cd(ss-clmdtl-oma) =   "G604" or  hold-oma-cd(ss-clmdtl-oma) =   "G610" or  hold-oma-cd(ss-clmdtl-oma) =   "G620"  then          
            )
            {
                ws_g400_g620 = "Y";
            }

            // if hold-oma-cd(ss-clmdtl-oma) =   "A120" then
            if (hold_oma_cd[ss_clmdtl_oma] == "A120")
            {
                ws_a120 = "Y";
            }
        }

        // d001_newu701_oma_code_edit.rtn
        private async Task la4_99_exit()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "la4_99_exit");

            //    exit.;
        }

        private async Task clmhdr_record_to_screenVariables()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "Clmhdr_Record_To_ScreenVariables");

            clmhdr_batch_nbr = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR);
            clmhdr_clinic_nbr_1_2 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).Substring(0, 2));
            clmhdr_doc_nbr = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).PadRight(8).Substring(2, 3);
            clmhdr_week = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).PadRight(8).Substring(5, 2));
            clmhdr_day = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).PadRight(8).Substring(7, 1));

            clmhdr_batch_nbr_3_6 = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).PadRight(8).Substring(2, 3);
            clmhdr_batch_nbr_7_9 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).PadRight(8).Substring(5, 3));

            clmhdr_claim_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_CLAIM_NBR);

            //clmhdr_zeroed_oma_suff_adj_grp
            clmhdr_adj_oma_cd = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_OMA_CD);
            clmhdr_adj_oma_suff = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_OMA_SUFF);
            clmhdr_adj_adj_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_ADJ_ADJ_NBR);

            clmhdr_batch_type = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_TYPE);
            clmhdr_adj_cd_sub_type = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_CD_SUB_TYPE);
            clmhdr_adj_cd_sub_type_ss = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_ADJ_CD_SUB_TYPE);

            clmhdr_doc_nbr_ohip = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_DOC_NBR_OHIP);
            clmhdr_doc_spec_cd = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_DOC_SPEC_CD);
            clmhdr_refer_doc_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_REFER_DOC_NBR);
            clmhdr_diag_cd = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_DIAG_CD);
            clmhdr_loc = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_LOC);
            clmhdr_hosp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_HOSP);
            clmhdr_payroll = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_HOSP);
            clmhdr_agent_cd = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_AGENT_CD);
            clmhdr_adj_cd = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_CD);
            clmhdr_tape_submit_ind = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_TAPE_SUBMIT_IND);
            clmhdr_i_o_pat_ind = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_I_O_PAT_IND);
            //clmhdr_pat_ohip_id_or_chart 
            clmhdr_pat_key_type = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_KEY_TYPE);
            clmhdr_pat_key_data_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_KEY_DATA);
            clmhdr_pat_key_ohip = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_KEY_DATA).PadRight(15, ' ').Substring(0, 8);
            //clmhdr_pat_acronym_grp 
            clmhdr_pat_acronym6 = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_ACRONYM6).PadRight(9).Substring(0, 6);
            clmhdr_pat_acronym3 = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_PAT_ACRONYM3);
            clmhdr_reference = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_REFERENCE);

            clmhdr_date_admit_yy = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_ADMIT).PadRight(8).Substring(0, 4);
            clmhdr_date_admit_yy_r_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_ADMIT).PadRight(8).Substring(0, 4);
            clmhdr_date_admit_yy_12 = Util.NumInt(clmhdr_date_admit_yy.Substring(0, 2));
            clmhdr_date_admit_yy_34 = Util.NumInt(clmhdr_date_admit_yy.Substring(2, 2));
            clmhdr_date_admit_mm = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_ADMIT).PadRight(8).Substring(4, 2));
            clmhdr_date_admit_dd_r = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_ADMIT).PadRight(8).Substring(4, 2);
            clmhdr_date_admit_dd = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_ADMIT).PadRight(8).Substring(6, 2));
            clmhdr_date_admit_dd_r = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_ADMIT).PadRight(8).Substring(6, 2);
            clmhdr_date_admit_r = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_ADMIT));
            clmhdr_doc_dept = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_DOC_DEPT);
            clmhdr_date_cash_tape_payment = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_MSG_NBR) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_REPRINT_FLAG) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_SUB_NBR) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_AUTO_LOGOUT) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_FEE_COMPLEX) + Util.Str(objClaims_mstr_dtl_rec.FILLER).PadRight(2);
            clmhdr_curr_payment = Util.NumDec(objClaims_mstr_dtl_rec.CLMHDR_CURR_PAYMENT);
            clmhdr_date_period_end_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_PERIOD_END);
            clmhdr_period_end_yy = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_PERIOD_END).PadLeft(8, '0').Substring(0, 4));
            clmhdr_period_end_mm = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_PERIOD_END).PadLeft(8, '0').Substring(4, 2));
            clmhdr_period_end_dd = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_PERIOD_END).PadLeft(8, '0').Substring(6, 2));
            clmhdr_cycle_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_CYCLE_NBR);
            clmhdr_date_sys = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_DATE_SYS);
            clmhdr_amt_tech_billed = Util.NumDec(objClaims_mstr_dtl_rec.CLMHDR_AMT_TECH_BILLED);
            clmhdr_amt_tech_paid = Util.NumDec(objClaims_mstr_dtl_rec.CLMHDR_AMT_TECH_PAID);
            clmhdr_tot_claim_ar_oma = Util.NumDec(objClaims_mstr_dtl_rec.CLMHDR_TOT_CLAIM_AR_OMA);
            clmhdr_tot_claim_ar_ohip = Util.NumDec(objClaims_mstr_dtl_rec.CLMHDR_TOT_CLAIM_AR_OHIP);
            clmhdr_manual_and_tape_paymnts = Util.NumDec(objClaims_mstr_dtl_rec.CLMHDR_MANUAL_AND_TAPE_PAYMENTS);
            clmhdr_status_ohip = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_STATUS_OHIP);
            clmhdr_manual_review = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_MANUAL_REVIEW);
            clmhdr_submit_date_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_SUBMIT_DATE);
            clmhdr_submit_yy = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_SUBMIT_DATE).PadRight(8).Substring(0, 4));
            clmhdr_submit_mm = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_SUBMIT_DATE).PadRight(8).Substring(4, 2));
            clmhdr_submit_dd = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_SUBMIT_DATE).PadRight(8).Substring(6, 2));
            clmhdr_confidential_flag = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_CONFIDENTIAL_FLAG);
            clmhdr_serv_date = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_SERV_DATE);
            clmhdr_elig_error = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ELIG_ERROR);
            clmhdr_elig_status = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ELIG_STATUS);
            clmhdr_serv_error = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_SERV_ERROR);
            clmhdr_serv_status = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_SERV_STATUS);
            clmhdr_orig_batch_id_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR);
            clmhdr_orig_batch_nbr_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR);
            clmhdr_orig_batch_nbr_1_2 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR).PadRight(8).Substring(0, 2));
            clmhdr_orig_batch_nbr_4_9 = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR).PadRight(8).Substring(2, 4);
            clmhdr_orig_batch_nbr_next_def_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR);
            clmhdr_orig_batch_nbr_4_6 = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR).PadRight(8).Substring(2, 3);
            clmhdr_orig_batch_nbr_7_8 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR).PadRight(8).Substring(5, 2));
            clmhdr_orig_batch_nbr_9 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR).PadRight(8).Substring(7, 1));
            clmhdr_orig_claim_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_ORIG_CLAIM_NBR);
            clmhdr_orig_batch_id_r_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR);
            clmhdr_orig_complete_batch_nbr = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ORIG_BATCH_NBR);
            clmhdr_b_key_type = Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_TYPE);
            clmhdr_b_data_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_CLAIM_NBR) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_OMA_CD) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_OMA_SUFF) + Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_ADJ_NBR);
            clmhdr_b_batch_num = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR);
            clmhdr_b_clinic_nbr_1_2 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).Substring(0, 2));
            clmhdr_b_doc_nbr = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).Substring(2, 3);
            clmhdr_b_doc_nbr_r_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).Substring(2, 3);
            clmhdr_b_doc_nbr_2_4 = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).Substring(2, 3);
            clmhdr_b_batch_number_grp = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).PadRight(8);
            clmhdr_b_week = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).PadRight(8).Substring(5, 2));
            clmhdr_b_day = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMHDR_BATCH_NBR).PadRight(8).Substring(7, 1));
            clmhdr_b_claim_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMHDR_CLAIM_NBR);
            clmhdr_b_oma_cd = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_OMA_CD);
            clmhdr_b_oma_suff = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_OMA_SUFF);
            clmhdr_b_adj_nbr = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_ADJ_NBR);
            clmhdr_b_data_r_grp = clmhdr_b_data_grp;
            clmhdr_b_pat_id = clmhdr_b_data_r_grp.Substring(0, 15);
            // clmhdr_p_claims_mstr_grp
            clmhdr_p_key_type = Util.Str(objClaims_mstr_dtl_rec.KEY_P_CLM_TYPE);
            clmhdr_p_data_grp = Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR) + Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_CLAIM_NBR) + Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_SERV_CODE) + Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_ADJ_NBR);
            clmhdr_p_batch_nbr_grp = Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR);
            clmhdr_p_clinic_nbr_1_2 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(0, 2));
            clmhdr_p_doc_nbr = Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(2, 3);
            clmhdr_p_week = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(5, 2));
            clmhdr_p_day = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(7, 1));
            clmhdr_p_claim_nbr = Util.NumInt(objClaims_mstr_dtl_rec.KEY_CLM_CLAIM_NBR);
            clmhdr_p_oma_cd = Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_SERV_CODE); // todo....not sure...???
            clmhdr_p_oma_suff = Util.Str(objClaims_mstr_dtl_rec.CLMHDR_ADJ_OMA_SUFF);  // todo... not surel....???
            clmhdr_p_adj_nbr = objClaims_mstr_dtl_rec.KEY_CLM_ADJ_NBR;
        }

        private async Task clmdtl_record_to_screenVariables()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "Clmdtl_Record_To_ScreenVariables");

            clmdtl_batch_nbr = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR);
            clmdtl_claim_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_CLAIM_NBR);
            clmdtl_oma_cd = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_OMA_CD);
            clmdtl_oma_suff = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_OMA_SUFF);
            clmdtl_adj_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_ADJ_NBR);
            clmdtl_rev_group_cd = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_REV_GROUP_CD);
            clmdtl_agent_cd = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_AGENT_CD);
            clmdtl_adj_cd = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_ADJ_CD);
            clmdtl_nbr_serv = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_NBR_SERV);
            clmdtl_sv_date = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_SV_YY).PadLeft(4, '0') + Util.Str(objClaims_mstr_dtl_rec.CLMDTL_SV_MM).PadLeft(2, '0') + Util.Str(objClaims_mstr_dtl_rec.CLMDTL_SV_DD).PadLeft(2, '0');
            clmdtl_sv_yy = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_SV_YY);
            clmdtl_sv_mm = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_SV_MM);
            clmdtl_sv_dd = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_SV_DD);
            clmdtl_consec_dates_grp = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_CONSEC_DATES_R);

            clmdtl_sv_nbr[1] = Util.NumInt(Util.Str(clmdtl_consec_dates_grp).PadRight(9).Substring(0, 1));
            clmdtl_sv_day[1] = Util.Str(clmdtl_consec_dates_grp).PadRight(9).Substring(1, 2);
            clmdtl_sv_nbr[2] = Util.NumInt(Util.Str(clmdtl_consec_dates_grp).PadRight(9).Substring(3, 1));
            clmdtl_sv_day[2] = Util.Str(clmdtl_consec_dates_grp).PadRight(9).Substring(4, 2);
            clmdtl_sv_nbr[3] = Util.NumInt(Util.Str(clmdtl_consec_dates_grp).PadRight(9).Substring(6, 1));
            clmdtl_sv_day[3] = Util.Str(clmdtl_consec_dates_grp).PadRight(9).Substring(7, 2);

            clmdtl_amt_tech_billed = Util.NumDec(objClaims_mstr_dtl_rec.CLMDTL_AMT_TECH_BILLED);
            clmdtl_fee_oma = Util.NumDec(objClaims_mstr_dtl_rec.CLMDTL_FEE_OMA);
            clmdtl_fee_ohip = Util.NumDec(objClaims_mstr_dtl_rec.CLMDTL_FEE_OHIP);
            clmdtl_date_period_end = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_DATE_PERIOD_END);
            clmdtl_cycle_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_CYCLE_NBR);
            clmdtl_diag_cd = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_DIAG_CD);
            clmdtl_line_no = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_LINE_NO);
            clmdtl_resubmit_flag = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_RESUBMIT_FLAG);
            clmdtl_reserve_for_future = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_RESERVE_FOR_FUTURE);
            clmdtl_desc = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_DESC);
            clmdtl_filler = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_FILLER9);
            //clmdtl_orig_batch_id
            clmdtl_orig_batch_nbr = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_ORIG_BATCH_NBR);
            clmdtl_orig_batch_nbr_1_2 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMDTL_ORIG_BATCH_NBR).PadRight(8).Substring(0, 2));
            clmdtl_orig_batch_nbr_4_9 = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_ORIG_BATCH_NBR).PadRight(8).Substring(2, 6);
            clmdtl_orig_claim_nbr_in_batch = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_ORIG_CLAIM_NBR_IN_BATCH);
            clmdtl_b_key_type = Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_TYPE);
            clmdtl_b_batch_num = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR);
            clmdtl_b_clinic_nbr_1_2 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR).PadRight(8).Substring(0, 2));
            clmdtl_b_doc_nbr = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR).PadRight(8).Substring(2, 3);
            clmdtl_b_doc_nbr_2_4 = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR).PadRight(8).Substring(2, 3);
            clmdtl_b_week = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR).PadRight(8).Substring(5, 2));
            clmdtl_b_day = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR).PadRight(8).Substring(7, 1));
            clmdtl_b_claim_nbr = Util.NumInt(objClaims_mstr_dtl_rec.CLMDTL_CLAIM_NBR);
            clmdtl_b_oma_cd = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_OMA_CD);
            clmdtl_b_oma_suff = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_OMA_SUFF);
            clmdtl_b_adj_nbr = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_ADJ_NBR);
            clmdtl_b_pat_id = Util.Str(objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR) + Util.Str(objClaims_mstr_dtl_rec.CLMDTL_CLAIM_NBR) + Util.Str(objClaims_mstr_dtl_rec.CLMDTL_OMA_CD) + Util.Str(objClaims_mstr_dtl_rec.CLMDTL_OMA_SUFF) + Util.Str(objClaims_mstr_dtl_rec.CLMDTL_ADJ_NBR);

            clmdtl_p_key_type = Util.Str(objClaims_mstr_dtl_rec.KEY_P_CLM_TYPE);
            clmdtl_p_data = Util.Str(objClaims_mstr_dtl_rec.KEY_P_CLM_DATA);
            clmdtl_p_batch_nbr = Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR);
            clmdtl_p_clinic_nbr_1_2 = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(0, 2));
            clmdtl_p_doc_nbr = Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(2, 3);
            clmdtl_p_week = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(5, 2));
            clmdtl_p_day = Util.NumInt(Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(7, 1));
            clmdtl_p_claim_nbr = Util.NumInt(objClaims_mstr_dtl_rec.KEY_CLM_CLAIM_NBR);
            //clmdtl_p_oma_cd =    //todo...??
            //clmdtl_p_oma_suff =  //todo...??
            clmdtl_p_adj_nbr = Util.Str(objClaims_mstr_dtl_rec.KEY_CLM_ADJ_NBR);
        }

        private async Task msgSubMstr_record_to_screenVariables()
        {
            // Util.Trakker(++ctr, "MsgSubMstr_Record_To_ScreenVariables");

            //objMsg_sub_mstr_rec
            msg_sub_key = Util.Str(objMsg_sub_mstr_rec.MSG_SUB_KEY_1) + Util.Str(objMsg_sub_mstr_rec.MSG_SUB_KEY_23);
            msg_sub_key_1 = Util.Str(objMsg_sub_mstr_rec.MSG_SUB_KEY_1);
            msg_sub_key_23 = Util.Str(objMsg_sub_mstr_rec.MSG_SUB_KEY_23);
            msg_sub_key_2 = Util.Str(objMsg_sub_mstr_rec.MSG_SUB_KEY_23).PadRight(2).Substring(0, 1);
            msg_sub_key_3 = Util.Str(objMsg_sub_mstr_rec.MSG_SUB_KEY_23).PadRight(2).Substring(1, 1);
            msg_reprint_flag = Util.Str(objMsg_sub_mstr_rec.MSG_REPRINT_FLAG);
            msg_auto_logout = Util.Str(objMsg_sub_mstr_rec.MSG_AUTO_LOGOUT);
            msg_dtl1 = Util.Str(objMsg_sub_mstr_rec.MSG_DTL1);
            msg_dtl2 = Util.Str(objMsg_sub_mstr_rec.MSG_DTL2);
            msg_dtl3 = Util.Str(objMsg_sub_mstr_rec.MSG_DTL3);
            msg_dtl4 = Util.Str(objMsg_sub_mstr_rec.MSG_DTL4);
            msg_rec = msg_reprint_flag + msg_auto_logout + msg_dtl1 + msg_dtl2 + msg_dtl3 + msg_dtl4;
            sub_rec = msg_rec.PadRight(27).Substring(0, 25);
            sub_fee_complex = msg_rec.PadRight(27).Substring(25, 1);
            sub_auto_logout = msg_rec.PadRight(27).Substring(26, 1);

        }

        private async Task patMstr_record_to_wsPatmstrRec_screenVariables()
        {
            // Util.Trakker(++ctr, "PatMstr_Record_To_WsPatmstrRec_ScreenVariables");

            // F010_PAT_MSTR
            // move to ws-pat-mstr-rec

            ws_pat_acronym_grp = Util.Str(objPat_mstr_rec.PAT_ACRONYM_FIRST6) + Util.Str(objPat_mstr_rec.PAT_ACRONYM_LAST3);
            ws_pat_acronym_first6 = Util.Str(objPat_mstr_rec.PAT_ACRONYM_FIRST6);
            ws_pat_acronym_last3 = Util.Str(objPat_mstr_rec.PAT_ACRONYM_LAST3);

            ws_pat_ohip_out_prov_grp = Util.Str(objPat_mstr_rec.PAT_DIRECT_ALPHA).PadRight(3, '0') + Util.Str(objPat_mstr_rec.PAT_DIRECT_YY).PadLeft(2, '0') + Util.Str(objPat_mstr_rec.PAT_DIRECT_MM).PadLeft(2, '0') + Util.Str(objPat_mstr_rec.PAT_DIRECT_DD).PadLeft(2, '0') + Util.Str(objPat_mstr_rec.PAT_DIRECT_LAST_6).PadRight(6, ' ');
            ws_pat_ohip_mmyy = ws_pat_ohip_out_prov_grp;
            ws_pat_ohip_nbr = Util.NumInt(ws_pat_ohip_out_prov_grp.Substring(0, 8));
            ws_pat_ohip_nbr_r_alpha = ws_pat_ohip_out_prov_grp.Substring(0, 8);
            ws_pat_ohip_nbr_MB_def_grp = ws_pat_ohip_out_prov_grp.Substring(0, 8);
            ws_pat_ohip_nbr_MB = Util.NumInt(ws_pat_ohip_out_prov_grp.Substring(0, 6));
            ws_pat_ohip_nbr_NT_1_char = ws_pat_ohip_out_prov_grp.Substring(0, 1);
            ws_pat_ohip_nbr_NT = Util.NumInt(ws_pat_ohip_out_prov_grp.Substring(1, 7));
            ws_pat_mm = Util.NumInt(ws_pat_ohip_out_prov_grp.Substring(8, 2));
            ws_pat_yy = Util.NumInt(ws_pat_ohip_out_prov_grp.Substring(10, 2));
            ws_pat_direct_alpha_grp = Util.Str(objPat_mstr_rec.PAT_DIRECT_ALPHA).PadRight(3);
            ws_pat_alpha1 = Util.Str(objPat_mstr_rec.PAT_DIRECT_ALPHA).PadRight(3).Substring(0, 1);
            ws_pat_alpha2_3 = Util.Str(objPat_mstr_rec.PAT_DIRECT_ALPHA).PadRight(3).Substring(1, 2);
            ws_pat_direct_yy = Util.Str(objPat_mstr_rec.PAT_DIRECT_YY);
            ws_pat_direct_mm = Util.Str(objPat_mstr_rec.PAT_DIRECT_MM);
            ws_pat_direct_dd = Util.Str(objPat_mstr_rec.PAT_DIRECT_DD);
            //ws_pat_direct_filler = objPat_mstr_rec.pat_
            ws_pat_chart_nbr_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR);
            pat_chart_1st_char = Util.Str(objPat_mstr_rec.PAT_CHART_NBR).PadRight(10).Substring(0, 1);
            pat_chart_remainder = Util.Str(objPat_mstr_rec.PAT_CHART_NBR).PadRight(10).Substring(1, 9);
            ws_pat_chart_nbr_2_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_2);
            pat_chart_1st_char_2 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_2).PadRight(10).Substring(0, 1);
            pat_chart_remainder_2 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_2).PadRight(10).Substring(1, 9);
            ws_pat_chart_nbr_3_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_3);
            pat_chart_1st_char_3 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_3).PadRight(10).Substring(0, 1);
            pat_chart_remainder_3 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_3).PadRight(10).Substring(1, 9);
            ws_pat_chart_nbr_4_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_4);
            pat_chart_1st_char_4 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_4).PadRight(10).Substring(0, 1);
            pat_chart_remainder_4 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_4).PadRight(10).Substring(1, 9);
            ws_pat_chart_nbr_5_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_5);
            pat_chart_1st_char_5 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_5).PadRight(10).Substring(0, 1);
            pat_chart_remainder_5 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_5).PadRight(10).Substring(1, 9);
            ws_pat_surname = Util.Str(objPat_mstr_rec.PAT_SURNAME_FIRST3) + Util.Str(objPat_mstr_rec.PAT_SURNAME_LAST22);
            ws_pat_surname_r_grp = Util.Str(objPat_mstr_rec.PAT_SURNAME_FIRST3) + Util.Str(objPat_mstr_rec.PAT_SURNAME_LAST22);
            ws_pat_surname_first6 = ws_pat_surname_r_grp.PadRight(25).Substring(0, 6);
            ws_pat_surname_last19 = ws_pat_surname_r_grp.PadRight(25).Substring(6, 19);
            ws_pat_surname_rr_grp = ws_pat_surname;
            ws_pat_surname_first3 = ws_pat_surname.PadRight(25).Substring(0, 3);
            ws_pat_surname_last22 = ws_pat_surname.PadRight(25).Substring(3, 22);
            ws_pat_given_name = Util.Str(objPat_mstr_rec.PAT_GIVEN_NAME_FIRST1).PadRight(1) + Util.Str(objPat_mstr_rec.FILLER3).PadRight(16);
            ws_pat_given_name_r_grp = ws_pat_given_name;
            ws_pat_given_name_first3 = ws_pat_given_name_r_grp.Substring(0, 3);
            ws_pat_given_name_last14 = ws_pat_given_name_r_grp.Substring(3, 14);
            ws_pat_given_name_rr_grp = ws_pat_given_name_r_grp;
            ws_pat_given_name_first1 = ws_pat_given_name_rr_grp.Substring(0, 1);
            //filler 
            ws_pat_init_grp = Util.Str(objPat_mstr_rec.PAT_INIT1) + Util.Str(objPat_mstr_rec.PAT_INIT2) + Util.Str(objPat_mstr_rec.PAT_INIT3);
            ws_pat_location_field_grp = Util.Str(objPat_mstr_rec.PAT_LOCATION_FIELD);
            ws_pat_location_field_1_3 = ws_pat_location_field_grp.PadRight(4).Substring(0, 3);
            ws_pat_last_doc_nbr_seen = Util.Str(objPat_mstr_rec.PAT_LAST_DOC_NBR_SEEN);
            ws_pat_birth_date = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_BIRTH_DATE_YY).PadLeft(4, '0') + Util.Str(objPat_mstr_rec.PAT_BIRTH_DATE_MM).PadLeft(2, '0') + Util.Str(objPat_mstr_rec.PAT_BIRTH_DATE_DD).PadLeft(2, '0'));
            ws_pat_birth_date_r_grp = Util.Str(ws_pat_birth_date);
            ws_pat_birth_date_yy = Util.NumInt(objPat_mstr_rec.PAT_BIRTH_DATE_YY);
            ws_pat_birth_date_yy_r_grp = Util.Str(objPat_mstr_rec.PAT_BIRTH_DATE_YY);
            ws_pat_birth_date_yy_12 = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_BIRTH_DATE_YY).PadRight(4).Substring(0, 2));
            ws_pat_birth_date_yy_34 = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_BIRTH_DATE_YY).PadRight(4).Substring(2, 2));
            ws_pat_birth_date_mm = Util.NumInt(objPat_mstr_rec.PAT_BIRTH_DATE_MM);
            ws_pat_birth_date_dd = Util.NumInt(objPat_mstr_rec.PAT_BIRTH_DATE_DD);
            ws_pat_date_last_maint = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_MAINT);
            ws_pat_date_last_maint_r_grp = Util.Str(objPat_mstr_rec.PAT_DATE_LAST_MAINT);
            ws_pat_date_last_maint_yy = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_MAINT).PadRight(8).Substring(0, 4));
            ws_pat_date_last_maint_mm = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_MAINT).PadRight(8).Substring(4, 2));
            ws_pat_date_last_maint_dd = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_MAINT).PadRight(8).Substring(6, 2));
            ws_pat_date_last_visit = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_VISIT);
            ws_pat_date_last_visit_r_grp = Util.Str(objPat_mstr_rec.PAT_DATE_LAST_VISIT);
            ws_pat_date_last_visit_yy = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_VISIT).PadRight(8).Substring(0, 4));
            ws_pat_date_last_visit_mm = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_VISIT).PadRight(8).Substring(4, 2));
            ws_pat_date_last_visit_dd = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_VISIT).PadRight(8).Substring(6, 2));
            ws_pat_date_last_admit = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_ADMIT);
            ws_pat_date_last_admit_r_grp = Util.Str(objPat_mstr_rec.PAT_DATE_LAST_ADMIT);
            ws_pat_date_last_admit_yy = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_ADMIT).PadRight(8).Substring(0, 4));
            ws_pat_date_last_admit_mm = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_ADMIT).PadRight(8).Substring(4, 2));
            ws_pat_date_last_admit_dd = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_ADMIT).PadRight(8).Substring(6, 2));
            ws_pat_phone_nbr_grp = Util.Str(objPat_mstr_rec.PAT_PHONE_NBR);
            ws_pat_phone_nbr_first3 = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_PHONE_NBR).PadRight(20).Substring(0, 3));
            ws_pat_phone_nbr_last4 = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_PHONE_NBR).PadRight(20).Substring(3, 4));
            ws_pat_phone_nbr_remainder = Util.Str(objPat_mstr_rec.PAT_PHONE_NBR).PadRight(20).Substring(7, 13);
            ws_pat_total_nbr_visits = Util.NumInt(objPat_mstr_rec.PAT_TOTAL_NBR_VISITS);
            ws_pat_total_nbr_claims = Util.NumInt(objPat_mstr_rec.PAT_TOTAL_NBR_CLAIMS);
            ws_pat_sex = Util.Str(objPat_mstr_rec.PAT_SEX);
            ws_pat_in_out = Util.Str(objPat_mstr_rec.PAT_IN_OUT);
            ws_pat_nbr_outstanding_claims = Util.NumInt(objPat_mstr_rec.PAT_NBR_OUTSTANDING_CLAIMS);
            ws_key_pat_mstr_grp = Util.Str(objPat_mstr_rec.PAT_I_KEY).PadRight(1) + Util.Str(objPat_mstr_rec.PAT_CON_NBR).PadLeft(2, '0') + Util.Str(objPat_mstr_rec.PAT_I_NBR).PadLeft(12, '0');
            ws_pat_i_key = Util.Str(objPat_mstr_rec.PAT_I_KEY);
            ws_pat_con_nbr = Util.NumInt(objPat_mstr_rec.PAT_CON_NBR);
            ws_pat_i_nbr = Util.NumInt(objPat_mstr_rec.PAT_I_NBR);
            ws_pat_health_nbr = Util.NumLongInt(objPat_mstr_rec.PAT_HEALTH_NBR);
            ws_pat_version_cd_grp = Util.Str(objPat_mstr_rec.PAT_VERSION_CD);
            ws_pat_version_cd_1 = Util.Str(objPat_mstr_rec.PAT_VERSION_CD).PadRight(2).Substring(0, 1);
            ws_pat_version_cd_2 = Util.Str(objPat_mstr_rec.PAT_VERSION_CD).PadRight(2).Substring(1, 1);
            ws_pat_version_cd = Util.Str(objPat_mstr_rec.PAT_VERSION_CD);
            ws_pat_health_65_ind = Util.Str(objPat_mstr_rec.PAT_HEALTH_65_IND);
            ws_pat_expiry_date_grp = Util.Str(objPat_mstr_rec.PAT_EXPIRY_YY).PadLeft(2, '0') + Util.Str(objPat_mstr_rec.PAT_EXPIRY_MM).PadLeft(2, '0');
            ws_pat_expiry_yy = Util.NumInt(objPat_mstr_rec.PAT_EXPIRY_YY);
            ws_pat_expiry_mm = Util.NumInt(objPat_mstr_rec.PAT_EXPIRY_MM);
            ws_pat_prov_cd = Util.Str(objPat_mstr_rec.PAT_PROV_CD);
            ws_subscr_addr1 = Util.Str(objPat_mstr_rec.SUBSCR_ADDR1);
            ws_subscr_addr2 = Util.Str(objPat_mstr_rec.SUBSCR_ADDR2);
            ws_subscr_addr3 = Util.Str(objPat_mstr_rec.SUBSCR_ADDR3);
            ws_subscr_prov_cd = Util.Str(objPat_mstr_rec.SUBSCR_PROV_CD);
            ws_subscr_postal_cd = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD1) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD2) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD3) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD4) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD5) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD6) + Util.Str(objPat_mstr_rec.FILLER);
            ws_subscr_postal_cd_r_grp = ws_subscr_postal_cd;
            ws_subscr_post_code1_grp = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD1) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD2) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD3);
            ws_subscr_post_cd1 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD1);
            ws_subscr_post_cd2 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD2);
            ws_subscr_post_cd3 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD3);
            ws_subscr_post_code2_grp = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD4) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD5) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD6);
            ws_subscr_post_cd4 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD4);
            ws_subscr_post_cd5 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD5);
            ws_subscr_post_cd6 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD6);
            //ws_subscr_msg_data_grp
            ws_subscr_msg_nbr = Util.Str(objPat_mstr_rec.SUBSCR_MSG_NBR);
            ws_subscr_dt_msg_no_eff_to = Util.NumInt(Util.Str(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_YY) + Util.Str(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_MM) + Util.Str(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_DD));
            ws_subscr_dt_msg_no_eff_to_r_grp = Util.Str(ws_subscr_dt_msg_no_eff_to);
            ws_subscr_dt_msg_no_eff_to_yy = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_YY);
            ws_subscr_dt_msg_no_eff_to_mm = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_MM);
            ws_subscr_dt_msg_no_eff_to_dd = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_DD);
            ws_subscr_dt_msg_no_eff_to_r1 = ws_subscr_dt_msg_no_eff_to_r_grp;
            ws_subscr_date_last_statement = Util.NumInt(Util.Str(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_YY) + Util.Str(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_MM) + Util.Str(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_DD));
            ws_subscr_date_last_stmnt_r_grp = Util.Str(ws_subscr_date_last_statement);
            ws_subscr_date_last_stmnt_yy = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_YY);
            ws_subscr_date_last_stmnt_mm = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_MM);
            ws_subscr_date_last_stmnt_dd = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_DD);
            ws_subscr_auto_update = Util.Str(objPat_mstr_rec.SUBSCR_AUTO_UPDATE);
            ws_pat_last_mod_by = Util.Str(objPat_mstr_rec.PAT_LAST_MOD_BY);
            ws_pat_date_last_elig_mailing = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_ELIG_MAILING);
            ws_pat_date_last_elig_maint = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_ELIG_MAINT);
            ws_pat_last_birth_date = Util.NumInt(objPat_mstr_rec.PAT_LAST_BIRTH_DATE);
            ws_pat_last_birth_date_r_grp = Util.Str(ws_pat_last_birth_date);
            ws_pat_last_birth_date_yy = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_LAST_BIRTH_DATE).PadRight(8).Substring(0, 4));
            ws_pat_last_birth_date_mm = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_LAST_BIRTH_DATE).PadRight(8).Substring(4, 2));
            ws_pat_last_birth_date_dd = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_LAST_BIRTH_DATE).PadRight(8).Substring(6, 2));
            ws_pat_last_version_cd = Util.Str(objPat_mstr_rec.PAT_LAST_VERSION_CD);
            ws_pat_mess_code = Util.Str(objPat_mstr_rec.PAT_MESS_CODE);
            ws_pat_country = Util.Str(objPat_mstr_rec.PAT_COUNTRY);
            ws_pat_no_of_letter_sent = Util.NumInt(objPat_mstr_rec.PAT_NO_OF_LETTER_SENT);
            ws_pat_dialysis = Util.Str(objPat_mstr_rec.PAT_DIALYSIS);
            ws_pat_ohip_validiation_status = Util.Str(objPat_mstr_rec.PAT_OHIP_VALIDATION_STATUS);
            ws_pat_obec_status = Util.Str(objPat_mstr_rec.PAT_OBEC_STATUS);
        }

        private async Task move_patMstrRec_to_wsPatMstrRec()
        {
            // Util.Trakker(++ctr, "Move_PatMstrRec_To_WsPatMstrRec");

            // ws_pat_mstr_rec = pat_mstr_rec;
            await patMstr_record_to_wsPatmstrRec_screenVariables();
        }

        private async Task<bool> patMstr_to_screenVariables()
        {
            // Util.Trakker(++ctr, "PatMstr_To_ScreenVariables");

            pat_acronym_grp = Util.Str(objPat_mstr_rec.PAT_ACRONYM_FIRST6) + Util.Str(objPat_mstr_rec.PAT_ACRONYM_LAST3);
            pat_acronym_first6 = Util.Str(objPat_mstr_rec.PAT_ACRONYM_FIRST6);
            pat_acronym_last3 = Util.Str(objPat_mstr_rec.PAT_ACRONYM_LAST3);

            pat_ohip_out_prov = Util.Str(objPat_mstr_rec.PAT_DIRECT_ALPHA).PadRight(3) + Util.Str(objPat_mstr_rec.PAT_DIRECT_YY).PadRight(2) + Util.Str(objPat_mstr_rec.PAT_DIRECT_MM).PadRight(2) + Util.Str(objPat_mstr_rec.PAT_DIRECT_DD).PadRight(2) + new string(' ', 6);
            pat_ohip_nbr = Util.NumInt(Util.Str(pat_ohip_out_prov).PadRight(12).Substring(0, 8));
            pat_mm = Util.NumInt(Util.Str(pat_ohip_out_prov).PadRight(12).Substring(8, 2));
            pat_yy = Util.NumInt(Util.Str(pat_ohip_out_prov).PadRight(12).Substring(10, 2));

            pat_direct_alpha_grp = Util.Str(objPat_mstr_rec.PAT_DIRECT_ALPHA).PadRight(3);
            pat_alpha1 = Util.Str(objPat_mstr_rec.PAT_DIRECT_ALPHA).PadRight(3).Substring(0, 1);
            pat_alpha2_3 = Util.Str(objPat_mstr_rec.PAT_DIRECT_ALPHA).PadRight(3).Substring(1, 2);

            /*pat_ohip_nbr_r_alpha = ws_pat_ohip_out_prov_grp.Substring(0, 8);
            pat_ohip_nbr_MB_def_grp = ws_pat_ohip_out_prov_grp.Substring(0, 8);
            pat_ohip_nbr_MB = Util.NumInt(ws_pat_ohip_out_prov_grp.Substring(0, 6));
            pat_ohip_nbr_NT_1_char = ws_pat_ohip_out_prov_grp.Substring(0, 1);
            pat_ohip_nbr_NT = Util.NumInt(ws_pat_ohip_out_prov_grp.Substring(1, 7)); */

            pat_direct_yy = Util.Str(objPat_mstr_rec.PAT_DIRECT_YY);
            pat_direct_mm = Util.Str(objPat_mstr_rec.PAT_DIRECT_MM);
            pat_direct_dd = Util.Str(objPat_mstr_rec.PAT_DIRECT_DD);
            //ws_pat_direct_filler = objPat_mstr_rec.pat_

            pat_chart_nbr_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR);
            pat_chart_1st_char = Util.Str(objPat_mstr_rec.PAT_CHART_NBR).PadRight(10).Substring(0, 1);
            pat_chart_remainder = Util.Str(objPat_mstr_rec.PAT_CHART_NBR).PadRight(10).Substring(1, 9);
            pat_chart_nbr_2_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_2);
            pat_chart_1st_char_2 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_2).PadRight(10).Substring(0, 1);
            pat_chart_remainder_2 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_2).PadRight(10).Substring(1, 9);
            pat_chart_nbr_3_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_3);
            pat_chart_1st_char_3 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_3).PadRight(10).Substring(0, 1);
            pat_chart_remainder_3 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_3).PadRight(10).Substring(1, 9);
            pat_chart_nbr_4_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_4);
            pat_chart_1st_char_4 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_4).PadRight(10).Substring(0, 1);
            pat_chart_remainder_4 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_4).PadRight(10).Substring(1, 9);
            pat_chart_nbr_5_grp = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_5);
            pat_chart_1st_char_5 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_5).PadRight(10).Substring(0, 1);
            pat_chart_remainder_5 = Util.Str(objPat_mstr_rec.PAT_CHART_NBR_5).PadRight(10).Substring(1, 9);
            pat_surname = Util.Str(objPat_mstr_rec.PAT_SURNAME_FIRST3) + Util.Str(objPat_mstr_rec.PAT_SURNAME_LAST22);
            pat_surname_r_grp = Util.Str(objPat_mstr_rec.PAT_SURNAME_FIRST3) + Util.Str(objPat_mstr_rec.PAT_SURNAME_LAST22);
            pat_surname_first6 = pat_surname_r_grp.PadRight(25).Substring(0, 6);
            pat_surname_last19 = pat_surname_r_grp.PadRight(25).Substring(6, 19);
            pat_surname_rr_grp = pat_surname;
            pat_surname_first3 = pat_surname.PadRight(25).Substring(0, 3);
            pat_surname_last22 = pat_surname.PadRight(25).Substring(3, 22);
            pat_given_name = Util.Str(objPat_mstr_rec.PAT_GIVEN_NAME_FIRST1).PadRight(1) + Util.Str(objPat_mstr_rec.FILLER3).PadRight(16);
            pat_given_name_r_grp = pat_given_name;
            pat_given_name_first3 = pat_given_name_r_grp.Substring(0, 3);
            pat_given_name_last14 = pat_given_name_r_grp.Substring(3, 14);
            pat_given_name_rr_grp = pat_given_name_r_grp;
            pat_given_name_first1 = pat_given_name_rr_grp.Substring(0, 1);
            //filler 
            pat_init_grp = Util.Str(objPat_mstr_rec.PAT_INIT1) + Util.Str(objPat_mstr_rec.PAT_INIT2) + Util.Str(objPat_mstr_rec.PAT_INIT3);
            pat_location_field_grp = Util.Str(objPat_mstr_rec.PAT_LOCATION_FIELD);
            pat_location_field_1_3 = pat_location_field_grp.PadRight(4).Substring(0, 3);
            pat_last_doc_nbr_seen = Util.Str(objPat_mstr_rec.PAT_LAST_DOC_NBR_SEEN);
            pat_birth_date = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_BIRTH_DATE_YY).PadLeft(4, '0') + Util.Str(objPat_mstr_rec.PAT_BIRTH_DATE_MM).PadLeft(2, '0') + Util.Str(objPat_mstr_rec.PAT_BIRTH_DATE_DD).PadLeft(2, '0'));
            pat_birth_date_r_grp = Util.Str(pat_birth_date);
            pat_birth_date_yy = Util.NumInt(objPat_mstr_rec.PAT_BIRTH_DATE_YY);
            pat_birth_date_mm = Util.NumInt(objPat_mstr_rec.PAT_BIRTH_DATE_MM);
            pat_birth_date_dd = Util.NumInt(objPat_mstr_rec.PAT_BIRTH_DATE_DD);
            pat_date_last_maint = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_MAINT);
            pat_date_last_maint_r_grp = Util.Str(objPat_mstr_rec.PAT_DATE_LAST_MAINT);
            pat_date_last_maint_yy = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_MAINT).PadRight(8).Substring(0, 4));
            pat_date_last_maint_mm = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_MAINT).PadRight(8).Substring(4, 2));
            pat_date_last_maint_dd = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_MAINT).PadRight(8).Substring(6, 2));
            pat_date_last_visit = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_VISIT);
            pat_date_last_visit_r_grp = Util.Str(objPat_mstr_rec.PAT_DATE_LAST_VISIT);
            pat_date_last_visit_yy = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_VISIT).PadRight(8).Substring(0, 4));
            pat_date_last_visit_mm = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_VISIT).PadRight(8).Substring(4, 2));
            pat_date_last_visit_dd = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_VISIT).PadRight(8).Substring(6, 2));
            pat_date_last_admit = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_ADMIT);
            pat_date_last_admit_r_grp = Util.Str(objPat_mstr_rec.PAT_DATE_LAST_ADMIT);
            pat_date_last_admit_yy = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_ADMIT).PadRight(8).Substring(0, 4));
            pat_date_last_admit_mm = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_ADMIT).PadRight(8).Substring(4, 2));
            pat_date_last_admit_dd = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_DATE_LAST_ADMIT).PadRight(8).Substring(6, 2));
            pat_phone_nbr_grp = Util.Str(objPat_mstr_rec.PAT_PHONE_NBR);
            pat_phone_nbr_first3 = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_PHONE_NBR).PadRight(20).Substring(0, 3));
            pat_phone_nbr_last4 = Util.NumInt(Util.Str(objPat_mstr_rec.PAT_PHONE_NBR).PadRight(20).Substring(3, 4));
            pat_phone_nbr_remainder = Util.Str(objPat_mstr_rec.PAT_PHONE_NBR).PadRight(20).Substring(7, 13);
            pat_total_nbr_visits = Util.NumInt(objPat_mstr_rec.PAT_TOTAL_NBR_VISITS);
            pat_total_nbr_claims = Util.NumInt(objPat_mstr_rec.PAT_TOTAL_NBR_CLAIMS);
            pat_sex = Util.Str(objPat_mstr_rec.PAT_SEX);
            pat_in_out = Util.Str(objPat_mstr_rec.PAT_IN_OUT);
            pat_nbr_outstanding_claims = Util.NumInt(objPat_mstr_rec.PAT_NBR_OUTSTANDING_CLAIMS);
            key_pat_mstr_grp = Util.Str(objPat_mstr_rec.PAT_I_KEY) + Util.Str(objPat_mstr_rec.PAT_CON_NBR) + Util.Str(objPat_mstr_rec.PAT_I_NBR);
            pat_i_key = Util.Str(objPat_mstr_rec.PAT_I_KEY);
            pat_con_nbr = Util.NumInt(objPat_mstr_rec.PAT_CON_NBR);
            pat_i_nbr = Util.NumInt(objPat_mstr_rec.PAT_I_NBR);
            pat_health_nbr = Util.NumLongInt(objPat_mstr_rec.PAT_HEALTH_NBR);
            pat_version_cd_grp = Util.Str(objPat_mstr_rec.PAT_VERSION_CD);
            pat_version_cd_1 = Util.Str(objPat_mstr_rec.PAT_VERSION_CD).PadRight(2).Substring(0, 1);
            pat_version_cd_2 = Util.Str(objPat_mstr_rec.PAT_VERSION_CD).PadRight(2).Substring(1, 1);
            pat_health_65_ind = Util.Str(objPat_mstr_rec.PAT_HEALTH_65_IND);
            pat_expiry_date_grp = Util.Str(objPat_mstr_rec.PAT_EXPIRY_YY).PadLeft(2, '0') + Util.Str(objPat_mstr_rec.PAT_EXPIRY_MM).PadLeft(2, '0');
            pat_expiry_yy = Util.NumInt(objPat_mstr_rec.PAT_EXPIRY_YY);
            pat_expiry_mm = Util.NumInt(objPat_mstr_rec.PAT_EXPIRY_MM);
            pat_prov_cd = Util.Str(objPat_mstr_rec.PAT_PROV_CD);
            subscr_addr1 = Util.Str(objPat_mstr_rec.SUBSCR_ADDR1);
            subscr_addr2 = Util.Str(objPat_mstr_rec.SUBSCR_ADDR2);
            subscr_addr3 = Util.Str(objPat_mstr_rec.SUBSCR_ADDR3);
            subscr_prov_cd = Util.Str(objPat_mstr_rec.SUBSCR_PROV_CD);
            subscr_postal_cd = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD1) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD2) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD3) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD4) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD5) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD6) + Util.Str(objPat_mstr_rec.FILLER);
            subscr_postal_cd_r_grp = subscr_postal_cd;
            subscr_post_code1_grp = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD1) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD2) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD3);
            subscr_post_cd1 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD1);
            subscr_post_cd2 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD2);
            subscr_post_cd3 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD3);
            subscr_post_code2_grp = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD4) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD5) + Util.Str(objPat_mstr_rec.SUBSCR_POST_CD6);
            subscr_post_cd4 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD4);
            subscr_post_cd5 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD5);
            subscr_post_cd6 = Util.Str(objPat_mstr_rec.SUBSCR_POST_CD6);

            subscr_msg_nbr = Util.Str(objPat_mstr_rec.SUBSCR_MSG_NBR);
            subscr_date_msg_nbr_eff_to = Util.NumInt(Util.Str(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_YY) + Util.Str(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_MM) + Util.Str(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_DD));
            subscr_date_msg_nbr_eff_to_r = Util.Str(subscr_date_msg_nbr_eff_to);
            subscr_date_msg_nbr_eff_to_yy = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_YY);
            subscr_date_msg_nbr_eff_to_mm = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_MM);
            subscr_date_msg_nbr_eff_to_dd = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_DD);
            subscr_date_msg_nbr_eff_to_r1 = subscr_date_msg_nbr_eff_to_r;  //subscr_dt_msg_no_eff_to_r_grp;
            subscr_date_last_statement = Util.NumInt(Util.Str(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_YY) + Util.Str(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_MM) + Util.Str(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_DD));
            subscr_date_last_statement_r_grp = Util.Str(subscr_date_last_statement);
            subscr_date_last_statement_yy = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_YY);
            subscr_date_last_statement_mm = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_MM);
            subscr_date_last_statement_dd = Util.NumInt(objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_DD);
            subscr_auto_update = Util.Str(objPat_mstr_rec.SUBSCR_AUTO_UPDATE);
            pat_last_mod_by = Util.Str(objPat_mstr_rec.PAT_LAST_MOD_BY);
            pat_date_last_elig_mailing = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_ELIG_MAILING);
            pat_date_last_elig_maint = Util.NumInt(objPat_mstr_rec.PAT_DATE_LAST_ELIG_MAINT);
            pat_last_birth_date = Util.NumInt(objPat_mstr_rec.PAT_LAST_BIRTH_DATE);
            pat_last_version_cd = Util.Str(objPat_mstr_rec.PAT_LAST_VERSION_CD);
            pat_mess_code = Util.Str(objPat_mstr_rec.PAT_MESS_CODE);
            pat_country = Util.Str(objPat_mstr_rec.PAT_COUNTRY);
            pat_no_of_letter_sent = Util.NumInt(objPat_mstr_rec.PAT_NO_OF_LETTER_SENT);
            pat_dialysis = Util.Str(objPat_mstr_rec.PAT_DIALYSIS);
            pat_ohip_validiation_status = Util.Str(objPat_mstr_rec.PAT_OHIP_VALIDATION_STATUS);
            pat_obec_status = Util.Str(objPat_mstr_rec.PAT_OBEC_STATUS);

            return true;
        }

        private async Task<bool> rewrite_pat_mstr_rec_from_ws_pat_mstr_rec()
        {
            // Util.Trakker(++ctr, "Rewrite_Pat_Mstr_Rec_from_ws_pat_mstr_rec");

            //     rewrite pat-mstr-rec    from ws-pat-mstr-rec;

            try
            {

                objPat_mstr_rec.PAT_ACRONYM_FIRST6 = Util.Str(ws_pat_acronym_first6);
                objPat_mstr_rec.PAT_ACRONYM_LAST3 = Util.Str(ws_pat_acronym_last3);
                //objPat_mstr_rec.PAT_DIRECT_ALPHA = Util.Str(ws_pat_alpha1);
                objPat_mstr_rec.PAT_DIRECT_ALPHA = Util.Str(ws_pat_alpha1) + Util.Str(ws_pat_alpha2_3);
                objPat_mstr_rec.PAT_DIRECT_YY = Util.NumDec(ws_pat_direct_yy);
                objPat_mstr_rec.PAT_DIRECT_MM = Util.NumDec(ws_pat_direct_mm);
                objPat_mstr_rec.PAT_DIRECT_DD = Util.NumDec(ws_pat_direct_dd);

                ws_pat_chart_nbr_grp = Util.Str(pat_chart_1st_char).PadRight(1) + Util.Str(pat_chart_remainder).PadRight(9);
                objPat_mstr_rec.PAT_CHART_NBR = Util.Str(ws_pat_chart_nbr_grp);

                ws_pat_chart_nbr_2_grp = Util.Str(pat_chart_1st_char_2).PadRight(1) + Util.Str(pat_chart_remainder_2).PadRight(9);
                objPat_mstr_rec.PAT_CHART_NBR_2 = Util.Str(ws_pat_chart_nbr_2_grp);

                ws_pat_chart_nbr_3_grp = Util.Str(pat_chart_1st_char_3).PadRight(1) + Util.Str(pat_chart_remainder_3).PadRight(9);
                objPat_mstr_rec.PAT_CHART_NBR_3 = Util.Str(ws_pat_chart_nbr_3_grp);

                ws_pat_chart_nbr_4_grp = Util.Str(pat_chart_1st_char_4).PadRight(1) + Util.Str(pat_chart_remainder_4).PadRight(9);
                objPat_mstr_rec.PAT_CHART_NBR_4 = Util.Str(ws_pat_chart_nbr_4_grp);

                ws_pat_chart_nbr_5_grp = Util.Str(pat_chart_1st_char_5).PadRight(1) + Util.Str(pat_chart_remainder_5).PadRight(9);
                objPat_mstr_rec.PAT_CHART_NBR_5 = Util.Str(ws_pat_chart_nbr_5_grp);


                objPat_mstr_rec.PAT_LOCATION_FIELD = Util.Str(ws_pat_location_field_grp);
                objPat_mstr_rec.PAT_LAST_DOC_NBR_SEEN = Util.Str(ws_pat_last_doc_nbr_seen);
                objPat_mstr_rec.PAT_BIRTH_DATE_YY = Util.NumDec(ws_pat_birth_date_yy);
                objPat_mstr_rec.PAT_BIRTH_DATE_MM = Util.NumDec(ws_pat_birth_date_mm);
                objPat_mstr_rec.PAT_BIRTH_DATE_DD = Util.NumDec(ws_pat_birth_date_dd);
                objPat_mstr_rec.PAT_DATE_LAST_MAINT = Util.NumInt(ws_pat_date_last_maint);
                //objPat_mstr_rec.PAT_DATE_LAST_MAINT = Util.NumDec(ws_pat_date_last_maint_r_grp);
                objPat_mstr_rec.PAT_DATE_LAST_VISIT = Util.NumInt(ws_pat_date_last_visit);
                //objPat_mstr_rec.PAT_DATE_LAST_VISIT = Util.NumDec(ws_pat_date_last_visit_r_grp);
                objPat_mstr_rec.PAT_DATE_LAST_ADMIT = Util.NumInt(ws_pat_date_last_admit);
                //objPat_mstr_rec.PAT_DATE_LAST_ADMIT = Util.NumDec(ws_pat_date_last_admit_r_grp);
                objPat_mstr_rec.PAT_PHONE_NBR = Util.Str(ws_pat_phone_nbr_grp);
                objPat_mstr_rec.PAT_TOTAL_NBR_VISITS = Util.NumInt(ws_pat_total_nbr_visits);
                objPat_mstr_rec.PAT_TOTAL_NBR_CLAIMS = Util.NumInt(ws_pat_total_nbr_claims);
                objPat_mstr_rec.PAT_SEX = Util.Str(ws_pat_sex);
                objPat_mstr_rec.PAT_IN_OUT = Util.Str(ws_pat_in_out);
                objPat_mstr_rec.PAT_NBR_OUTSTANDING_CLAIMS = Util.NumInt(ws_pat_nbr_outstanding_claims);

                objPat_mstr_rec.PAT_I_KEY = Util.Str(ws_pat_i_key);
                objPat_mstr_rec.PAT_CON_NBR = Util.NumInt(ws_pat_con_nbr);
                objPat_mstr_rec.PAT_I_NBR = Util.NumInt(ws_pat_i_nbr);
                objPat_mstr_rec.FILLER4 = string.Empty;

                objPat_mstr_rec.PAT_HEALTH_NBR = Util.NumLongInt(ws_pat_health_nbr);
                objPat_mstr_rec.PAT_VERSION_CD = Util.Str(ws_pat_version_cd_grp);
                objPat_mstr_rec.PAT_HEALTH_65_IND = Util.Str(ws_pat_health_65_ind);
                objPat_mstr_rec.PAT_EXPIRY_YY = Util.NumInt(ws_pat_expiry_yy);
                objPat_mstr_rec.PAT_EXPIRY_MM = Util.NumDec(ws_pat_expiry_mm);
                objPat_mstr_rec.PAT_PROV_CD = Util.Str(ws_pat_prov_cd);
                objPat_mstr_rec.SUBSCR_ADDR1 = Util.Str(ws_subscr_addr1);
                objPat_mstr_rec.SUBSCR_ADDR2 = Util.Str(ws_subscr_addr2);
                objPat_mstr_rec.SUBSCR_ADDR3 = Util.Str(ws_subscr_addr3);
                objPat_mstr_rec.SUBSCR_PROV_CD = Util.Str(ws_subscr_prov_cd);
                objPat_mstr_rec.SUBSCR_POST_CD1 = Util.Str(this.ws_subscr_post_cd1);
                objPat_mstr_rec.SUBSCR_POST_CD2 = Util.Str(ws_subscr_post_cd2);
                objPat_mstr_rec.SUBSCR_POST_CD3 = Util.Str(ws_subscr_post_cd3);
                objPat_mstr_rec.SUBSCR_POST_CD4 = Util.Str(ws_subscr_post_cd4);
                objPat_mstr_rec.SUBSCR_POST_CD5 = Util.Str(ws_subscr_post_cd5);
                objPat_mstr_rec.SUBSCR_POST_CD6 = Util.Str(ws_subscr_post_cd6);
                objPat_mstr_rec.SUBSCR_MSG_NBR = Util.Str(ws_subscr_msg_nbr);
                ws_subscr_dt_msg_no_eff_to = Util.NumInt(ws_subscr_dt_msg_no_eff_to_r_grp);
                objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_YY = Util.NumInt(ws_subscr_dt_msg_no_eff_to_yy);
                objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_MM = Util.NumInt(ws_subscr_dt_msg_no_eff_to_mm);
                objPat_mstr_rec.SUBSCR_DATE_MSG_NBR_EFFECT_TO_DD = Util.NumInt(ws_subscr_dt_msg_no_eff_to_dd);
                objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_YY = Util.NumInt(ws_subscr_date_last_stmnt_yy);
                objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_MM = Util.NumInt(ws_subscr_date_last_stmnt_mm);
                objPat_mstr_rec.SUBSCR_DATE_LAST_STATEMENT_DD = Util.NumInt(ws_subscr_date_last_stmnt_dd);
                objPat_mstr_rec.SUBSCR_AUTO_UPDATE = Util.Str(ws_subscr_auto_update);
                objPat_mstr_rec.PAT_LAST_MOD_BY = Util.Str(ws_pat_last_mod_by);
                objPat_mstr_rec.PAT_DATE_LAST_ELIG_MAILING = Util.NumInt(ws_pat_date_last_elig_mailing);
                objPat_mstr_rec.PAT_DATE_LAST_ELIG_MAINT = Util.NumInt(ws_pat_date_last_elig_maint);
                objPat_mstr_rec.PAT_LAST_BIRTH_DATE = Util.NumInt(ws_pat_last_birth_date);
                ws_pat_last_birth_date = Util.NumInt(ws_pat_last_birth_date_r_grp);
                objPat_mstr_rec.PAT_LAST_VERSION_CD = Util.Str(ws_pat_last_version_cd);
                objPat_mstr_rec.PAT_MESS_CODE = Util.Str(ws_pat_mess_code);
                objPat_mstr_rec.PAT_COUNTRY = Util.Str(ws_pat_country);
                objPat_mstr_rec.PAT_NO_OF_LETTER_SENT = Util.NumInt(ws_pat_no_of_letter_sent);
                objPat_mstr_rec.PAT_DIALYSIS = Util.Str(ws_pat_dialysis);
                objPat_mstr_rec.PAT_OHIP_VALIDATION_STATUS = Util.Str(ws_pat_ohip_validiation_status);
                objPat_mstr_rec.PAT_OBEC_STATUS = Util.Str(ws_pat_obec_status);

                objPat_mstr_rec.RecordState = State.Modified;
                objPat_mstr_rec.Submit();
            }
            catch (Exception e)
            {
                return false;
            }

            return true;
        }

        private async Task<bool> rewrite_pat_mstr_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "Rewrite_Pat_Mstr_Rec");

            try
            {
                objPat_mstr_rec.RecordState = State.Modified;
                objPat_mstr_rec.Submit();
            }
            catch (Exception e)
            {
                return false;
            }
            return true;
        }

        private async Task<bool> write_claims_hdr_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "Write_Claims_Hdr_Rec");

            try
            {
                //write claims-mstr - hdr - rec   from claim-header - rec;
                objClaims_mstr_hdr_rec = new F002_CLAIMS_MSTR_HDR();
                objClaims_mstr_hdr_rec.CLMHDR_BATCH_NBR = Util.Str(clmhdr_batch_nbr);
                //objClaims_mstr_hdr_rec.CLMHDR_BATCH_NBR = Util.Str(clmhdr_batch_nbr_r1_grp);
                objClaims_mstr_hdr_rec.CLMHDR_CLAIM_NBR = Util.NumInt(clmhdr_claim_nbr);
                objClaims_mstr_hdr_rec.CLMHDR_ADJ_OMA_CD = Util.Str(clmhdr_adj_oma_cd).PadRight(4, '0');
                objClaims_mstr_hdr_rec.CLMHDR_ADJ_OMA_SUFF = Util.Str(clmhdr_adj_oma_suff).PadRight(1, '0');
                objClaims_mstr_hdr_rec.CLMHDR_ADJ_ADJ_NBR = Util.Str(clmhdr_adj_adj_nbr).PadLeft(1, '0');
                objClaims_mstr_hdr_rec.CLMHDR_BATCH_TYPE = Util.Str(clmhdr_batch_type);
                objClaims_mstr_hdr_rec.CLMHDR_ADJ_CD_SUB_TYPE = Util.Str(clmhdr_adj_cd_sub_type);
                clmhdr_adj_cd_sub_type = Util.Str(clmhdr_adj_cd_sub_type_ss);
                objClaims_mstr_hdr_rec.CLMHDR_DOC_NBR_OHIP = Util.NumInt(clmhdr_doc_nbr_ohip);
                objClaims_mstr_hdr_rec.CLMHDR_DOC_SPEC_CD = Util.NumInt(clmhdr_doc_spec_cd);
                objClaims_mstr_hdr_rec.CLMHDR_REFER_DOC_NBR = Util.NumInt(clmhdr_refer_doc_nbr);
                objClaims_mstr_hdr_rec.CLMHDR_DIAG_CD = Util.NumInt(clmhdr_diag_cd);
                objClaims_mstr_hdr_rec.CLMHDR_LOC = Util.Str(clmhdr_loc);
                objClaims_mstr_hdr_rec.CLMHDR_HOSP = Util.Str(clmhdr_payroll);
                objClaims_mstr_hdr_rec.CLMHDR_AGENT_CD = Util.NumInt(clmhdr_agent_cd);
                objClaims_mstr_hdr_rec.CLMHDR_ADJ_CD = Util.Str(clmhdr_adj_cd);
                objClaims_mstr_hdr_rec.CLMHDR_TAPE_SUBMIT_IND = Util.Str(clmhdr_tape_submit_ind);
                objClaims_mstr_hdr_rec.CLMHDR_I_O_PAT_IND = Util.Str(clmhdr_i_o_pat_ind);
                objClaims_mstr_hdr_rec.CLMHDR_PAT_KEY_TYPE = Util.Str(clmhdr_pat_key_type);
                objClaims_mstr_hdr_rec.CLMHDR_PAT_KEY_DATA = Util.Str(clmhdr_pat_key_data_grp);
                //filler            
                clmhdr_pat_acronym_grp = clmhdr_pat_acronym6;
                objClaims_mstr_hdr_rec.CLMHDR_PAT_ACRONYM6 = Util.Str(clmhdr_pat_acronym6); //Util.Str(clmhdr_pat_acronym_grp).PadRight(9).Substring(0, 6);
                objClaims_mstr_hdr_rec.CLMHDR_PAT_ACRONYM3 = Util.Str(clmhdr_pat_acronym3);  //Util.Str(clmhdr_pat_acronym_grp).PadRight(9).Substring(6, 3);
                objClaims_mstr_hdr_rec.CLMHDR_REFERENCE = Util.Str(clmhdr_reference);
                objClaims_mstr_hdr_rec.CLMHDR_DATE_ADMIT = Util.Str(clmhdr_date_admit_grp);
                objClaims_mstr_hdr_rec.CLMHDR_DOC_DEPT = Util.NumInt(clmhdr_doc_dept);
                objClaims_mstr_hdr_rec.CLMHDR_MSG_NBR = Util.Str(clmhdr_msg_nbr);
                objClaims_mstr_hdr_rec.CLMHDR_REPRINT_FLAG = Util.Str(clmhdr_reprint_flag);
                objClaims_mstr_hdr_rec.CLMHDR_SUB_NBR = Util.Str(clmhdr_sub_nbr);
                objClaims_mstr_hdr_rec.CLMHDR_AUTO_LOGOUT = Util.Str(clmhdr_auto_logout);
                objClaims_mstr_hdr_rec.CLMHDR_FEE_COMPLEX = Util.Str(clmhdr_fee_complex);
                objClaims_mstr_hdr_rec.CLMHDR_CURR_PAYMENT = Util.NumInt(clmhdr_curr_payment);
                objClaims_mstr_hdr_rec.CLMHDR_DATE_PERIOD_END = Util.NumDec(clmhdr_date_period_end_grp);
                objClaims_mstr_hdr_rec.CLMHDR_CYCLE_NBR = Util.NumInt(clmhdr_cycle_nbr);
                objClaims_mstr_hdr_rec.CLMHDR_DATE_SYS = Util.Str(clmhdr_date_sys);
                objClaims_mstr_hdr_rec.CLMHDR_AMT_TECH_BILLED = Util.NumInt(clmhdr_amt_tech_billed);
                objClaims_mstr_hdr_rec.CLMHDR_AMT_TECH_PAID = Util.NumInt(clmhdr_amt_tech_paid);
                objClaims_mstr_hdr_rec.CLMHDR_TOT_CLAIM_AR_OMA = Util.NumInt(clmhdr_tot_claim_ar_oma);
                objClaims_mstr_hdr_rec.CLMHDR_TOT_CLAIM_AR_OHIP = Util.NumInt(clmhdr_tot_claim_ar_ohip);
                objClaims_mstr_hdr_rec.CLMHDR_MANUAL_AND_TAPE_PAYMENTS = Util.NumInt(clmhdr_manual_and_tape_paymnts);
                objClaims_mstr_hdr_rec.CLMHDR_STATUS_OHIP = Util.Str(clmhdr_status_ohip);
                objClaims_mstr_hdr_rec.CLMHDR_MANUAL_REVIEW = Util.Str(clmhdr_manual_review);
                objClaims_mstr_hdr_rec.CLMHDR_SUBMIT_DATE = Util.NumDec(clmhdr_submit_date_grp);
                objClaims_mstr_hdr_rec.CLMHDR_CONFIDENTIAL_FLAG = Util.Str(clmhdr_confidential_flag);
                objClaims_mstr_hdr_rec.CLMHDR_SERV_DATE = Util.NumInt(clmhdr_serv_date);
                objClaims_mstr_hdr_rec.CLMHDR_ELIG_ERROR = Util.Str(clmhdr_elig_error);
                objClaims_mstr_hdr_rec.CLMHDR_ELIG_STATUS = Util.Str(clmhdr_elig_status);
                objClaims_mstr_hdr_rec.CLMHDR_SERV_ERROR = Util.Str(clmhdr_serv_error);
                objClaims_mstr_hdr_rec.CLMHDR_SERV_STATUS = Util.Str(clmhdr_serv_status);
                //objClaims_mstr_hdr_rec.CLMHDR_ORIG_BATCH_NBR = Util.Str(clmhdr_orig_batch_id_grp);
                objClaims_mstr_hdr_rec.CLMHDR_ORIG_BATCH_NBR = Util.Str(clmhdr_orig_batch_nbr_grp);
                // objClaims_mstr_hdr_rec.CLMHDR_ORIG_BATCH_NBR = Util.Str(clmhdr_orig_batch_nbr_next_def_grp);
                // filler            
                objClaims_mstr_hdr_rec.CLMHDR_ORIG_CLAIM_NBR = Util.NumInt(clmhdr_orig_claim_nbr);
                //clmhdr_orig_complete_batch_nbr = todo... not sure which field in migrated field to assign ...????

                objClaims_mstr_hdr_rec.KEY_CLM_TYPE = Util.Str(clmhdr_b_key_type);
                objClaims_mstr_hdr_rec.CLMHDR_BATCH_NBR = Util.Str(clmhdr_b_batch_num);


                objClaims_mstr_hdr_rec.KEY_P_CLM_TYPE = Util.Str(clmhdr_p_key_type);
                objClaims_mstr_hdr_rec.KEY_CLM_BATCH_NBR = Util.Str(clmhdr_batch_nbr);   //Util.Str(clmhdr_p_batch_nbr_grp);
                //clmhdr_p_clinic_nbr_1_2 = Util.NumInt(Util.Str(objClaims_mstr_hdr_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(0, 2));
                //clmhdr_p_doc_nbr = Util.Str(objClaims_mstr_hdr_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(2, 3);
                //clmhdr_p_week = Util.NumInt(Util.Str(objClaims_mstr_hdr_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(5, 2));
                //clmhdr_p_day = Util.NumInt(Util.Str(objClaims_mstr_hdr_rec.KEY_CLM_BATCH_NBR).PadRight(8).Substring(7, 1));
                objClaims_mstr_hdr_rec.KEY_CLM_CLAIM_NBR = Util.NumInt(clmhdr_claim_nbr);  //Util.NumInt(clmhdr_p_claim_nbr);
                objClaims_mstr_hdr_rec.KEY_CLM_SERV_CODE = Util.Str(clmhdr_b_oma_cd) + Util.Str(clmhdr_b_oma_suff);
                objClaims_mstr_hdr_rec.KEY_CLM_ADJ_NBR = Util.Str(clmhdr_b_adj_nbr);

                objClaims_mstr_hdr_rec.RecordState = State.Added;
                objClaims_mstr_hdr_rec.Submit();
            }
            catch (Exception e)
            {
                return false;
            }
            return true;
        }

        private async Task<bool> write_claims_dtl_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "Write_Claims_Dtl_Rec");

            try
            {
                objClaims_mstr_dtl_rec = new F002_CLAIMS_MSTR_DTL();
                objClaims_mstr_dtl_rec.CLMDTL_BATCH_NBR = Util.Str(clmhdr_batch_nbr);
                objClaims_mstr_dtl_rec.CLMDTL_CLAIM_NBR = Util.NumInt(clmdtl_claim_nbr);
                objClaims_mstr_dtl_rec.CLMDTL_OMA_CD = Util.Str(clmdtl_oma_cd);
                objClaims_mstr_dtl_rec.CLMDTL_OMA_SUFF = Util.Str(clmdtl_oma_suff);
                objClaims_mstr_dtl_rec.CLMDTL_ADJ_NBR = Util.NumInt(clmdtl_adj_nbr);
                objClaims_mstr_dtl_rec.CLMDTL_REV_GROUP_CD = Util.Str(clmdtl_rev_group_cd);
                objClaims_mstr_dtl_rec.CLMDTL_AGENT_CD = Util.NumInt(clmdtl_agent_cd);
                objClaims_mstr_dtl_rec.CLMDTL_ADJ_CD = Util.Str(clmdtl_adj_cd);
                objClaims_mstr_dtl_rec.CLMDTL_NBR_SERV = Util.NumInt(clmdtl_nbr_serv);
                objClaims_mstr_dtl_rec.CLMDTL_SV_YY = Util.NumInt(clmdtl_sv_yy);
                objClaims_mstr_dtl_rec.CLMDTL_SV_MM = Util.NumInt(clmdtl_sv_mm);
                objClaims_mstr_dtl_rec.CLMDTL_SV_DD = Util.NumInt(clmdtl_sv_dd);
                objClaims_mstr_dtl_rec.CLMDTL_CONSEC_DATES_R = Util.Str(clmdtl_consec_dates_grp);  // watch out this values ....???
                //clmdtl-consecutive-sv-date  occurs 3 times
                //15  clmdtl-consec-dates-r  redefines  clmdtl-consec-dates.
                //20  clmdtl-consecutive-dates    occurs 3 times.
                /* objClaims_mstr_dtl_rec.CLMDTL_SV_NBR1 = clmdtl_sv_nbr[1];   
                 objClaims_mstr_dtl_rec.CLMDTL_SV_NBR2 = clmdtl_sv_nbr[2];
                 objClaims_mstr_dtl_rec.CLMDTL_SV_NBR3 = clmdtl_sv_nbr[3];
                 objClaims_mstr_dtl_rec.CLMDTL_SV_DAY1 = Util.NumDec(clmdtl_sv_day[1]); 
                 objClaims_mstr_dtl_rec.CLMDTL_SV_DAY2 = Util.NumDec(clmdtl_sv_day[2]);
                 objClaims_mstr_dtl_rec.CLMDTL_SV_DAY3 = Util.NumDec(clmdtl_sv_day[3]); */
                objClaims_mstr_dtl_rec.CLMDTL_AMT_TECH_BILLED = Util.NumInt(clmdtl_amt_tech_billed);
                objClaims_mstr_dtl_rec.CLMDTL_FEE_OMA = Util.NumInt(clmdtl_fee_oma);
                objClaims_mstr_dtl_rec.CLMDTL_FEE_OHIP = Util.NumInt(clmdtl_fee_ohip);
                objClaims_mstr_dtl_rec.CLMDTL_DATE_PERIOD_END = Util.Str(clmdtl_date_period_end);
                objClaims_mstr_dtl_rec.CLMDTL_CYCLE_NBR = Util.NumInt(clmdtl_cycle_nbr);
                objClaims_mstr_dtl_rec.CLMDTL_DIAG_CD = Util.NumInt(clmdtl_diag_cd);
                objClaims_mstr_dtl_rec.CLMDTL_LINE_NO = Util.NumInt(clmdtl_line_no);
                objClaims_mstr_dtl_rec.CLMDTL_RESUBMIT_FLAG = Util.Str(clmdtl_resubmit_flag);
                objClaims_mstr_dtl_rec.CLMDTL_RESERVE_FOR_FUTURE = Util.Str(clmdtl_reserve_for_future);
                objClaims_mstr_dtl_rec.CLMDTL_DESC = Util.Str(clmdtl_desc);
                objClaims_mstr_dtl_rec.CLMDTL_FILLER9 = Util.Str(clmdtl_filler);

                objClaims_mstr_dtl_rec.CLMDTL_ORIG_BATCH_NBR = Util.Str(clmdtl_orig_batch_nbr);
                objClaims_mstr_dtl_rec.CLMDTL_ORIG_CLAIM_NBR_IN_BATCH = Util.NumInt(clmdtl_orig_claim_nbr_in_batch);
                objClaims_mstr_dtl_rec.KEY_CLM_TYPE = Util.Str(clmdtl_b_key_type);

                objClaims_mstr_dtl_rec.KEY_P_CLM_TYPE = Util.Str(clmdtl_p_key_type);
                objClaims_mstr_dtl_rec.KEY_P_CLM_DATA = Util.Str(clmdtl_p_data);

                objClaims_mstr_dtl_rec.KEY_CLM_BATCH_NBR = Util.Str(clmdtl_batch_nbr);
                objClaims_mstr_dtl_rec.KEY_CLM_CLAIM_NBR = Util.NumInt(clmdtl_claim_nbr);   //Util.NumInt(clmdtl_p_claim_nbr);  // todo..????
                objClaims_mstr_dtl_rec.KEY_CLM_SERV_CODE = Util.Str(clmdtl_oma_cd);
                //clmdtl_p_oma_cd =    //todo...??
                //clmdtl_p_oma_suff =  //todo...??
                objClaims_mstr_dtl_rec.KEY_CLM_ADJ_NBR = Util.Str(clmdtl_p_adj_nbr);
                objClaims_mstr_dtl_rec.RecordState = State.Added;
                objClaims_mstr_dtl_rec.Submit();

            }
            catch (Exception e)
            {
                return false;
            }

            return true;
        }

        private async Task<bool> write_claims_dtl_desc_rec()
        {
            await Exit_Trakker();
            // Util.Trakker(++ctr, "Write_Claims_Dtl_Desc_Rec");

            try
            {
                if (!string.IsNullOrWhiteSpace(clmdtl_desc))
                {
                    objF002_CLAIMS_MSTR_DTL_DESC = new F002_CLAIMS_MSTR_DTL_DESC();
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_BATCH_NBR = Util.Str(clmhdr_batch_nbr);
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_CLAIM_NBR = Util.NumInt(clmdtl_claim_nbr);
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_OMA_CD = "ZZZZ";
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_OMA_SUFF = ss_desc.ToString();
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_ADJ_NBR = Util.NumInt(clmdtl_adj_nbr);
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_DESC = Util.Str(clmdtl_desc);
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_FILLER0 = clmdtl_filler;
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_FILLER9 = string.Empty;
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_ORIG_BATCH_NBR = Util.Str(clmhdr_batch_nbr);
                    objF002_CLAIMS_MSTR_DTL_DESC.CLMDTL_ORIG_CLAIM_NBR_IN_BATCH = Util.NumInt(clmdtl_orig_claim_nbr_in_batch);


                    objF002_CLAIMS_MSTR_DTL_DESC.KEY_CLM_TYPE = Util.Str(clmdtl_b_key_type);
                    objF002_CLAIMS_MSTR_DTL_DESC.KEY_P_CLM_DATA = Util.Str(clmdtl_p_data);
                    objF002_CLAIMS_MSTR_DTL_DESC.KEY_CLM_BATCH_NBR = Util.Str(clmhdr_batch_nbr);
                    objF002_CLAIMS_MSTR_DTL_DESC.KEY_CLM_CLAIM_NBR = Util.NumInt(clmdtl_orig_claim_nbr_in_batch);
                    //clmdtl_p_oma_cd =    //todo...??
                    //clmdtl_p_oma_suff =  //todo...??
                    objF002_CLAIMS_MSTR_DTL_DESC.KEY_CLM_ADJ_NBR = Util.Str(clmdtl_p_adj_nbr);
                    objF002_CLAIMS_MSTR_DTL_DESC.KEY_P_CLM_TYPE = "Z";
                    objF002_CLAIMS_MSTR_DTL_DESC.KEY_CLM_SERV_CODE = "ZZZZ1";     // todo: not sure  clmdtl_oma_cd....? 
                    objF002_CLAIMS_MSTR_DTL_DESC.KEY_P_CLM_DATA = "";     // todo:  where do I get this values ???
                    objF002_CLAIMS_MSTR_DTL_DESC.RecordState = State.Added;
                    objF002_CLAIMS_MSTR_DTL_DESC.Submit();
                }

            }
            catch (Exception e)
            {
                return false;
            }

            return true;
        }

        private async Task<bool> assign_variables_to_batctrl()
        {
            // Util.Trakker(++ctr, "Assign_Variables_To_Batctrl");

            try
            {
                batctrl_batch_nbr_grp = Util.Str(batctrl_bat_clinic_nbr_1_2).PadLeft(2, '0') + Util.Str(batctrl_bat_doc_nbr).PadRight(3) + Util.Str(batctrl_bat_week_day_r).PadLeft(3, '0');
                batctrl_bat_week_day_grp = Util.Str(batctrl_bat_week_day_r);
                batctrl_bat_week = Util.NumInt(Util.Str(batctrl_bat_week_day_r).PadRight(3, '0').Substring(0, 2));
                batctrl_bat_day = Util.NumInt(Util.Str(batctrl_bat_week_day_r).PadRight(3, '0').Substring(2, 1));
                key_batctrl_file_r = batctrl_batch_nbr_grp;
                key_batctrl_file = batctrl_batch_nbr_grp;
                objBatctrl_rec.BATCTRL_BATCH_NBR = batctrl_batch_nbr_grp;

                objBatctrl_rec.BATCTRL_BATCH_TYPE = batctrl_batch_type;
                objBatctrl_rec.BATCTRL_ADJ_CD = Util.Str(batctrl_adj_cd);
                objBatctrl_rec.BATCTRL_ADJ_CD_SUB_TYPE = Util.Str(batctrl_adj_cd_sub_type);
                objBatctrl_rec.BATCTRL_LAST_CLAIM_NBR = Util.NumInt(batctrl_last_claim_nbr);
                objBatctrl_rec.BATCTRL_CLINIC_NBR = Util.Str(batctrl_clinic_nbr);
                batctrl_clinic_nbr_1_2 = Util.Str(batctrl_clinic_nbr).PadRight(4, ' ').Substring(0, 2);
                batctrl_clinic_nbr_3_4 = Util.Str(batctrl_clinic_nbr).PadRight(4, ' ').Substring(2, 2);
                objBatctrl_rec.BATCTRL_CLINIC_NBR = Util.Str(batctrl_clinic_nbr_1_2) + Util.Str(batctrl_clinic_nbr_3_4);

                objBatctrl_rec.BATCTRL_DOC_NBR_OHIP = Util.NumInt(batctrl_doc_nbr_ohip);
                //objBatctrl_rec.BATCTRL_HOSP =   Util.Str(batctrl_hosp);
                objBatctrl_rec.BATCTRL_HOSP = batctrl_payroll;
                objBatctrl_rec.BATCTRL_LOC = batctrl_loc;
                batctrl_loc1 = Util.Str(batctrl_loc).PadRight(4, ' ').Substring(0, 2);
                batctrl_loc2_4 = Util.Str(batctrl_loc).PadRight(4, ' ').Substring(2, 2);

                objBatctrl_rec.BATCTRL_AGENT_CD = Util.NumInt(batctrl_agent_cd);
                objBatctrl_rec.BATCTRL_I_O_PAT_IND = Util.Str(batctrl_i_o_pat_ind);
                objBatctrl_rec.BATCTRL_DATE_BATCH_ENTERED = Util.Str(batctrl_date_batch_entered);
                objBatctrl_rec.BATCTRL_DATE_PERIOD_END = Util.Str(batctrl_date_period_end);
                objBatctrl_rec.BATCTRL_DATE_PERIOD_END = Util.Str(batctrl_date_period_end_yy).PadLeft(4, '0') + Util.Str(batctrl_date_period_end_mm).PadLeft(2, '0') + Util.Str(batctrl_date_period_end_dd).PadLeft(2, '0');
                objBatctrl_rec.BATCTRL_CYCLE_NBR = Util.NumInt(batctrl_cycle_nbr);
                objBatctrl_rec.BATCTRL_AMT_EST = Util.NumInt(batctrl_amt_est);
                objBatctrl_rec.BATCTRL_AMT_ACT = Util.NumInt(batctrl_amt_act);
                objBatctrl_rec.BATCTRL_SVC_EST = Util.NumInt(batctrl_svc_est);
                objBatctrl_rec.BATCTRL_SVC_ACT = Util.NumInt(batctrl_svc_act);
                objBatctrl_rec.BATCTRL_AR_YY_MM = Util.Str(batctrl_ar_yy_mm);
                objBatctrl_rec.BATCTRL_CALC_AR_DUE = Util.NumInt(batctrl_calc_ar_due);
                objBatctrl_rec.BATCTRL_CALC_TOT_REV = Util.NumInt(batctrl_calc_tot_rev);
                objBatctrl_rec.BATCTRL_MANUAL_PAY_TOT = Util.NumInt(batctrl_manual_pay_tot);
                objBatctrl_rec.BATCTRL_BATCH_STATUS = Util.Str(batctrl_batch_status);
                objBatctrl_rec.BATCTRL_NBR_CLAIMS_IN_BATCH = Util.NumInt(batctrl_nbr_claims_in_batch);
            }
            catch (Exception e)
            {
                return false;
            }
            return true;
        }

        private async Task<bool> assign_batctrl_to_variables()
        {
            // Util.Trakker(++ctr, "assign_Batctrl_to_variables");

            try
            {

                batctrl_batch_nbr_grp = Util.StrUpper(objBatctrl_rec.BATCTRL_BATCH_NBR.ToString());
                batctrl_bat_clinic_nbr_1_2 = Util.NumInt(Util.StrUpper(batctrl_batch_nbr_grp).PadRight(8).Substring(0, 2));
                batctrl_bat_doc_nbr = Util.StrUpper(batctrl_batch_nbr_grp).PadRight(8).Substring(2, 3);
                batctrl_bat_week_day_grp = Util.StrUpper(batctrl_batch_nbr_grp).PadRight(8).Substring(5, 3);
                batctrl_bat_week = Util.NumInt(Util.Str(batctrl_bat_week_day_grp).Substring(0, 2));
                batctrl_bat_day = Util.NumInt(Util.Str(batctrl_bat_week_day_grp).Substring(2, 1));
                batctrl_bat_week_day_r = Util.NumInt(batctrl_bat_week_day_grp);
                key_batctrl_file_r = batctrl_batch_nbr_grp;
                key_batctrl_file = key_batctrl_file_r;

                batctrl_batch_type = Util.StrUpper(objBatctrl_rec.BATCTRL_BATCH_TYPE);
                batctrl_adj_cd = Util.StrUpper(objBatctrl_rec.BATCTRL_ADJ_CD);
                batctrl_adj_cd_sub_type = Util.StrUpper(objBatctrl_rec.BATCTRL_ADJ_CD_SUB_TYPE);
                batctrl_last_claim_nbr = Util.NumInt(objBatctrl_rec.BATCTRL_LAST_CLAIM_NBR);
                batctrl_clinic_nbr = Util.StrUpper(objBatctrl_rec.BATCTRL_CLINIC_NBR);
                batctrl_clinic_nbr_1_2 = Util.Str(batctrl_clinic_nbr).PadRight(4, ' ').Substring(0, 2);
                batctrl_clinic_nbr_3_4 = Util.Str(batctrl_clinic_nbr).PadRight(4, ' ').Substring(2, 2);

                batctrl_doc_nbr_ohip = Util.NumInt(objBatctrl_rec.BATCTRL_DOC_NBR_OHIP);
                //objBatctrl_rec.BATCTRL_HOSP =   Util.Str(batctrl_hosp);
                batctrl_payroll = Util.Str(objBatctrl_rec.BATCTRL_HOSP);
                batctrl_loc = Util.Str(objBatctrl_rec.BATCTRL_LOC);
                batctrl_loc1 = Util.Str(batctrl_loc).PadRight(4, ' ').Substring(0, 2);
                batctrl_loc2_4 = Util.Str(batctrl_loc).PadRight(4, ' ').Substring(2, 2);

                batctrl_agent_cd = Util.NumInt(objBatctrl_rec.BATCTRL_AGENT_CD);
                batctrl_i_o_pat_ind = Util.Str(objBatctrl_rec.BATCTRL_I_O_PAT_IND);
                batctrl_date_batch_entered = Util.Str(objBatctrl_rec.BATCTRL_DATE_BATCH_ENTERED);
                batctrl_date_period_end = Util.Str(objBatctrl_rec.BATCTRL_DATE_PERIOD_END);
                batctrl_date_period_end_yy = Util.NumInt(Util.Str(objBatctrl_rec.BATCTRL_DATE_PERIOD_END).PadRight(8).Substring(0, 4));
                batctrl_date_period_end_mm = Util.NumInt(Util.Str(objBatctrl_rec.BATCTRL_DATE_PERIOD_END).PadRight(8).Substring(4, 2));
                batctrl_date_period_end_dd = Util.NumInt(Util.Str(objBatctrl_rec.BATCTRL_DATE_PERIOD_END).PadRight(8).Substring(6, 2));

                batctrl_cycle_nbr = Util.NumInt(objBatctrl_rec.BATCTRL_CYCLE_NBR);
                batctrl_amt_est = Util.NumDec(objBatctrl_rec.BATCTRL_AMT_EST);
                batctrl_amt_act = Util.NumDec(objBatctrl_rec.BATCTRL_AMT_ACT);
                batctrl_svc_est = Util.NumInt(objBatctrl_rec.BATCTRL_SVC_EST);
                batctrl_svc_act = Util.NumInt(objBatctrl_rec.BATCTRL_SVC_ACT);
                batctrl_ar_yy_mm = Util.Str(objBatctrl_rec.BATCTRL_AR_YY_MM);
                batctrl_calc_ar_due = Util.NumDec(objBatctrl_rec.BATCTRL_CALC_AR_DUE);
                batctrl_calc_tot_rev = Util.NumDec(objBatctrl_rec.BATCTRL_CALC_TOT_REV);
                batctrl_manual_pay_tot = Util.NumDec(objBatctrl_rec.BATCTRL_MANUAL_PAY_TOT);
                batctrl_batch_status = Util.Str(objBatctrl_rec.BATCTRL_BATCH_STATUS);
                batctrl_nbr_claims_in_batch = Util.NumInt(objBatctrl_rec.BATCTRL_NBR_CLAIMS_IN_BATCH);
            }
            catch (Exception e)
            {
                return false;
            }
            return true;
        }

        private async Task display_hold_desc()
        {
            await Exit_Trakker();
            hold_desc_1 = Util.Str(hold_desc[1]);
            hold_desc_2 = Util.Str(hold_desc[2]);
            hold_desc_3 = Util.Str(hold_desc[3]);
            hold_desc_4 = Util.Str(hold_desc[4]);
            hold_desc_5 = Util.Str(hold_desc[5]);
        }

        private async Task assign_hold_oma_rec_to_next_hold_oma_rec(int row, int dest)
        {

            hold_oma_cd[dest] = hold_oma_cd[row];
            hold_oma_cd_alpha[dest] = hold_oma_cd_alpha[row];
            hold_oma_cd_num[dest] = hold_oma_cd_num[row];
            hold_oma_cd_num_1[dest] = hold_oma_cd_num_1[row];
            hold_oma_cd_num_2[dest] = hold_oma_cd_num_2[row];
            hold_oma_cd_num_3[dest] = hold_oma_cd_num_3[row];
            hold_oma_suff[dest] = hold_oma_suff[row];
            hold_sv_nbr_serv_incoming[dest] = hold_sv_nbr_serv_incoming[row];
            hold_sv_nbr_serv[dest] = hold_sv_nbr_serv[row];
            hold_admit_date_icc[dest] = hold_admit_date_icc[row];
            hold_sv_date[dest] = hold_sv_date[row];
            hold_sv_date_yy[dest] = hold_sv_date_yy[row];
            hold_sv_date_yy_r[dest] = hold_sv_date_yy_r[row];
            hold_sv_date_yy_12[dest] = hold_sv_date_yy_12[row];
            hold_sv_date_yy_34[dest] = hold_sv_date_yy_34[row];
            hold_sv_date_mm[dest] = hold_sv_date_mm[row];
            hold_sv_date_dd[dest] = hold_sv_date_dd[row];
            hold_icc_cd[dest] = hold_icc_cd[row];
            hold_icc_sec[dest] = hold_icc_sec[row];
            hold_icc_grp[dest] = hold_icc_grp[row];
            hold_key_r[dest] = hold_key_r[row];

            hold_sort_key_1[dest] = hold_sort_key_1[row];
            hold_sv_nbr[dest, 1] = hold_sv_nbr[row, 1];
            hold_sv_nbr[dest, 2] = hold_sv_nbr[row, 2];
            hold_sv_nbr[dest, 3] = hold_sv_nbr[row, 3];

            hold_sv_day[dest, 1] = hold_sv_day[row, 1];
            hold_sv_day[dest, 2] = hold_sv_day[row, 2];
            hold_sv_day[dest, 3] = hold_sv_day[row, 3];

            hold_sv_day_num[dest, 1] = hold_sv_day_num[row, 1];
            hold_sv_day_num[dest, 2] = hold_sv_day_num[row, 2];
            hold_sv_day_num[dest, 3] = hold_sv_day_num[row, 3];

            hold_override_price[dest] = hold_override_price[row];
            hold_bilateral[dest] = hold_bilateral[row];
            hold_fee_incoming[dest] = hold_fee_incoming[row];
            hold_fee_oma[dest] = hold_fee_oma[row];
            hold_fee_oma_r[dest] = hold_fee_oma_r[row];
            hold_fee_ohip[dest] = hold_fee_ohip[row];
            hold_fee_ohip_r[dest] = hold_fee_ohip_r[row];
            hold_priced_tech[dest] = hold_priced_tech[row];
            hold_basic_tech[dest] = hold_basic_tech[row];
            hold_basic_prof[dest] = hold_basic_prof[row];
            hold_basic_fee[dest] = hold_basic_fee[row];
            hold_oma_rec_ind[dest, 1] = hold_oma_rec_ind[row, 1];
            hold_oma_rec_ind[dest, 2] = hold_oma_rec_ind[row, 2];
            hold_oma_rec_ind[dest, 3] = hold_oma_rec_ind[row, 3];
            hold_oma_rec_ind[dest, 4] = hold_oma_rec_ind[row, 4];
            hold_oma_rec_ind[dest, 5] = hold_oma_rec_ind[row, 5];
            hold_oma_rec_ind[dest, 6] = hold_oma_rec_ind[row, 6];
            hold_oma_rec_ind[dest, 7] = hold_oma_rec_ind[row, 7];
            hold_oma_rec_ind[dest, 8] = hold_oma_rec_ind[row, 8];

            hold_oma_add_on_cd[dest, 1] = hold_oma_add_on_cd[row, 1];
            hold_oma_add_on_cd[dest, 2] = hold_oma_add_on_cd[row, 2];
            hold_oma_add_on_cd[dest, 3] = hold_oma_add_on_cd[row, 3];
            hold_oma_add_on_cd[dest, 4] = hold_oma_add_on_cd[row, 4];
            hold_oma_add_on_cd[dest, 5] = hold_oma_add_on_cd[row, 5];
            hold_oma_add_on_cd[dest, 6] = hold_oma_add_on_cd[row, 6];
            hold_oma_add_on_cd[dest, 7] = hold_oma_add_on_cd[row, 7];
            hold_oma_add_on_cd[dest, 8] = hold_oma_add_on_cd[row, 8];
            hold_oma_add_on_cd[dest, 9] = hold_oma_add_on_cd[row, 9];
            hold_oma_add_on_cd[dest, 10] = hold_oma_add_on_cd[row, 10];

            hold_oma_ind_card_requireds[dest] = hold_oma_ind_card_requireds[row];

            hold_oma_ind_card_required[dest, 1] = hold_oma_ind_card_required[row, 1];
            hold_oma_ind_card_required[dest, 2] = hold_oma_ind_card_required[row, 2];
            hold_oma_ind_card_required[dest, 3] = hold_oma_ind_card_required[row, 3];

            hold_oma_fees[dest, 1] = hold_oma_fees[row, 1];
            hold_oma_fees[dest, 2] = hold_oma_fees[row, 2];

            hold_oma_fee_1[dest, 1] = hold_oma_fee_1[row, 1];
            hold_oma_fee_1[dest, 2] = hold_oma_fee_1[row, 2];

            hold_oma_fee_2[dest, 1] = hold_oma_fee_2[row, 1];
            hold_oma_fee_2[dest, 2] = hold_oma_fee_2[row, 2];

            hold_fee_min[dest, 1] = hold_fee_min[row, 1];
            hold_fee_min[dest, 2] = hold_fee_min[row, 2];

            hold_fee_max[dest, 1] = hold_fee_max[row, 1];
            hold_fee_max[dest, 2] = hold_fee_max[row, 2];

            hold_oma_fee_anae[dest, 1] = hold_oma_fee_anae[row, 1];
            hold_oma_fee_anae[dest, 2] = hold_oma_fee_anae[row, 2];

            hold_oma_fee_asst[dest, 1] = hold_oma_fee_asst[row, 1];
            hold_oma_fee_asst[dest, 2] = hold_oma_fee_asst[row, 2];

            hold_ss_curr_prev[dest] = hold_ss_curr_prev[row];
            hold_flag_fee_used[dest] = hold_flag_fee_used[row];
            hold_flag_sec_group[dest] = hold_flag_sec_group[row];
            hold_flag_sec[dest] = hold_flag_sec[row];
            hold_flag_grp[dest] = hold_flag_grp[row];
            hold_diag_cd[dest] = hold_diag_cd[row];
            hold_line_no[dest] = hold_line_no[row];
        }

        #endregion

        #region "Initialize"

        private async Task initialize_screen_variables()
        {
            batctrl_agent_cd = 0;
            batctrl_amt_act = 0;
            batctrl_amt_est = 0;
            batctrl_bat_clinic_nbr_1_2 = 0;
            batctrl_bat_doc_nbr = "";
            batctrl_bat_week_day_r = 0;
            batctrl_bat_week_day_d = 0;
            batctrl_batch_type = "";
            batctrl_clinic_nbr = "";
            batctrl_cycle_nbr = 0;
            batctrl_date_period_end_dd = 0;
            batctrl_date_period_end_mm = 0;
            batctrl_date_period_end_yy = 0;
            batctrl_i_o_pat_ind = "";
            batctrl_last_claim_nbr = 0;
            batctrl_payroll = "";
            batctrl_svc_act = 0;
            batctrl_svc_est = 0;
            change_reply = "";
            clmhdr_batch_nbr_7_9 = 0;
            clmhdr_clinic_nbr_1_2 = 0;
            clmhdr_date_admit_dd = 0;
            clmhdr_date_admit_mm = 0;
            clmhdr_date_admit_yy_12 = 0;
            clmhdr_date_admit_yy_34 = 0;
            clmhdr_diag_cd = 0;
            clmhdr_doc_nbr = "";
            clmhdr_i_o_pat_ind = "";
            clmhdr_loc = "";
            clmhdr_manual_review = "";
            clmhdr_msg_nbr = "";
            clmhdr_pat_acronym6 = "";
            clmhdr_payroll = "";
            clmhdr_refer_doc_nbr = 0;
            clmhdr_sub_nbr = "";
            confirm_space = "";
            process_batch = "";
            continue_reply = "";
            ctr_read_batctrl_mstr = 0;
            ctr_read_claims_mstr = 0;
            ctr_read_const_mstr = 0;
            ctr_read_doc_mstr = 0;
            ctr_read_loc_mstr = 0;
            ctr_read_msg_sub_mstr = 0;
            ctr_read_oma_mstr = 0;
            ctr_read_pat_mstr = 0;
            ctr_rewrit_batctrl_file = 0;
            ctr_writ_batctrl_file = 0;
            ctr_writ_claims_mstr = 0;
            ctr_write_corrected_pat = 0;
            def_claim_source = "";
            err_msg_comment = "";
            flag_accept = "";
            hold_desc_1 = "";
            hold_desc_2 = "";
            hold_desc_3 = "";
            hold_desc_4 = "";
            hold_desc_5 = "";
            hold_last_birth_dd = 0;
            hold_last_birth_mm = 0;
            hold_last_birth_yy_34 = 0;
            hold_last_elig_mail_dd = 0;
            hold_last_elig_mail_mm = 0;
            hold_last_elig_mail_yy_34 = 0;
            hold_last_elig_maint_dd = 0;
            hold_last_elig_maint_mm = 0;
            hold_last_elig_maint_yy_34 = 0;
            last_claim_flag = "";
            option = "";
            password_input = "";
            reply_create_pat = "";
            status_cobol_display = "";
            ws_batctrl_amt_diff = 0;
            ws_batctrl_svc_diff = 0;
            ws_clmhdr_hosp = "";
            ws_disp_pat_key_type = "";
            ws_doc_spec_cd = 0;
            ws_file_err_msg = "";
            ws_highest_grp_nbr = 0;
            ws_highest_grp_tot = 0;
            ws_hold_screen_dept = 0;
            ws_ohip_chart_flag = "";
            ws_pat_birth_date_dd = 0;
            ws_pat_birth_date_mm = 0;
            ws_pat_birth_date_yy = 0;
            ws_pat_expiry_mm = 0;
            ws_pat_expiry_yy = 0;
            ws_pat_given_name = "";
            ws_pat_health_nbr = 0;
            ws_pat_last_version_cd = "";
            ws_pat_mess_code = "";
            ws_pat_ohip_mmyy = "";
            ws_pat_surname = "";
            ws_pat_version_cd = "";
            ws_scr_health_nbr = "";
            ws_subscr_addr1 = "";
            ws_subscr_addr2 = "";
            ws_subscr_addr3 = "";
            ws_subscr_postal_cd = "";
            d001_batch_nbr_grp = "";
            batctrl_loc = "";
            d001_loc = "";
            d001_agent_cd = "";
            d001_i_o_pat_ind = "";
            d001_payroll = "";
            hold_oma_cd_1 = "";
            hold_oma_cd_2 = "";
            hold_oma_cd_3 = "";
            hold_oma_cd_4 = "";
            hold_oma_cd_5 = "";
            hold_oma_cd_6 = "";
            hold_oma_cd_7 = "";
            hold_oma_cd_8 = "";
            hold_oma_cd_9 = "";
            hold_oma_cd_10 = "";
            hold_oma_suff_1 = "";
            hold_oma_suff_2 = "";
            hold_oma_suff_3 = "";
            hold_oma_suff_4 = "";
            hold_oma_suff_5 = "";
            hold_oma_suff_6 = "";
            hold_oma_suff_7 = "";
            hold_oma_suff_8 = "";
            hold_oma_suff_9 = "";
            hold_oma_suff_10 = "";
            hold_sv_date_yy_12_1 = 0;
            hold_sv_date_yy_12_2 = 0;
            hold_sv_date_yy_12_3 = 0;
            hold_sv_date_yy_12_4 = 0;
            hold_sv_date_yy_12_5 = 0;
            hold_sv_date_yy_12_6 = 0;
            hold_sv_date_yy_12_7 = 0;
            hold_sv_date_yy_12_8 = 0;
            hold_sv_date_yy_12_9 = 0;
            hold_sv_date_yy_12_10 = 0;
            hold_sv_date_yy_34_1 = 0;
            hold_sv_date_yy_34_2 = 0;
            hold_sv_date_yy_34_3 = 0;
            hold_sv_date_yy_34_4 = 0;
            hold_sv_date_yy_34_5 = 0;
            hold_sv_date_yy_34_6 = 0;
            hold_sv_date_yy_34_7 = 0;
            hold_sv_date_yy_34_8 = 0;
            hold_sv_date_yy_34_9 = 0;
            hold_sv_date_yy_34_10 = 0;
            hold_sv_date_mm_1 = 0;
            hold_sv_date_mm_2 = 0;
            hold_sv_date_mm_3 = 0;
            hold_sv_date_mm_4 = 0;
            hold_sv_date_mm_5 = 0;
            hold_sv_date_mm_6 = 0;
            hold_sv_date_mm_7 = 0;
            hold_sv_date_mm_8 = 0;
            hold_sv_date_mm_9 = 0;
            hold_sv_date_mm_10 = 0;
            hold_sv_date_dd_1 = 0;
            hold_sv_date_dd_2 = 0;
            hold_sv_date_dd_3 = 0;
            hold_sv_date_dd_4 = 0;
            hold_sv_date_dd_5 = 0;
            hold_sv_date_dd_6 = 0;
            hold_sv_date_dd_7 = 0;
            hold_sv_date_dd_8 = 0;
            hold_sv_date_dd_9 = 0;
            hold_sv_date_dd_10 = 0;
            hold_sv_nbr_serv_1 = 0;
            hold_sv_nbr_serv_2 = 0;
            hold_sv_nbr_serv_3 = 0;
            hold_sv_nbr_serv_4 = 0;
            hold_sv_nbr_serv_5 = 0;
            hold_sv_nbr_serv_6 = 0;
            hold_sv_nbr_serv_7 = 0;
            hold_sv_nbr_serv_8 = 0;
            hold_sv_nbr_serv_9 = 0;
            hold_sv_nbr_serv_10 = 0;
            hold_diag_cd_1 = 0;
            hold_diag_cd_2 = 0;
            hold_diag_cd_3 = 0;
            hold_diag_cd_4 = 0;
            hold_diag_cd_5 = 0;
            hold_diag_cd_6 = 0;
            hold_diag_cd_7 = 0;
            hold_diag_cd_8 = 0;
            hold_diag_cd_9 = 0;
            hold_diag_cd_10 = 0;
            hold_sv_nbr_1_1 = 0;
            hold_sv_nbr_2_1 = 0;
            hold_sv_nbr_3_1 = 0;
            hold_sv_nbr_4_1 = 0;
            hold_sv_nbr_5_1 = 0;
            hold_sv_nbr_6_1 = 0;
            hold_sv_nbr_7_1 = 0;
            hold_sv_nbr_8_1 = 0;
            hold_sv_nbr_9_1 = 0;
            hold_sv_nbr_10_1 = 0;
            hold_sv_day_1_1 = "";
            hold_sv_day_2_1 = "";
            hold_sv_day_3_1 = "";
            hold_sv_day_4_1 = "";
            hold_sv_day_5_1 = "";
            hold_sv_day_6_1 = "";
            hold_sv_day_7_1 = "";
            hold_sv_day_8_1 = "";
            hold_sv_day_9_1 = "";
            hold_sv_day_10_1 = "";
            hold_sv_nbr_1_2 = 0;
            hold_sv_nbr_2_2 = 0;
            hold_sv_nbr_3_2 = 0;
            hold_sv_nbr_4_2 = 0;
            hold_sv_nbr_5_2 = 0;
            hold_sv_nbr_6_2 = 0;
            hold_sv_nbr_7_2 = 0;
            hold_sv_nbr_8_2 = 0;
            hold_sv_nbr_9_2 = 0;
            hold_sv_nbr_10_2 = 0;
            hold_sv_day_1_2 = 0;
            hold_sv_day_2_2 = 0;
            hold_sv_day_3_2 = 0;
            hold_sv_day_4_2 = 0;
            hold_sv_day_5_2 = 0;
            hold_sv_day_6_2 = 0;
            hold_sv_day_7_2 = 0;
            hold_sv_day_8_2 = 0;
            hold_sv_day_9_2 = 0;
            hold_sv_day_10_2 = 0;
            hold_sv_nbr_1_3 = 0;
            hold_sv_nbr_2_3 = 0;
            hold_sv_nbr_3_3 = 0;
            hold_sv_nbr_4_3 = 0;
            hold_sv_nbr_5_3 = 0;
            hold_sv_nbr_6_3 = 0;
            hold_sv_nbr_7_3 = 0;
            hold_sv_nbr_8_3 = 0;
            hold_sv_nbr_9_3 = 0;
            hold_sv_nbr_10_3 = 0;
            hold_sv_day_1_3 = 0;
            hold_sv_day_2_3 = 0;
            hold_sv_day_3_3 = 0;
            hold_sv_day_4_3 = 0;
            hold_sv_day_5_3 = 0;
            hold_sv_day_6_3 = 0;
            hold_sv_day_7_3 = 0;
            hold_sv_day_8_3 = 0;
            hold_sv_day_9_3 = 0;
            hold_sv_day_10_3 = 0;
            hold_fee_oma_1 = 0;
            hold_fee_oma_2 = 0;
            hold_fee_oma_3 = 0;
            hold_fee_oma_4 = 0;
            hold_fee_oma_5 = 0;
            hold_fee_oma_6 = 0;
            hold_fee_oma_7 = 0;
            hold_fee_oma_8 = 0;
            hold_fee_oma_9 = 0;
            hold_fee_oma_10 = 0;
            hold_fee_ohip_1 = 0;
            hold_fee_ohip_2 = 0;
            hold_fee_ohip_3 = 0;
            hold_fee_ohip_4 = 0;
            hold_fee_ohip_5 = 0;
            hold_fee_ohip_6 = 0;
            hold_fee_ohip_7 = 0;
            hold_fee_ohip_8 = 0;
            hold_fee_ohip_9 = 0;
            hold_fee_ohip_10 = 0;
            hold_icc_cd_1 = "";
            hold_icc_cd_2 = "";
            hold_icc_cd_3 = "";
            hold_icc_cd_4 = "";
            hold_icc_cd_5 = "";
            hold_icc_cd_6 = "";
            hold_icc_cd_7 = "";
            hold_icc_cd_8 = "";
            hold_icc_cd_9 = "";
            hold_icc_cd_10 = "";
            hold_flag_sec_group_1 = 0;
            hold_flag_sec_group_2 = 0;
            hold_flag_sec_group_3 = 0;
            hold_flag_sec_group_4 = 0;
            hold_flag_sec_group_5 = 0;
            hold_flag_sec_group_6 = 0;
            hold_flag_sec_group_7 = 0;
            hold_flag_sec_group_8 = 0;
            hold_flag_sec_group_9 = 0;
            hold_flag_sec_group_10 = 0;
            doc_inits = "";
            doc_name = "";
        }

        private async Task initialize_clmHdr_record_screenVariables()
        {
            // Util.Trakker(++ctr, "Initialize_ClmHdr_Record_ScreenVariables");

            clmhdr_batch_nbr = "";
            clmhdr_clinic_nbr_1_2 = 0;
            clmhdr_doc_nbr = "";
            clmhdr_week = 0;
            clmhdr_day = 0;

            clmhdr_batch_nbr_3_6 = "";
            clmhdr_batch_nbr_7_9 = 0;

            clmhdr_claim_nbr = 0;

            //clmhdr_zeroed_oma_suff_adj_grp
            clmhdr_adj_oma_cd = "";
            clmhdr_adj_oma_suff = "";
            clmhdr_adj_adj_nbr = 0;

            clmhdr_batch_type = "";
            clmhdr_adj_cd_sub_type = "";
            clmhdr_adj_cd_sub_type_ss = 0;

            clmhdr_doc_nbr_ohip = 0;
            clmhdr_doc_spec_cd = 0;
            clmhdr_refer_doc_nbr = 0;
            clmhdr_diag_cd = 0;
            clmhdr_loc = "";
            clmhdr_hosp = "";
            clmhdr_payroll = "";
            clmhdr_agent_cd = 0;
            clmhdr_adj_cd = "";
            clmhdr_tape_submit_ind = "";
            clmhdr_i_o_pat_ind = "";
            //clmhdr_pat_ohip_id_or_chart 
            clmhdr_pat_key_type = "";
            clmhdr_pat_key_data_grp = "";
            clmhdr_pat_key_ohip = "";
            //clmhdr_pat_acronym_grp 
            clmhdr_pat_acronym6 = "";
            clmhdr_pat_acronym3 = "";
            clmhdr_reference = "";

            clmhdr_date_admit_yy = "";
            clmhdr_date_admit_yy_r_grp = "";
            clmhdr_date_admit_yy_12 = 0;
            clmhdr_date_admit_yy_34 = 0;
            clmhdr_date_admit_mm = 0;
            clmhdr_date_admit_dd_r = "";
            clmhdr_date_admit_dd = 0;
            clmhdr_date_admit_dd_r = "";
            clmhdr_date_admit_r = 0;
            clmhdr_doc_dept = 0;
            clmhdr_date_cash_tape_payment = "";
            clmhdr_curr_payment = 0;
            clmhdr_date_period_end_grp = "";
            clmhdr_period_end_yy = 0;
            clmhdr_period_end_mm = 0;
            clmhdr_period_end_dd = 0;
            clmhdr_cycle_nbr = 0;
            clmhdr_date_sys = "";
            clmhdr_amt_tech_billed = 0;
            clmhdr_amt_tech_paid = 0;
            clmhdr_tot_claim_ar_oma = 0;
            clmhdr_tot_claim_ar_ohip = 0;
            clmhdr_manual_and_tape_paymnts = 0;
            clmhdr_status_ohip = "";
            clmhdr_manual_review = "";
            clmhdr_submit_date_grp = "";
            clmhdr_submit_yy = 0;
            clmhdr_submit_mm = 0;
            clmhdr_submit_dd = 0;
            clmhdr_confidential_flag = "";
            clmhdr_serv_date = 0;
            clmhdr_elig_error = "";
            clmhdr_elig_status = "";
            clmhdr_serv_error = "";
            clmhdr_serv_status = "";
            clmhdr_orig_batch_id_grp = "";
            clmhdr_orig_batch_nbr_grp = "";
            clmhdr_orig_batch_nbr_1_2 = 0;
            clmhdr_orig_batch_nbr_4_9 = "";
            clmhdr_orig_batch_nbr_next_def_grp = "";
            clmhdr_orig_batch_nbr_4_6 = "";
            clmhdr_orig_batch_nbr_7_8 = 0;
            clmhdr_orig_batch_nbr_9 = 0;
            clmhdr_orig_claim_nbr = 0;
            clmhdr_orig_batch_id_r_grp = "";
            clmhdr_orig_complete_batch_nbr = "";
            clmhdr_b_key_type = "";
            clmhdr_b_data_grp = "";
            clmhdr_b_batch_num = "";
            clmhdr_b_clinic_nbr_1_2 = 0;
            clmhdr_b_doc_nbr = "";
            clmhdr_b_doc_nbr_r_grp = "";
            clmhdr_b_doc_nbr_2_4 = "";
            clmhdr_b_batch_number_grp = "";
            clmhdr_b_week = 0;
            clmhdr_b_day = 0;
            clmhdr_b_claim_nbr = 0;
            clmhdr_b_oma_cd = "";
            clmhdr_b_oma_suff = "";
            clmhdr_b_adj_nbr = "";
            clmhdr_b_data_r_grp = "";
            clmhdr_b_pat_id = "";
            // clmhdr_p_claims_mstr_grp
            clmhdr_p_key_type = "";
            clmhdr_p_data_grp = "";
            clmhdr_p_batch_nbr_grp = "";
            clmhdr_p_clinic_nbr_1_2 = 0;
            clmhdr_p_doc_nbr = "";
            clmhdr_p_week = 0;
            clmhdr_p_day = 0;
            clmhdr_p_claim_nbr = 0;
            clmhdr_p_oma_cd = "";
            clmhdr_p_oma_suff = "";
            clmhdr_p_adj_nbr = "";
        }

        private async Task initialize_clmdtl_record_screenVariables()
        {
            // Util.Trakker(++ctr, "Initialize_Clmdtl_Record_ScreenVariables");

            clmdtl_batch_nbr = "";
            clmdtl_claim_nbr = 0;
            clmdtl_oma_cd = "";
            clmdtl_oma_suff = "";
            clmdtl_adj_nbr = 0;
            clmdtl_rev_group_cd = "";
            clmdtl_agent_cd = 0;
            clmdtl_adj_cd = "";
            clmdtl_nbr_serv = 0;
            clmdtl_sv_date = "";
            clmdtl_sv_yy = 0;
            clmdtl_sv_mm = 0;
            clmdtl_sv_dd = 0;
            //clmdtl-consecutive-sv-date  occurs 3 times
            //15  clmdtl-consec-dates-r  redefines  clmdtl-consec-dates.
            //20  clmdtl-consecutive-dates    occurs 3 times.
            clmdtl_sv_nbr[1] = 0;
            clmdtl_sv_nbr[2] = 0;
            clmdtl_sv_nbr[3] = 0;
            clmdtl_sv_day[1] = "";
            clmdtl_sv_day[2] = "";
            clmdtl_sv_day[3] = "";
            clmdtl_amt_tech_billed = 0;
            clmdtl_fee_oma = 0;
            clmdtl_fee_ohip = 0;
            clmdtl_date_period_end = "";
            clmdtl_cycle_nbr = 0;
            clmdtl_diag_cd = 0;
            clmdtl_line_no = 0;
            clmdtl_resubmit_flag = "0";
            clmdtl_reserve_for_future = "";
            clmdtl_desc = "";
            clmdtl_filler = "";
            //clmdtl_orig_batch_id
            clmdtl_orig_batch_nbr = "";
            clmdtl_orig_batch_nbr_1_2 = 0;
            clmdtl_orig_batch_nbr_4_9 = "";
            clmdtl_orig_claim_nbr_in_batch = 0;
            clmdtl_b_key_type = "";
            clmdtl_b_batch_num = "";
            clmdtl_b_clinic_nbr_1_2 = 0;
            clmdtl_b_doc_nbr = "";
            clmdtl_b_doc_nbr_2_4 = "";
            clmdtl_b_week = 0;
            clmdtl_b_day = 0;
            clmdtl_b_claim_nbr = 0;
            clmdtl_b_oma_cd = "";
            clmdtl_b_oma_suff = "";
            clmdtl_b_adj_nbr = "";
            clmdtl_b_pat_id = "";

            clmdtl_p_key_type = "";
            clmdtl_p_data = "";
            clmdtl_p_batch_nbr = "";
            clmdtl_p_clinic_nbr_1_2 = 0;
            clmdtl_p_doc_nbr = "";
            clmdtl_p_week = 0;
            clmdtl_p_day = 0;
            clmdtl_p_claim_nbr = 0;
            clmdtl_p_oma_cd = "";
            clmdtl_p_oma_suff = "";
            clmdtl_p_adj_nbr = "";
        }

        private async Task initialize_ws_pat_mstr_rec()
        {
            // Util.Trakker(++ctr, "Initialize_ws_pat_mstr_Rec");

            ws_pat_mstr_rec_grp = "";
            ws_pat_acronym_grp = "";
            ws_pat_acronym_first6 = "";
            ws_pat_acronym_last3 = "";
            ws_pat_ohip_mmyy_grp = "";
            ws_pat_ohip_out_prov_grp = "";
            ws_pat_ohip_nbr = 0;
            ws_pat_ohip_nbr_r_alpha = "";
            ws_pat_ohip_nbr_MB_def_grp = "";
            ws_pat_ohip_nbr_MB = 0;
            //filler;
            ws_pat_ohip_nbr_NT_def_grp = "";
            ws_pat_ohip_nbr_NT_1_char = "";
            ws_pat_ohip_nbr_NT = 0;
            ws_pat_mm = 0;
            ws_pat_yy = 0;
            ws_pat_ohip_mmyy_r_grp = "";
            ws_pat_direct_alpha_grp = "";
            ws_pat_alpha1 = "";
            ws_pat_alpha2_3 = "";
            ws_pat_direct_yy = "";
            ws_pat_direct_mm = "";
            ws_pat_direct_dd = "";
            ws_pat_direct_filler = "";
            ws_pat_chart_nbr_grp = "";
            pat_chart_1st_char = "";
            pat_chart_remainder = "";
            ws_pat_chart_nbr_2_grp = "";
            pat_chart_1st_char_2 = "";
            pat_chart_remainder_2 = "";
            ws_pat_chart_nbr_3_grp = "";
            pat_chart_1st_char_3 = "";
            pat_chart_remainder_3 = "";
            ws_pat_chart_nbr_4_grp = "";
            pat_chart_1st_char_4 = "";
            pat_chart_remainder_4 = "";
            ws_pat_chart_nbr_5_grp = "";
            pat_chart_1st_char_5 = "";
            pat_chart_remainder_5 = "";
            ws_pat_surname = "";
            ws_pat_surname_r_grp = "";
            ws_pat_surname_first6 = "";
            ws_pat_surname_last19 = "";
            ws_pat_surname_rr_grp = "";
            ws_pat_surname_first3 = "";
            ws_pat_surname_last22 = "";
            ws_pat_given_name = "";
            ws_pat_given_name_r_grp = "";
            ws_pat_given_name_first3 = "";
            ws_pat_given_name_last14 = "";
            ws_pat_given_name_rr_grp = "";
            ws_pat_given_name_first1 = "";
            ws_pat_init_grp = "";
            ws_pat_init1 = "";
            ws_pat_init2 = "";
            ws_pat_init3 = "";
            ws_pat_location_field_grp = "";
            ws_pat_location_field_1_3 = "";
            ws_pat_last_doc_nbr_seen = "";
            ws_pat_birth_date = 0;
            ws_pat_birth_date_r_grp = "";
            ws_pat_birth_date_yy = 0;
            ws_pat_birth_date_yy_r_grp = "";
            ws_pat_birth_date_yy_12 = 0;
            ws_pat_birth_date_yy_34 = 0;
            ws_pat_birth_date_mm = 0;
            ws_pat_birth_date_dd = 0;
            ws_pat_date_last_maint = 0;
            ws_pat_date_last_maint_r_grp = "";
            ws_pat_date_last_maint_yy = 0;
            ws_pat_date_last_maint_mm = 0;
            ws_pat_date_last_maint_dd = 0;
            ws_pat_date_last_visit = 0;
            ws_pat_date_last_visit_r_grp = "";
            ws_pat_date_last_visit_yy = 0;
            ws_pat_date_last_visit_mm = 0;
            ws_pat_date_last_visit_dd = 0;
            ws_pat_date_last_admit = 0;
            ws_pat_date_last_admit_r_grp = "";
            ws_pat_date_last_admit_yy = 0;
            ws_pat_date_last_admit_mm = 0;
            ws_pat_date_last_admit_dd = 0;
            ws_pat_phone_nbr_grp = "";
            ws_pat_phone_nbr_first3 = 0;
            ws_pat_phone_nbr_last4 = 0;
            ws_pat_phone_nbr_remainder = "";
            ws_pat_total_nbr_visits = 0;
            ws_pat_total_nbr_claims = 0;
            ws_pat_sex = "";
            ws_pat_in_out = "";
            ws_pat_nbr_outstanding_claims = 0;
            ws_key_pat_mstr_grp = "";
            ws_pat_i_key = "";
            ws_pat_con_nbr = 0;
            ws_pat_i_nbr = 0;
            ws_pat_health_nbr = 0;
            ws_pat_version_cd_grp = "";
            ws_pat_version_cd_1 = "";
            ws_pat_version_cd_2 = "";
            ws_pat_health_65_ind = "";
            ws_pat_expiry_date_grp = "";
            ws_pat_expiry_yy = 0;
            ws_pat_expiry_mm = 0;
            ws_pat_prov_cd = "";
            ws_subscr_addr1 = "";
            ws_subscr_addr2 = "";
            ws_subscr_addr3 = "";
            ws_subscr_prov_cd = "";
            ws_subscr_postal_cd = "";
            ws_subscr_postal_cd_r_grp = "";
            ws_subscr_post_code1_grp = "";
            ws_subscr_post_cd1 = "";
            ws_subscr_post_cd2 = "";
            ws_subscr_post_cd3 = "";
            ws_subscr_post_code2_grp = "";
            ws_subscr_post_cd4 = "";
            ws_subscr_post_cd5 = "";
            ws_subscr_post_cd6 = "";
            ws_subscr_msg_data_grp = "";
            ws_subscr_msg_nbr = "";
            ws_subscr_dt_msg_no_eff_to = 0;
            ws_subscr_dt_msg_no_eff_to_r_grp = "";
            ws_subscr_dt_msg_no_eff_to_yy = 0;
            ws_subscr_dt_msg_no_eff_to_mm = 0;
            ws_subscr_dt_msg_no_eff_to_dd = 0;
            ws_subscr_dt_msg_no_eff_to_r1 = "";
            ws_subscr_date_last_statement = 0;
            ws_subscr_date_last_stmnt_r_grp = "";
            ws_subscr_date_last_stmnt_yy = 0;
            ws_subscr_date_last_stmnt_mm = 0;
            ws_subscr_date_last_stmnt_dd = 0;
            ws_subscr_auto_update = "";
            ws_pat_last_mod_by = "";
            ws_pat_date_last_elig_mailing = 0;
            ws_pat_date_last_elig_maint = 0;
            ws_pat_last_birth_date = 0;
            ws_pat_last_birth_date_r_grp = "";
            ws_pat_last_birth_date_yy = 0;
            ws_pat_last_birth_date_mm = 0;
            ws_pat_last_birth_date_dd = 0;
            ws_pat_last_version_cd = "";
            ws_pat_mess_code = "";
            ws_pat_country = "";
            ws_pat_no_of_letter_sent = 0;
            ws_pat_dialysis = "";
            ws_pat_ohip_validiation_status = "";
            ws_pat_obec_status = "";
        }

        #endregion

        #region "DetailRows"
        private async Task<bool> accept_oma_cd()
        {
            // Util.Trakker(++ctr, "accept_oma_cd");
          
            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_1");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_1;
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_2");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_2;
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_3");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_3;
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_4");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_4;
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_5");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_5;
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_6");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_6;
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_7");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_7;
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_8");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_8;
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_9");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_9;
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_date_yy[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(0, 4));
                    hold_sv_date_mm[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(4, 2));
                    hold_sv_date_dd[ss_clmdtl_oma] = Util.NumInt(Util.Str(hold_sv_date[ss_clmdtl_oma]).PadRight(8).Substring(6, 2));
                    await display_details_group(ss_clmdtl_oma);
                    await Prompt("hold_oma_cd_10");
                    hold_oma_cd[ss_clmdtl_oma] = hold_oma_cd_10;
                    break;
            }
            return true;
        }

        private async Task<bool> accept_oma_suff()
        {
            // Util.Trakker(++ctr, "accept_oma_suff");
          
            switch (ss_clmdtl_oma)
            {

                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_oma_suff_1");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_1;
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_oma_suff_2");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_2;
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_oma_suff_3");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_3;
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_oma_suff_4");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_4;
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_oma_suff_5");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_5;
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_oma_suff_6");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_6;
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_oma_suff_7");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_7;
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_oma_suff_8");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_8;
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_oma_suff_9");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_9;
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_oma_suff_10");
                    hold_oma_suff[ss_clmdtl_oma] = hold_oma_suff_10;
                    break;

            }

            return true;
        }

        private async Task<bool> accept_hold_diag()
        {
            // Util.Trakker(++ctr, "accept_hold_diag");
           
            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_diag_cd_1");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_1;
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_diag_cd_2");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_2;
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_diag_cd_3");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_3;
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_diag_cd_4");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_4;
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_diag_cd_5");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_5;
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_diag_cd_6");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_6;
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_diag_cd_7");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_7;
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_diag_cd_8");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_8;
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_diag_cd_9");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_9;
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_diag_cd_10");
                    hold_diag_cd[ss_clmdtl_oma] = hold_diag_cd_10;
                    break;
            }

            return true;
        }

        private async Task<bool> accept_hold_sv_date_yy_34()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_date_yy_34");
          
            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_date_yy_34_1");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_1;
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_sv_date_yy_34_2");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_2;
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_sv_date_yy_34_3");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_3;
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_date_yy_34_4");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_4;
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_date_yy_34_5");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_5;
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_sv_date_yy_34_6");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_6;
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_sv_date_yy_34_7");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_7;
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_sv_date_yy_34_8");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_8;
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_sv_date_yy_34_9");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_9;
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_date_yy_34_10");
                    hold_sv_date_yy_34[ss_clmdtl_oma] = hold_sv_date_yy_34_10;
                    break;

            }

            return true;
        }

        private async Task<bool> accept_hold_sv_date_mm()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_date_mm");
          
            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_date_mm_1");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_1;
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_sv_date_mm_2");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_2;
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_sv_date_mm_3");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_3;
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_date_mm_4");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_4;
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_date_mm_5");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_5;
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_sv_date_mm_6");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_6;
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_sv_date_mm_7");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_7;
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_sv_date_mm_8");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_8;
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_sv_date_mm_9");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_9;
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_date_mm_10");
                    hold_sv_date_mm[ss_clmdtl_oma] = hold_sv_date_mm_10;
                    break;

            }

            return true;
        }

        private async Task<bool> accept_hold_sv_date_dd()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_date_dd");
          
            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_date_dd_1");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_1;
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_sv_date_dd_2");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_2;
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_sv_date_dd_3");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_3;
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_date_dd_4");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_4;
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_date_dd_5");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_5;
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:

                    await Prompt("hold_sv_date_dd_6");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_6;
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:

                    await Prompt("hold_sv_date_dd_7");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_7;
                    break;

                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:

                    await Prompt("hold_sv_date_dd_8");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_8;
                    break;

                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:

                    await Prompt("hold_sv_date_dd_9");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_9;
                    break;

                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_date_dd_10");
                    hold_sv_date_dd[ss_clmdtl_oma] = hold_sv_date_dd_10;
                    break;

            }
            return true;
        }

        private async Task<bool> accept_hold_sv_nbr_serv()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_nbr_serv");
          
            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_nbr_serv_1");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_1;
                    break;

                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:

                    await Prompt("hold_sv_nbr_serv_2");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_2;
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:

                    await Prompt("hold_sv_nbr_serv_3");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_3;
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_nbr_serv_4");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_4;
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_nbr_serv_5");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_5;
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_sv_nbr_serv_6");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_6;
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_sv_nbr_serv_7");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_7;
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_sv_nbr_serv_8");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_8;
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_sv_nbr_serv_9");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_9;
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_nbr_serv_10");
                    hold_sv_nbr_serv[ss_clmdtl_oma] = hold_sv_nbr_serv_10;
                    break;

            }

            return true;
        }

        private async Task display_details_group(int row)
        {
            await display_details_group(row, row);
        }

        private async Task display_details_group(int row, int index)
        {
            await display_hold_oma_cd(row, index);
            await display_hold_oma_suff(row, index);
            await display_hold_sv_date_yy_12_1(row, index);
            await display_hold_sv_date_yy_34_1(row, index);
            await display_hold_sv_date_mm(row, index);
            await display_hold_sv_date_dd(row, index);
            await display_hold_sv_nbr(row, index);
            await display_diag_cd(row, index);
            await display_hold_sv_day1(row, index);
            await display_sv_nbr1(row, index);
            await display_hold_sv_day2(row, index);
            await display_hold_sv_nbr2(row, index);
            await display_hold_sv_day3(row, index);
            await display_hold_sv_nbr3(row, index);
            await display_hold_fee_oma(row, index);
            await display_hold_fee_ohip(row, index);
            await display_hold_icc_cd(row, index);
            await display_hold_flag_sec_group(row, index);
        }

        private async Task<bool> display_hold_oma_cd(int row)
        {
            await display_hold_oma_cd(row, row);
            return true;
        }

        private async Task<bool> display_hold_oma_cd(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_oma_cd");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_oma_cd_1 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_oma_cd_2 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_oma_cd_3 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_oma_cd_4 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_oma_cd_5 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_oma_cd_6 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_oma_cd_7 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_oma_cd_8 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_oma_cd_9 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_oma_cd_10 = Util.Str(hold_oma_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-cd10");
                    break;
            }
            return true;
        }

        private async Task<bool> display_hold_oma_suff(int row)
        {
            await display_hold_oma_suff(row, row);
            return true;
        }

        private async Task<bool> display_hold_oma_suff(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_oma_suff");

            switch (row)  //(ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_oma_suff_1 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_oma_suff_2 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_oma_suff_3 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_oma_suff_4 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_oma_suff_5 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_oma_suff_6 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_oma_suff_7 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_oma_suff_8 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_oma_suff_9 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_oma_suff_10 = Util.Str(hold_oma_suff[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-oma-suff10");
                    break;
            }
            return true;
        }

        private async Task<bool> display_hold_sv_date_yy_12_1(int row)
        {
            await display_hold_sv_date_yy_12_1(row, row);
            return true;
        }

        private async Task<bool> display_hold_sv_date_yy_12_1(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_sv_date_yy_12_1");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_date_yy_12_1 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-1");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_date_yy_12_2 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-2");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_date_yy_12_3 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-3");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_date_yy_12_4 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-4");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_date_yy_12_5 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-5");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_date_yy_12_6 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-6");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_date_yy_12_7 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-7");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_date_yy_12_8 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-8");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_date_yy_12_9 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-9");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_date_yy_12_10 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(0, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-12-10");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det10");
                    break;
            }
            return true;
        }

        private async Task<bool> display_hold_sv_date_yy_34_1(int row)
        {
            await display_hold_sv_date_yy_34_1(row, row);
            return true;
        }

        private async Task<bool> display_hold_sv_date_yy_34_1(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_sv_date_yy_34_1");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_date_yy_34_1 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_date_yy_34_2 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_date_yy_34_3 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_date_yy_34_4 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_date_yy_34_5 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_date_yy_34_6 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_date_yy_34_7 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_date_yy_34_8 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_date_yy_34_9 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_date_yy_34_10 = Util.NumInt(Util.Str(hold_sv_date_yy[index]).PadLeft(4, '0').Substring(2, 2));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-yy-34-10");
                    break;
            }
            return true;
        }

        private async Task<bool> display_hold_sv_date_mm(int row)
        {
            await display_hold_sv_date_mm(row, row);
            return true;
        }

        private async Task<bool> display_hold_sv_date_mm(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_sv_date_mm");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_date_mm_1 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm1");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_date_mm_2 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm2");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_date_mm_3 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm3");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_date_mm_4 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm4");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_date_mm_5 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm5");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_date_mm_6 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm6");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_date_mm_7 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm7");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_date_mm_8 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm8");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_date_mm_9 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm9");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_date_mm_10 = Util.NumInt(Util.Str(hold_sv_date_mm[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-mm10");
                    Display("scr-acpt-clmhdr-det.", "scr-acpt-clmhdr-det-10");
                    break;
            }
            return true;
        }

        private async Task<bool> display_hold_sv_date_dd(int row)
        {
            await display_hold_sv_date_dd(row, row);
            return true;
        }

        private async Task<bool> display_hold_sv_date_dd(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_sv_date_dd");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_date_dd_1 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-11");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_date_dd_2 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-22");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_date_dd_3 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-33");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_date_dd_4 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-44");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_date_dd_5 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-55");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_date_dd_6 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-66");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_date_dd_7 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-77");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_date_dd_8 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-88");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_date_dd_9 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-99");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_date_dd_10 = Util.NumInt(Util.Str(hold_sv_date_dd[index]).PadLeft(2, '0'));
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-date-dd-100");
                    break;
            }
            return true;
        }

        private async Task display_hold_sv_nbr(int row)
        {
            await display_hold_sv_nbr(row, row);
        }

        private async Task display_hold_sv_nbr(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hod_sv_nbr");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_nbr_serv_1 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-01");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_nbr_serv_2 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-02");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_nbr_serv_3 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-03");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_nbr_serv_4 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-04");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_nbr_serv_5 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-05");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_nbr_serv_6 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-06");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_nbr_serv_7 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-07");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_nbr_serv_8 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-08");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_nbr_serv_9 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-09");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_nbr_serv_10 = hold_sv_nbr_serv[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-010");
                    break;
            }
        }

        private async Task display_diag_cd(int row)
        {
            await display_diag_cd(row, row);
        }

        private async Task display_diag_cd(int row, int index)
        {
            // Util.Trakker(++ctr, "display_diag_cd");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_diag_cd_1 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_diag_cd_2 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_diag_cd_3 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_diag_cd_4 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_diag_cd_5 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_diag_cd_6 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_diag_cd_7 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_diag_cd_8 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_diag_cd_9 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_diag_cd_10 = Util.NumInt(hold_diag_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-diag-cd10");
                    break;
            }
        }

        private async Task display_hold_sv_day1(int row)
        {
            await display_hold_sv_day1(row, row);
        }
        private async Task display_hold_sv_day1(int row, int index)
        {

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_day_1_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_day_2_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_day_3_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_day_4_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_day_5_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_day_6_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_day_7_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_day_8_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_day_9_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_day_10_1 = Util.Str(hold_sv_day[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-10");
                    break;
            }
        }

        private async Task display_sv_nbr1(int row)
        {
            await display_sv_nbr1(row, row);
        }

        private async Task<bool> display_sv_nbr1(int row, int index)
        {
            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_nbr_1_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_nbr_2_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_nbr_3_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_nbr_4_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_nbr_5_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_nbr_6_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_nbr_7_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_nbr_8_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_nbr_9_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_nbr_10_1 = Util.NumInt(hold_sv_nbr[index, 1]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-10");
                    break;
            }
            return true;
        }

        private async Task display_hold_sv_day2(int row)
        {
            await display_hold_sv_day2(row, row);
        }
        private async Task<bool> display_hold_sv_day2(int row, int index)
        {
            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_day_1_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_day_2_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_day_3_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_day_4_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_day_5_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_day_6_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_day_7_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_day_8_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_day_9_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_day_10_2 = Util.NumInt(hold_sv_day[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-2-10");
                    break;
            }
            return true;
        }

        private async Task display_hold_sv_nbr2(int row)
        {
            await display_hold_sv_nbr2(row, row);
        }

        private async Task display_hold_sv_nbr2(int row, int index)
        {
            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_nbr_1_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_nbr_2_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_nbr_3_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_nbr_4_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_nbr_5_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_nbr_6_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_nbr_7_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_nbr_8_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_nbr_9_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_nbr_10_2 = Util.NumInt(hold_sv_nbr[index, 2]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-2-10");
                    break;
            }
        }

        private async Task display_hold_sv_day3(int row)
        {
            await display_hold_sv_day3(row, row);
        }
        private async Task display_hold_sv_day3(int row, int index)
        {
            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_day_1_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_day_2_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_day_3_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_day_4_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_day_5_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_day_6_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_day_7_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_day_8_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_day_9_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_day_10_3 = Util.NumInt(hold_sv_day[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-day-3-10");
                    break;
            }
        }

        private async Task display_hold_sv_nbr3(int row)
        {
            await display_hold_sv_nbr3(row, row);
        }

        private async Task<bool> display_hold_sv_nbr3(int row, int index)
        {
            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_sv_nbr_1_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_sv_nbr_2_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_sv_nbr_3_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_sv_nbr_4_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_sv_nbr_5_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_sv_nbr_6_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_sv_nbr_7_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_sv_nbr_8_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_sv_nbr_9_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_sv_nbr_10_3 = Util.NumInt(hold_sv_nbr[index, 3]);
                    Display("scr-acpt-clmhdr-det.", "scr-hold-sv-nbr-3-10");
                    break;
            }
            return true;
        }

        private async Task<bool> display_hold_fee_oma(int row)
        {
            await display_hold_fee_oma(row, row);
            return true;
        }

        private async Task<bool> display_hold_fee_oma(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_fee_oma");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_fee_oma_1 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_fee_oma_2 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_fee_oma_3 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_fee_oma_4 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_fee_oma_5 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_fee_oma_6 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_fee_oma_7 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_fee_oma_8 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_fee_oma_9 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_fee_oma_10 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-oma10");
                    break;
            }
            return true;
        }

        private async Task<bool> display_hold_fee_ohip(int row)
        {
            await display_hold_fee_ohip(row, row);
            return true;
        }

        private async Task<bool> display_hold_fee_ohip(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_fee_ohip");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_fee_ohip_1 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_fee_ohip_2 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_fee_ohip_3 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_fee_ohip_4 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_fee_ohip_5 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_fee_ohip_6 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_fee_ohip_7 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_fee_ohip_8 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_fee_ohip_9 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_fee_ohip_10 = hold_fee_oma[index];
                    Display("scr-acpt-clmhdr-det.", "scr-hold-fee-ohip10");
                    break;
            }
            return true;
        }

        private async Task<bool> display_hold_icc_cd(int row)
        {
            await display_hold_icc_cd(row, row);
            return true;
        }

        private async Task<bool> display_hold_icc_cd(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_icc_cd");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_icc_cd_1 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_icc_cd_2 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_icc_cd_3 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_icc_cd_4 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_icc_cd_5 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_icc_cd_6 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_icc_cd_7 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_icc_cd_8 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_icc_cd_9 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_icc_cd_10 = Util.Str(hold_icc_cd[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-icc-cd10");
                    break;
            }
            return true;
        }

        private async Task<bool> display_hold_flag_sec_group(int row)
        {
            await display_hold_flag_sec_group(row, row);
            return true;
        }

        private async Task<bool> display_hold_flag_sec_group(int row, int index)
        {
            // Util.Trakker(++ctr, "display_hold_flag_sec_group");

            switch (row)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    hold_flag_sec_group_1 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp1");
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    hold_flag_sec_group_2 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp2");
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    hold_flag_sec_group_3 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp3");
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    hold_flag_sec_group_4 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp4");
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    hold_flag_sec_group_5 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp5");
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    hold_flag_sec_group_6 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp6");
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    hold_flag_sec_group_7 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp7");
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    hold_flag_sec_group_8 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp8");
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    hold_flag_sec_group_9 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp9");
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    hold_flag_sec_group_10 = Util.NumInt(hold_flag_sec_group[index]);
                    Display("scr-acpt-clmhdr-det.", "scr-sec-grp10");
                    break;
            }
            return true;
        }

        private async Task<bool> accept_hold_sv_day1()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_day1");
           
            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_day_1_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_1_1);
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_sv_day_2_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_2_1);
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_sv_day_3_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_3_1);
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_day_4_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_4_1);
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_day_5_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_5_1);
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_sv_day_6_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_6_1);
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_sv_day_7_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_7_1);
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_sv_day_8_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_8_1);
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_sv_day_9_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_9_1);
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_day_10_1");
                    hold_sv_day[ss_clmdtl_oma, 1] = Util.Str(hold_sv_day_10_1);
                    break;
            }
            return true;
        }

        private async Task<bool> accept_hold_sv_day2()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_day2");

            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_day_1_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_1_2);
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_sv_day_2_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_2_2);
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_sv_day_3_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_3_2);
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_day_4_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_4_2);
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_day_5_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_5_2);
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_sv_day_6_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_6_2);
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_sv_day_7_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_7_2);
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_sv_day_8_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_8_2);
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_sv_day_9_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_9_2);
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_day_10_2");
                    hold_sv_day[ss_clmdtl_oma, 2] = Util.Str(hold_sv_day_10_2);
                    break;
            }
            return true;
        }

        private async Task<bool> accept_hold_sv_day3()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_day3");

            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_day_1_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_1_3.ToString());
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_sv_day_2_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_2_3.ToString());
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_sv_day_3_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_3_3.ToString());
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_day_4_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_4_3.ToString());
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_day_5_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_5_3.ToString());
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_sv_day_6_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_6_3.ToString());
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_sv_day_7_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_7_3.ToString());
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_sv_day_8_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_8_3.ToString());
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_sv_day_9_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_9_3.ToString());
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_day_10_3");
                    hold_sv_day[ss_clmdtl_oma, 3] = Util.Str(hold_sv_day_10_3.ToString());
                    break;
            }
            return true;
        }

        private async Task<bool> accept_hold_oma_fee()
        {
            // Util.Trakker(++ctr, "accept_hold_oma_fee");

            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_fee_oma_1");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_1;
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_fee_oma_2");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_2;
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_fee_oma_3");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_3;
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_fee_oma_4");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_4;
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_fee_oma_5");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_5;
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_fee_oma_6");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_6;
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_fee_oma_7");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_7;
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_fee_oma_8");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_8;
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_fee_oma_9");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_9;
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_fee_oma_10");
                    hold_fee_oma[ss_clmdtl_oma] = hold_fee_oma_10;
                    break;
            }
            return true;
        }

        private async Task accept_hold_sv_nbr()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_nbr");

            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_nbr_1_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_1_1;
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_sv_nbr_2_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_2_1;
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_sv_nbr_3_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_3_1;
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_nbr_4_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_4_1;
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_nbr_5_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_5_1;
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_sv_nbr_6_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_6_1;
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_sv_nbr_7_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_7_1;
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_sv_nbr_8_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_8_1;
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_sv_nbr_9_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_9_1;
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_nbr_10_1");
                    hold_sv_nbr[ss_clmdtl_oma, 1] = hold_sv_nbr_10_1;
                    break;
            }

        }



        private async Task accept_hold_sv_nbr2()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_nbr2");

            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_nbr_1_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_1_2);
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_sv_nbr_2_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_2_2);
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_sv_nbr_3_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_3_2);
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_nbr_4_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_4_2);
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_nbr_5_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_5_2);
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_sv_nbr_6_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_6_2);
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_sv_nbr_7_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_7_2);
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_sv_nbr_8_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_8_2);
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_sv_nbr_9_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_9_2);
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_nbr_10_2");
                    hold_sv_nbr[ss_clmdtl_oma, 2] = Util.NumInt(hold_sv_nbr_10_2);
                    break;
            }

        }


        private async Task accept_hold_sv_nbr3()
        {
            // Util.Trakker(++ctr, "accept_hold_sv_nbr3");

            switch (ss_clmdtl_oma)
            {
                case 1:
                case 11:
                case 21:
                case 31:
                case 41:
                case 51:
                case 61:
                case 81:
                case 91:
                    await Prompt("hold_sv_nbr_1_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_1_3);
                    break;
                case 2:
                case 12:
                case 22:
                case 32:
                case 42:
                case 52:
                case 62:
                case 72:
                case 82:
                case 92:
                    await Prompt("hold_sv_nbr_2_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_2_3);
                    break;
                case 3:
                case 13:
                case 23:
                case 33:
                case 43:
                case 53:
                case 63:
                case 73:
                case 83:
                case 93:
                    await Prompt("hold_sv_nbr_3_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_3_3);
                    break;
                case 4:
                case 14:
                case 24:
                case 34:
                case 44:
                case 54:
                case 64:
                case 74:
                case 84:
                case 94:
                    await Prompt("hold_sv_nbr_4_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_4_3);
                    break;
                case 5:
                case 15:
                case 25:
                case 35:
                case 45:
                case 55:
                case 65:
                case 75:
                case 85:
                case 95:
                    await Prompt("hold_sv_nbr_5_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_5_3);
                    break;
                case 6:
                case 16:
                case 26:
                case 36:
                case 46:
                case 56:
                case 66:
                case 76:
                case 86:
                case 96:
                    await Prompt("hold_sv_nbr_6_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_6_3);
                    break;
                case 7:
                case 17:
                case 27:
                case 37:
                case 47:
                case 57:
                case 67:
                case 77:
                case 87:
                case 97:
                    await Prompt("hold_sv_nbr_7_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_7_3);
                    break;
                case 8:
                case 18:
                case 28:
                case 38:
                case 48:
                case 58:
                case 68:
                case 78:
                case 88:
                case 98:
                    await Prompt("hold_sv_nbr_8_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_8_3);
                    break;
                case 9:
                case 19:
                case 29:
                case 39:
                case 49:
                case 59:
                case 69:
                case 79:
                case 89:
                case 99:
                    await Prompt("hold_sv_nbr_9_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_9_3);
                    break;
                case 10:
                case 20:
                case 30:
                case 40:
                case 50:
                case 60:
                case 70:
                case 80:
                case 90:
                case 100:
                    await Prompt("hold_sv_nbr_10_3");
                    hold_sv_nbr[ss_clmdtl_oma, 3] = Util.NumInt(hold_sv_nbr_10_3);
                    break;
            }

        }


        #endregion

        

        private async Task Exit_Trakker()
        {
            if (IsExitForm) await mainline_shutdown();
        }

        public async Task destroy_objects()
        {

            objD001_batch_in_progress_rec = null;
            D001_batch_in_progress_rec_Collection = null;
            objBatctrl_rec = null;
            Batctrl_rec_Collection = null;
            objClaims_mstr_rec = null;
            Claims_mstr_rec_Collection = null;
            objClaims_mstr_hdr_rec = null;
            Claims_mstr_hdr_rec_Collection = null;
            objClaims_mstr_dtl_rec = null;
            Claims_mstr_dtl_rec_Collection = null;
            objF002_CLAIMS_MSTR_DTL_DESC = null;
            objPat_mstr_rec = null;
            Pat_mstr_rec_Collection = null;
            objDoc_mstr_rec = null;
            Doc_mstr_rec_Collection = null;
            objLoc_mstr_rec = null;
            Loc_mstr_rec_Collection = null;
            objFee_mstr_rec = null;
            Fee_mstr_rec_Collection = null;
            objIconst_mstr_rec = null;
            Iconst_mstr_rec_Collection = null;
            objConstants_mstr_rec_2 = null;
            Constants_mstr_rec_2_Collection = null;
            objDiag_rec = null;
            Diag_rec_Collection = null;
            objPat_id_rec = null;
            objF011_pat_mstr_elig_history_rec = null;
            F011_pat_mstr_elig_history_rec_Collection = null;
            objRejected_claims_rec = null;
            Rejected_claims_rec_Collection = null;
            objMsg_sub_mstr_rec = null;
            Msg_sub_mstr_rec_Collection = null;
            objSli_oma_code_suff_rec = null;
            Sli_oma_code_suff_rec_Collection = null;
        }
    }
}







