/alpha/rmabill/rmabill101/dvlp/moira
Tue Aug 12 11:53:06 EDT 2014
 + + + Sourced in /alpha/rmabill/rmabill101/dvlp/moira + + +
;Compiling program [/alpha/rmabill/rmabill101/dvlp/moira/d112a.qks]
Q D E S I G N   (7.33.E)
Copyright 1996 COGNOS INCORPORATED
Licensed PH-DEVELOPMENT for customer: 0057360001 DYAD Systems Inc. UNIX

> ;#> PROGRAM-ID.     D112A.QKS
> ;
> ;       ((C)) Dyad Technologies
> ;
> ;    PURPOSE: Query/modifications to Physician PAYCODES / REVENUES
> ;
> ;    MODIFICATION HISTORY
> ;        DATE    SAF #  WHO      DESCRIPTION
> ;     96/JAN/19  ____   M.C.     - original (CLONE FROM D112.QKS)
> ;   1999/Jan/20		S.B.	 - Fixed size and alignments for Y2K.
> ;   1999/Apr/20		S.B.	 - Altered t-yy-ep, t-yy-retro, and
> ;                                  t-yy-fiscal to use century.
> ;   1999/Jun/07 	S.B.     - Altered the call to scrtitle.use and
> ;                         	   stdhilite.use to be called from $use
> ;                         	   instead of src.
> ;                       	 - Removed the call to secfile.use because
> ;                       	   it was not doing anything.
> ; 2003/nov/10 b.e.      - alpha doctor nbr
> ; 2006/apr/17 b.e.	- allow ceiling/revenue figures to be $1M
> ; 2006/nov/26 b.e. 	- re-calculate monthly amount doc-ceireq when
> ;			  yearly doc-ytdreq is adjusted
> ; 2006/nov/28 M.C. 	- Brad requested to allow user to 'E'nter or 'A'ppend
> ;			  the transaction and automatically add 91 screen (d112)
> ;			  last ep nbr info in the background at preupdate procedure
> ; 2014/aug/12 MC1       - add f112-pycdceilings-audit to capture before change records
> ;                       - save f112-pycdceilings records in f112-pycdceilings-audit in postfind in case
> ;                         user may change the records
> 
> can clear
> set default
> 
> screen $pb_obj/d112a    on line 7 for 17 message on line 24                    &
> ; 2006/11/28 - MC
> ;	activities find, change         			       &
> ; 2006/11/28 - end
>         receiving w-doc-nbr,                                           &
>                   constants-mstr-rec-6, f020-doctor-mstr
> 
> 
> temp w-doc-nbr char*3
> temp t-yy-ep char*4
> temp t-yy-fiscal char*4
> temp t-yy-retro char*4
> temp t-adjustment
> temp t-counter-recs-f112
> temp t-last-revenue-req
> temp t-last-revenue-tar
> temp h-doc-yrly-reqrev
> temp h-doc-yrly-tarrev
> temp h-retro-to-ep-nbr-req
> temp h-retro-to-ep-nbr-tar
> temp h-current-occurence
> temp h-current-ep
> temp h-revenue-type char*3
> temp t-doc-yrly-revenue-comp1
> temp t-doc-yrly-revenue-comp2
> temp t-doc-yrly-revenue-err
> temp t-doc-yrly-reqrev-computed
> temp t-doc-yrly-tarrev-computed
> temp t-yearly-revenue
> temp t-revenue-computed
> temp t-retro-to-flag char*1
> temp t-last-ep-nbr
> 
> 
> description of screen                                                    &
> "                                                                      " &
> "       This screen allows a User to query/modify Earnings Period      " &
> "       transactions that specify a doctor's PAY CODE, PAY SUB CODE,   " &
> "       REQUIRED and TARGET REVENUE.                                   " &
> "       Entry of and modification to any transaction can be performed  " &
> "       only for CURRENT or FUTURE Earning Periods.                    " &
> "       Also allows RETROACTIVE changes to REQUIRE & TARGET revenue.  " &
> "                                                                      "
> 
> temp t-silent-revenue
> 
> file  f112-pycdceilings primary  occurs 13
>         access viaindex pycdceilings using w-doc-nbr
> 
> file f020-doctor-mstr     master
> file constants-mstr-rec-6 designer
> 
> file f191-earnings-period reference
>      access viaindex ep-nbr using ep-nbr of f112-pycdceilings
> 
> file f020-doctor-extra    designer
> 
> ; 2006/11/28 - MC
> file f112-pycdceilings alias f112-designer designer open 1
>      access viaindex pycdceilings using w-doc-nbr, ep-nbr of f112-pycdceilings - 1
> ; 2006/11/28 - end
> 
> ; MC1
> ;file f112-pycdceilings-audit audit with f112-pycdceilings
> file f112-pycdceilings-audit designer  occurs with f112-pycdceilings
> ;   item last-mod-date final sysdate
> ;   item last-mod-time final systime / 10000
> ;   item last-mod-user-id final logonid + ' - d112'
> ; MC1 - end
> 
> ;MC1
> use $use/savef112audit_var.use
> temp a-doc-nbr				char*3                  occurs with f112-pycdceilings
> temp a-ep-nbr				zoned*6 unsigned        occurs with f112-pycdceilings
> temp a-factor				zoned*6 unsigned        occurs with f112-pycdceilings
> temp a-doc-pay-code			char*1                  occurs with f112-pycdceilings
> temp a-doc-pay-sub-code			char*1                  occurs with f112-pycdceilings
> temp a-retro-to-ep-nbr			zoned*6 unsigned        occurs with f112-pycdceilings
> temp a-doc-yrly-ceiling			zoned*7 numeric         occurs with f112-pycdceilings
> temp a-doc-yrly-ceiling-adjusted	zoned*7 numeric         occurs with f112-pycdceilings
> temp a-doc-yrly-ceiling-computed	zoned*9 numeric         occurs with f112-pycdceilings
> temp a-doc-yrly-expense			zoned*7 numeric         occurs with f112-pycdceilings
> temp a-doc-yrly-expense-adjusted	zoned*7 numeric         occurs with f112-pycdceilings
> temp a-doc-yrly-expense-computed	zoned*9 numeric         occurs with f112-pycdceilings
> temp a-doc-yrly-expn-alloc-pers		zoned*2 unsigned        occurs with f112-pycdceilings
> temp a-doc-yrly-ceil-guar		zoned*9 numeric         occurs with f112-pycdceilings
> temp a-doc-yrly-ceiling-guar-perc	zoned*3 numeric         occurs with f112-pycdceilings
> temp a-doc-rma-expense-percent-reg	integer unsigned size 4 occurs with f112-pycdceilings
> temp a-doc-rma-expense-percent-misc	integer unsigned size 4 occurs with f112-pycdceilings
> temp a-doc-dept-expense-percent-reg	integer unsigned size 4 occurs with f112-pycdceilings
> temp a-doc-dept-expense-percent-misc	integer unsigned size 4 occurs with f112-pycdceilings
> temp a-doc-yrly-reqrev			integer unsigned size 4 occurs with f112-pycdceilings
> temp a-doc-yrly-reqrev-adjusted		integer unsigned size 4 occurs with f112-pycdceilings
> temp a-doc-yrly-reqrev-computed		zoned*9 numeric         occurs with f112-pycdceilings
> temp a-doc-yrly-tarrev			integer unsigned size 4 occurs with f112-pycdceilings
> temp a-doc-yrly-tarrev-adjusted		integer unsigned size 4 occurs with f112-pycdceilings
> temp a-doc-yrly-tarrev-computed		integer unsigned size 5 occurs with f112-pycdceilings
> temp a-retro-to-ep-nbr-req		zoned*6 unsigned  	occurs with f112-pycdceilings
> temp a-retro-to-ep-nbr-tar		zoned*6 unsigned  	occurs with f112-pycdceilings
> 
> 
> ;MC1 - end
> 
> define x-screen-name char*55 = "PAY CODES, REQUIRE/TARGET REVENUE"
> use $use/scrtitle.use  nol nod
> 
> use $use/stdhilite.use nol nod
> 
> skip to 2
> skip
> title &
> "   E/P    BILLING   PAY     ---REVENUES----   RETRO     ---REVENUES----   RETRO" &
>         at ,1
> skip
> title &
> "   Nbr      PED     CODE    REQUIRE/ORIGINL    TO       TARGET /ORIGINL    TO  " &
>          at ,1
> skip
> 
> cluster occurs with f112-pycdceilings
> align (1,,4) (,,11) (,,22)(,,23) (,,29) (,,37) (,,47) (,,57) (,,65) (,,74)
> 
> ;field ep-nbr            of f112-pycdceilings display
> field ep-nbr            of f112-pycdceilings required		&
>                         lookup on f191-earnings-period  	&
>                         message "Invalid Earnings Period.^G"
> field iconst-date-period-end of f191-earnings-period display
> ;field doc-pay-code      of f112-pycdceilings display
> ;field doc-pay-sub-code  of f112-pycdceilings display
> field doc-pay-code      of f112-pycdceilings auto
> field doc-pay-sub-code  of f112-pycdceilings auto       &
>         required if    doc-pay-code = "1"               &
>                     or doc-pay-code = "4"
> field doc-yrly-reqrev   of f112-pycdceilings pic "^^^^^^^"
> field doc-yrly-reqrev-adjusted of f112-pycdceilings display pic "^^^^^^^"
> field retro-to-ep-nbr-req      of f112-pycdceilings		&
>                         lookup on f191-earnings-period          &
>                         message "Error - Invalide Earnings Period."
> field doc-yrly-tarrev   of f112-pycdceilings pic "^^^^^^^"
> field doc-yrly-tarrev-adjusted   of f112-pycdceilings    display pic "^^^^^^^"
> field retro-to-ep-nbr-tar of f112-pycdceilings            	&
>                         lookup on f191-earnings-period  	&
>                         message "Error - Invalid Earnings Period."
> field t-silent-revenue silent
> cluster
> 
> procedure process ep-nbr
> begin
>   let doc-nbr of f112-pycdceilings = w-doc-nbr
>   display iconst-date-period-end of f191-earnings-period
> end
> 
> 
> procedure internal calc-final-computed-revenue
> begin
>    let t-doc-yrly-revenue-comp1 =                               &
>        t-revenue-computed                                       &
>      + (round(t-yearly-revenue / 12                             &
>           )                                                     &
>         * (  12                                                 &
>             - t-counter-recs-f112                               &
>             + t-adjustment                                      &
>           )                                                     &
>        )
> 
> ;  (If extending this EP's REVENUE until the end of the year
> ;   gives a Computed Annual REVENUE with "unit" dollars round up/down
> ;   to nearest ten)
> 
>    let t-doc-yrly-revenue-comp2 = mod(t-doc-yrly-revenue-comp1,100)
>    if t-doc-yrly-revenue-comp2 >= 50
>    then
>      let t-doc-yrly-revenue-err =  1
>    else
>      let t-doc-yrly-revenue-err =  0
> ;  (Extract the Dollar value only for the computed REVENUE)
>    let t-revenue-computed = (floor(t-doc-yrly-revenue-comp1 / 100)  + t-doc-yrly-revenue-err) * 100
> 
> end
> 
> 
> procedure internal build-computed-revenue
> begin
>    let t-doc-yrly-revenue-comp1                                 &
>        = t-revenue-computed + round(t-yearly-revenue / 12)
> 
> ;  (if the "pennies" portion of the COMPUTED ANNUAL REVENUE is more than
> ;   50 cents THEN assume it falls just short of even dollar amount - add
> ;   penny to EP REVENUE - otherwise assume it falls just over the dollar
> ;   amount and no compensation is required)
> 
>    let t-doc-yrly-revenue-comp2 = mod(t-doc-yrly-revenue-comp1,100)
>    if t-doc-yrly-revenue-comp2 >= 50
>    then
>      let t-doc-yrly-revenue-err =  1
>    else
>      let t-doc-yrly-revenue-err =  0
>    let t-revenue-computed                                    &
>                    = (t-doc-yrly-revenue-comp1               &
>                     + t-doc-yrly-revenue-err)
> 
> end
> 
> procedure internal finish-comp-revenue-to-yearend
> begin
> ;  (Finish calculation of Computed REQUIRE REVENUE thru to end of Fiscal Period)
> ;  (take dollar value and change to dollars and cents)
>    if   t-retro-to-flag = "R"  &
>      or t-retro-to-flag = "B"
>    then
>    begin
>       let t-yearly-revenue   = t-last-revenue-req
>       let t-revenue-computed = t-doc-yrly-reqrev-computed
>       let h-revenue-type = "REQ"
>       do calc-final-computed-revenue
>       let doc-yrly-require-revenue  of f020-doctor-extra =       &
> 		t-revenue-computed
> ;     (2006/nov/25 b.e. - re-calculate monthly amt after above yrly changed)
>       let doc-ceireq of f020-doctor-extra  			&
> 	 = round(doc-yrly-require-revenue  of f020-doctor-extra / 12)
> 
>    end
> ;  (Finish calculation of Computed TARGET REVENUE thru to end of Fiscal Period)
>    if   t-retro-to-flag = "T"  &
>      or t-retro-to-flag = "B"
>    then
>    begin
>       let t-yearly-revenue   = t-last-revenue-tar
>       let t-revenue-computed = t-doc-yrly-tarrev-computed
>       let h-revenue-type = "TAR"
>       do calc-final-computed-revenue
>       let doc-yrly-target-revenue of f020-doctor-extra		&
> 	= t-revenue-computed
> ;     (2006/nov/25 b.e. - re-calculate monthly amt after above yrly changed)
>       let doc-ceitar 	          of f020-doctor-extra		&
> 	= round(doc-yrly-target-revenue  of f020-doctor-extra / 12)
>    end
> end
> 
> 
> procedure internal retro-revenue
> begin
> 
> ;  (reset Computed REVENUEs which will be re-calculated by this routine)
>    if   t-retro-to-flag = "R" &
>      or t-retro-to-flag = "B"
>    then let doc-yrly-require-revenue  of f020-doctor-extra = 0
>    if   t-retro-to-flag = "T" &
>      or t-retro-to-flag = "B"
>    then let doc-yrly-target-revenue  of f020-doctor-extra = 0
> 
>    let t-doc-yrly-reqrev-computed = 0
>    let t-doc-yrly-tarrev-computed = 0
> 
>    for f112-pycdceilings
>    begin
> ;     (Save the month of the current EP nbr)
>       if ep-nbr of f112-pycdceilings <> 0
>       then let t-counter-recs-f112 = mod(ep-nbr of f112-pycdceilings,100)
> ;     (If this occurence of F112 falls within RETRO-TO range, then adjust REVENUEs)
>       if   (ep-nbr     >= h-retro-to-ep-nbr-req or ep-nbr >= h-retro-to-ep-nbr-tar) &
>         and occurrence <  h-current-occurence     &
>         and t-counter-recs-f112 <= 12             ; (allow only 12 REVENUE calcs)
>       then
>       begin
>          if   t-retro-to-flag = "R"  &
>            or t-retro-to-flag = "B"
>          then
>          begin
>             let doc-yrly-reqrev-adjusted = doc-yrly-reqrev
>             let doc-yrly-reqrev          = h-doc-yrly-reqrev
>             display  doc-yrly-reqrev
>             display  doc-yrly-reqrev-adjusted
>          end
>          if   t-retro-to-flag = "T"  &
>            or t-retro-to-flag = "B"
>          then
>          begin
>             let     doc-yrly-tarrev-adjusted = doc-yrly-tarrev
>             let     doc-yrly-tarrev          = h-doc-yrly-tarrev
>             display doc-yrly-tarrev
>             display doc-yrly-tarrev-adjusted
>          end
>       end
> ;     (re-calculate both Computed REVENUEs using new REVENUEs. The calculation
> ;      runs from the first EP of year to the "current EP - 1". The current EP
> ;      is not included in YTD calcuation since the Earnings Run (U114) will
> ;      calculate this EP's REVENUE and add to YTD amount).
> ;     (Also calculate computed annual REVENUE for this EP in F112)
> ;     (FIRST - calculate new Computed ANNUAL REQUIRE REVENUEs including
> ;              this EP)
>       if    (   t-retro-to-flag = "R"                             &
>              or t-retro-to-flag = "B"                             &
>             )                                                     &
>         and (ep-nbr < current-ep-nbr of constants-mstr-rec-6      &
>             )							  &
>         and (ep-nbr of f112-pycdceilings <> 0)
>       then
>       begin
>          let t-revenue-computed = t-doc-yrly-reqrev-computed
>          let t-yearly-revenue   = doc-yrly-reqrev * 100
>          let h-revenue-type = "REQ"
>          do build-computed-revenue
>          let t-doc-yrly-reqrev-computed = t-revenue-computed
> 	 let t-adjustment = 0
>    	 do calc-final-computed-revenue
>          let doc-yrly-reqrev-computed of f112-pycdceilings	&
> 		= t-revenue-computed
>       end
> ;     (2ND - calculate new Computed ANNUAL TARGET REVENUEs including
> ;      this EP.  As with REVENUE calculation, the current EP is not
> ;      counted in YTD calculation)
>       if    (   t-retro-to-flag = "T"                             &
>              or t-retro-to-flag = "B"                             &
>             )                                                     &
>         and (ep-nbr < current-ep-nbr of constants-mstr-rec-6      &
>             )                                 			  &
>         and (ep-nbr of f112-pycdceilings <> 0)
>       then
>       begin
>          let t-revenue-computed = t-doc-yrly-tarrev-computed
>          let t-yearly-revenue   = doc-yrly-tarrev * 100
>          let h-revenue-type = "TAR"
>          do build-computed-revenue
>          let t-doc-yrly-tarrev-computed = t-revenue-computed
> 	 let t-adjustment = 0
>    	 do calc-final-computed-revenue
> 	 let doc-yrly-tarrev-computed of f112-pycdceilings =   &
> 			t-revenue-computed
>       end
> 
> ;     (before processing the occurrence containing the CURRENT EP data
> ;      the re-calculated YTD REVENUES(Require/Target) have been made.
> ;      Update these into the Doctor Master record)
>       if ep-nbr = current-ep-nbr
>       then
>       begin
> ;        (update Doctor Extra mstr with newly calculated YTD COMPUTED REVENUE(Require/Target)
> ;         that covers period from start of year to CURRENT EP - 1)
> ;	 (Also calculate the current Annual REVENUEs(Require/Target)
> ;	  for the current EP in F112)
> 
>          if   t-retro-to-flag = "R"  &
>            or t-retro-to-flag = "B"
>          then begin
>               let doc-ytdreq of f020-doctor-extra                      &
>                                 = t-doc-yrly-reqrev-computed
> 	      let h-revenue-type = "REQ"
> 	      let t-adjustment = 0
> 	      let t-revenue-computed = t-doc-yrly-reqrev-computed
> 	      let t-yearly-revenue = doc-yrly-reqrev * 100
> 	      do calc-final-computed-revenue
> 	      let doc-yrly-reqrev-computed of f112-pycdceilings = &
> 				t-revenue-computed
> 	      let t-revenue-computed = t-doc-yrly-reqrev-computed
> 	 end
> 
>          if   t-retro-to-flag = "T"  &
>            or t-retro-to-flag = "B"
>          then begin
>               let doc-ytdtar of f020-doctor-extra                     &
>                                 = t-doc-yrly-tarrev-computed
> 	      let h-revenue-type = "TAR"
> 	      let t-adjustment = 0
> 	      let t-revenue-computed = t-doc-yrly-tarrev-computed
> 	      let t-yearly-revenue = doc-yrly-tarrev * 100
> 	      do calc-final-computed-revenue
> 	      let doc-yrly-tarrev-computed of f112-pycdceilings = &
> 				t-revenue-computed
> 	      let t-revenue-computed = t-doc-yrly-tarrev-computed
> 
> 	 end
>       end
> ;     (save month & values from this occurrence in case it's the last
> ;      one of FOR statement - the last values are used to extrapolate
> ;     to the end of the year to obtain final computed annual REVENUEs)
>       if ep-nbr of f112-pycdceilings <> 0
>       then begin
>          let t-counter-recs-f112 = mod(ep-nbr of f112-pycdceilings,100)
>          let t-last-revenue-req = doc-yrly-reqrev * 100
>          let t-last-revenue-tar = doc-yrly-tarrev * 100
>       end
>    end ;FOR F112
> ;  (using the values from the LAST F112 record for the year, extrapolate
> ;   to end of year to finish calculation of computed REVENUEs)
> ;  (add 1 more EP to calc to account for current EP)
>     let t-adjustment = 1
>     do finish-comp-revenue-to-yearend
> end
> 
> 
> procedure internal calc-true-revenue
> begin
> 
>     let t-doc-yrly-reqrev-computed = 0
>     let t-doc-yrly-tarrev-computed = 0
>     let t-last-ep-nbr = 1
>     let t-last-revenue-req = 0
>     let t-last-revenue-tar = 0
> 
>     for f112-pycdceilings
>     begin
> 	let t-counter-recs-f112 = mod(ep-nbr of f112-pycdceilings,100)
>     	if 0 < (t-counter-recs-f112 - t-last-ep-nbr)
> 	then begin
> 	    let t-doc-yrly-reqrev-computed = t-doc-yrly-reqrev-computed &
> 		+ ((t-last-revenue-req  / 12) * (t-counter-recs-f112 -  &
> 		    t-last-ep-nbr))
> 	    let t-doc-yrly-tarrev-computed = t-doc-yrly-tarrev-computed &
> 		+ ((t-last-revenue-tar / 12) * (t-counter-recs-f112 -  &
> 		    t-last-ep-nbr))
> 	end
> ;    (save the last Require/Target Revenue)
>         let t-last-revenue-req = doc-yrly-reqrev of f112-pycdceilings * 100
>         let t-last-revenue-tar = doc-yrly-tarrev of f112-pycdceilings * 100
> 	let t-last-ep-nbr  = t-counter-recs-f112
>     end
> 
> ;   (using the values from the LAST F112 record for the year, extropolate
> ;    to end of year to finish calculation of computed rquire/target revenue)
> 
>     let t-doc-yrly-reqrev-computed = t-doc-yrly-reqrev-computed  &
> 	+ round((12 - t-last-ep-nbr + 1) * (t-last-revenue-req / 12))
>     let doc-yrly-require-revenue  of f020-doctor-extra  &
> 	= t-doc-yrly-reqrev-computed
>     let t-doc-yrly-tarrev-computed = t-doc-yrly-tarrev-computed  &
> 	+ round((12 - t-last-ep-nbr + 1) * (t-last-revenue-tar / 12))
>     let doc-yrly-target-revenue  of f020-doctor-extra 	&
> 	= t-doc-yrly-tarrev-computed
> 
> end
> 
> ;MC1
> use $use/savef112audit.use
> procedure internal savef112audit
> begin
>    let a-doc-nbr			 = doc-nbr	 		 of  f112-pycdceilings
>    let a-ep-nbr				 = ep-nbr			 of  f112-pycdceilings
>    let a-factor				 = factor       		 of  f112-pycdceilings
>    let a-doc-pay-code			 = doc-pay-code			 of  f112-pycdceilings
>    let a-doc-pay-sub-code		 = doc-pay-sub-code		 of  f112-pycdceilings
>    let a-retro-to-ep-nbr		 = retro-to-ep-nbr	         of  f112-pycdceilings
>    let a-doc-yrly-ceiling		 = doc-yrly-ceiling 		 of  f112-pycdceilings
>    let a-doc-yrly-ceiling-adjusted	 = doc-yrly-ceiling-adjusted     of  f112-pycdceilings
>    let a-doc-yrly-ceiling-computed	 = doc-yrly-ceiling-computed	 of  f112-pycdceilings
>    let a-doc-yrly-expense		 = doc-yrly-expense		 of  f112-pycdceilings
>    let a-doc-yrly-expense-adjusted	 = doc-yrly-expense-adjusted	 of  f112-pycdceilings
>    let a-doc-yrly-expense-computed	 = doc-yrly-expense-computed	 of  f112-pycdceilings
>    let a-doc-yrly-expn-alloc-pers	 = doc-yrly-expn-alloc-pers	 of  f112-pycdceilings
>    let a-doc-yrly-ceil-guar		 = doc-yrly-ceil-guar		 of  f112-pycdceilings
>    let a-doc-yrly-ceiling-guar-perc	 = doc-yrly-ceiling-guar-perc	 of  f112-pycdceilings
>    let a-doc-rma-expense-percent-reg	 = doc-rma-expense-percent-reg	 of  f112-pycdceilings
>    let a-doc-rma-expense-percent-misc	 = doc-rma-expense-percent-misc	 of  f112-pycdceilings
>    let a-doc-dept-expense-percent-reg	 = doc-dept-expense-percent-reg	 of  f112-pycdceilings
>    let a-doc-dept-expense-percent-misc	 = doc-dept-expense-percent-misc of  f112-pycdceilings
>    let a-doc-yrly-reqrev		 = doc-yrly-reqrev		 of  f112-pycdceilings
>    let a-doc-yrly-reqrev-adjusted	 = doc-yrly-reqrev-adjusted	 of  f112-pycdceilings
>    let a-doc-yrly-reqrev-computed	 = doc-yrly-reqrev-computed	 of  f112-pycdceilings
>    let a-doc-yrly-tarrev		 = doc-yrly-tarrev	         of  f112-pycdceilings
>    let a-doc-yrly-tarrev-adjusted	 = doc-yrly-tarrev-adjusted	 of  f112-pycdceilings
>    let a-doc-yrly-tarrev-computed	 = doc-yrly-tarrev-computed	 of  f112-pycdceilings
>    let a-retro-to-ep-nbr-req		 = retro-to-ep-nbr-req		 of  f112-pycdceilings
>    let a-retro-to-ep-nbr-tar		 = retro-to-ep-nbr-tar		 of  f112-pycdceilings
> end
> 
> 
> use $use/createf112audit.use
> procedure internal createf112audit
> begin
>    let doc-nbr	 		 	 of  f112-pycdceilings-audit = a-doc-nbr
>    let ep-nbr			 	 of  f112-pycdceilings-audit = a-ep-nbr
>    let factor       		 	 of  f112-pycdceilings-audit = a-factor
>    let doc-pay-code		 	 of  f112-pycdceilings-audit = a-doc-pay-code
>    let doc-pay-sub-code		 	 of  f112-pycdceilings-audit = a-doc-pay-sub-code
>    let retro-to-ep-nbr	         	 of  f112-pycdceilings-audit = a-retro-to-ep-nbr
>    let doc-yrly-ceiling 	 	 of  f112-pycdceilings-audit = a-doc-yrly-ceiling
>    let doc-yrly-ceiling-adjusted     	 of  f112-pycdceilings-audit = a-doc-yrly-ceiling-adjusted
>    let doc-yrly-ceiling-computed     	 of  f112-pycdceilings-audit = a-doc-yrly-ceiling-computed
>    let doc-yrly-expense		     	 of  f112-pycdceilings-audit = a-doc-yrly-expense
>    let doc-yrly-expense-adjusted     	 of  f112-pycdceilings-audit = a-doc-yrly-expense-adjusted
>    let doc-yrly-expense-computed     	 of  f112-pycdceilings-audit = a-doc-yrly-expense-computed
>    let doc-yrly-expn-alloc-pers	     	 of  f112-pycdceilings-audit = a-doc-yrly-expn-alloc-pers
>    let doc-yrly-ceil-guar		 of  f112-pycdceilings-audit = a-doc-yrly-ceil-guar
>    let doc-yrly-ceiling-guar-perc	 of  f112-pycdceilings-audit = a-doc-yrly-ceiling-guar-perc
>    let doc-rma-expense-percent-reg	 of  f112-pycdceilings-audit = a-doc-rma-expense-percent-reg
>    let doc-rma-expense-percent-misc	 of  f112-pycdceilings-audit = a-doc-rma-expense-percent-misc
>    let doc-dept-expense-percent-reg	 of  f112-pycdceilings-audit = a-doc-dept-expense-percent-reg
>    let doc-dept-expense-percent-misc 	 of  f112-pycdceilings-audit = a-doc-dept-expense-percent-misc
>    let doc-yrly-reqrev		 	 of  f112-pycdceilings-audit = a-doc-yrly-reqrev
>    let doc-yrly-reqrev-adjusted	 	 of  f112-pycdceilings-audit = a-doc-yrly-reqrev-adjusted
>    let doc-yrly-reqrev-computed		 of  f112-pycdceilings-audit = a-doc-yrly-reqrev-computed
>    let doc-yrly-tarrev	         	 of  f112-pycdceilings-audit = a-doc-yrly-tarrev
>    let doc-yrly-tarrev-adjusted	 	 of  f112-pycdceilings-audit = a-doc-yrly-tarrev-adjusted
>    let doc-yrly-tarrev-computed	 	 of  f112-pycdceilings-audit = a-doc-yrly-tarrev-computed
>    let retro-to-ep-nbr-req		 of  f112-pycdceilings-audit = a-retro-to-ep-nbr-req
>    let retro-to-ep-nbr-tar		 of  f112-pycdceilings-audit = a-retro-to-ep-nbr-tar
> end
> 
> procedure internal createf112audit_Add
> begin
>    let doc-nbr	 		 	 of  f112-pycdceilings-audit = doc-nbr			 of  f112-pycdceilings
>    let ep-nbr			 	 of  f112-pycdceilings-audit = ep-nbr			 of  f112-pycdceilings
>    let factor       		 	 of  f112-pycdceilings-audit = factor		         of  f112-pycdceilings
>    let doc-pay-code		 	 of  f112-pycdceilings-audit = doc-pay-code		 of  f112-pycdceilings
>    let doc-pay-sub-code		 	 of  f112-pycdceilings-audit = doc-pay-sub-code		 of  f112-pycdceilings
>    let retro-to-ep-nbr	         	 of  f112-pycdceilings-audit = retro-to-ep-nbr		 of  f112-pycdceilings
>    let doc-yrly-ceiling 	 	 of  f112-pycdceilings-audit = doc-yrly-ceiling		 of  f112-pycdceilings
>    let doc-yrly-ceiling-adjusted     	 of  f112-pycdceilings-audit = doc-yrly-ceiling-adjusted of  f112-pycdceilings
>    let doc-yrly-ceiling-computed     	 of  f112-pycdceilings-audit = doc-yrly-ceiling-computed of  f112-pycdceilings
>    let doc-yrly-expense		     	 of  f112-pycdceilings-audit = doc-yrly-expense		 of  f112-pycdceilings
>    let doc-yrly-expense-adjusted     	 of  f112-pycdceilings-audit = doc-yrly-expense-adjusted of  f112-pycdceilings
>    let doc-yrly-expense-computed     	 of  f112-pycdceilings-audit = doc-yrly-expense-computed of  f112-pycdceilings
>    let doc-yrly-expn-alloc-pers	     	 of  f112-pycdceilings-audit = doc-yrly-expn-alloc-pers	 of  f112-pycdceilings
>    let doc-yrly-ceil-guar		 of  f112-pycdceilings-audit = doc-yrly-ceil-guar	 of  f112-pycdceilings
>    let doc-yrly-ceiling-guar-perc	 of  f112-pycdceilings-audit = doc-yrly-ceiling-guar-perc of  f112-pycdceilings
>    let doc-rma-expense-percent-reg	 of  f112-pycdceilings-audit = doc-rma-expense-percent-reg of  f112-pycdceilings
>    let doc-rma-expense-percent-misc	 of  f112-pycdceilings-audit = doc-rma-expense-percent-misc of  f112-pycdceilings
>    let doc-dept-expense-percent-reg	 of  f112-pycdceilings-audit = doc-dept-expense-percent-reg of  f112-pycdceilings
>    let doc-dept-expense-percent-misc 	 of  f112-pycdceilings-audit = doc-dept-expense-percent-misc of  f112-pycdceilings
>    let doc-yrly-reqrev		 	 of  f112-pycdceilings-audit = doc-yrly-reqrev		    of  f112-pycdceilings
>    let doc-yrly-reqrev-adjusted	 	 of  f112-pycdceilings-audit = doc-yrly-reqrev-adjusted	    of  f112-pycdceilings
>    let doc-yrly-reqrev-computed		 of  f112-pycdceilings-audit = doc-yrly-reqrev-computed     of  f112-pycdceilings
>    let doc-yrly-tarrev	         	 of  f112-pycdceilings-audit = doc-yrly-tarrev		    of  f112-pycdceilings
>    let doc-yrly-tarrev-adjusted	 	 of  f112-pycdceilings-audit = doc-yrly-tarrev-adjusted	    of  f112-pycdceilings
>    let doc-yrly-tarrev-computed	 	 of  f112-pycdceilings-audit = doc-yrly-tarrev-computed     of  f112-pycdceilings
>    let retro-to-ep-nbr-req		 of  f112-pycdceilings-audit = retro-to-ep-nbr-req	    of  f112-pycdceilings
>    let retro-to-ep-nbr-tar		 of  f112-pycdceilings-audit = retro-to-ep-nbr-tar          of  f112-pycdceilings
> end
> 
> 
> ;MC1 - end
> 
> ; 2006/11/28 - MC
> procedure preentry
> begin
>    get f020-doctor-extra via doc-nbr using doc-nbr of f020-doctor-mstr opt
>    let t-retro-to-flag = ' '
> end
> ; 2006/11/28 - end
> 
> procedure postfind
> begin
>    get f020-doctor-extra via doc-nbr using doc-nbr of f020-doctor-mstr opt
>    let t-retro-to-flag = ' '
> 
> ; MC1
>    for f112-pycdceilings
>    begin
>      do savef112audit
>    end
> ; MC1 - end
> 
> end
> 
> procedure edit    doc-yrly-reqrev
> begin
> ; IF EP-NBR OF F112-PYCDCEILINGS < CURRENT-EP-NBR
> ; THEN ERROR   "Error - You cannot change data before the CURRENT Earnings Period."
>   if       oldvalue(doc-yrly-reqrev) <> doc-yrly-reqrev	&
>       or   (newrecord and doc-yrly-reqrev = 0)
>   then
>   begin
>     let t-retro-to-flag = "R"
>     let     doc-yrly-reqrev-adjusted of f112-pycdceilings = oldvalue(doc-yrly-reqrev)
>     display doc-yrly-reqrev-adjusted of f112-pycdceilings
>   end
> end
> 
> procedure edit    doc-yrly-tarrev
> begin
> ; IF EP-NBR OF F112-PYCDCEILINGS < CURRENT-EP-NBR
> ; THEN ERROR   "Error -  You cannot change data before the CURRENT Earnings Period."
>   if 	   oldvalue(doc-yrly-tarrev) <> doc-yrly-tarrev	&
>       or   (newrecord and doc-yrly-tarrev = 0)
>   then
>   begin
>     if t-retro-to-flag = " "
>     then let t-retro-to-flag = "T"
>     else let t-retro-to-flag = "B"
>     let     doc-yrly-tarrev-adjusted of f112-pycdceilings = oldvalue(doc-yrly-tarrev)
>     display doc-yrly-tarrev-adjusted of f112-pycdceilings
>   end
> end
> 
> procedure edit retro-to-ep-nbr-req
> begin
> 
> ;   (Retro normally from 'CURRENT EP')
>    if retro-to-ep-nbr-req > current-ep-nbr
>    then error   "Error - Can't be Retroactive to FUTURE E/P."
>    if retro-to-ep-nbr-req < current-ep-nbr
>    then warning "*W* Must be Retroactive from CURRENT EP."
> 
>    let t-yy-retro = ascii(retro-to-ep-nbr-req,6)[1:4]
>    let t-yy-fiscal= ascii(current-ep-nbr,6)[1:4]
>    if t-yy-retro <> t-yy-fiscal
>    then error "Error - Must be Retroactive within CURRENT YEAR."
> 
> end
> 
> procedure edit retro-to-ep-nbr-tar
> begin
> 
> ;   (Retro normally from 'CURRENT EP')
>    if retro-to-ep-nbr-tar > current-ep-nbr
>    then error   "Error - Can't be Retroactive to FUTURE E/P."
>    if retro-to-ep-nbr-tar < current-ep-nbr
>    then warning "*W* Must be Retroactive from CURRENT EP."
> 
>    let t-yy-retro = ascii(retro-to-ep-nbr-tar,6)[1:4]
>    let t-yy-fiscal= ascii(current-ep-nbr,6)[1:4]
>    if t-yy-retro <> t-yy-fiscal
>    then error "Error - Must be Retroactive within CURRENT YEAR."
> 
> end
> 
> 
> procedure process t-silent-revenue
> begin
> ;  (Capture what REVENUE IS BEING ADJUSTED TO)
>     if ep-nbr of f112-pycdceilings <> 0
>     then begin
>        let h-doc-yrly-reqrev  = doc-yrly-reqrev of f112-pycdceilings
>        let h-doc-yrly-tarrev  = doc-yrly-tarrev of f112-pycdceilings
>        let h-current-ep        = ep-nbr           of f112-pycdceilings
>        let h-current-occurence = occurrence
>        if retro-to-ep-nbr-req of f112-pycdceilings <> 0
>        then let h-retro-to-ep-nbr-req = retro-to-ep-nbr-req of f112-pycdceilings
>        else let h-retro-to-ep-nbr-req = ep-nbr of f112-pycdceilings
>        if retro-to-ep-nbr-tar of f112-pycdceilings <> 0
>        then let h-retro-to-ep-nbr-tar = retro-to-ep-nbr-tar of f112-pycdceilings
>        else let h-retro-to-ep-nbr-tar = ep-nbr of f112-pycdceilings
> ;  (re-calculate COMPUTED REQUIRE/TARGAET REVENUES)
>        do retro-revenue
>        do calc-true-revenue
>     end
> end
> 
> procedure preupdate
> begin
>    let doc-nbr of f020-doctor-extra = doc-nbr of f020-doctor-mstr
>    put f020-doctor-extra
> 
> ; 2006/11/28 - MC
>    for f112-pycdceilings
>    begin
> 	if newrecord of f112-pycdceilings
> 	then begin
> 	   get f112-designer optional
> 	   if accessok
> 	   then begin
> 		let factor of f112-pycdceilings = factor of f112-designer
> 		let retro-to-ep-nbr of f112-pycdceilings = retro-to-ep-nbr of f112-designer
> 		let doc-yrly-ceiling of f112-pycdceilings = doc-yrly-ceiling of f112-designer
> 		let doc-yrly-ceiling-adjusted of f112-pycdceilings = doc-yrly-ceiling-adjusted of f112-designer
> 		let doc-yrly-ceiling-computed of f112-pycdceilings = doc-yrly-ceiling-computed of f112-designer
> 		let doc-yrly-expense of f112-pycdceilings = doc-yrly-expense of f112-designer
> 		let doc-yrly-expense-adjusted of f112-pycdceilings = doc-yrly-expense-adjusted of f112-designer
> 		let doc-yrly-expense-computed of f112-pycdceilings = doc-yrly-expense-computed of f112-designer
> 		let doc-yrly-expn-alloc-pers of f112-pycdceilings = doc-yrly-expn-alloc-pers of f112-designer
> 		let doc-yrly-ceil-guar   of f112-pycdceilings = doc-yrly-ceil-guar of f112-designer
> 		let doc-yrly-ceiling-guar-perc of f112-pycdceilings = doc-yrly-ceiling-guar-perc of f112-designer
> 	   	end
> 	   end
> 	end
> ; 2006/11/28 - end
> 
> ; MC1
>    For f112-pycdceilings
>    begin
>    if newrecord of f112-pycdceilings
>    then begin
>         do createf112audit_add
>         let last-mod-flag of f112-pycdceilings-audit = 'A'
>         let last-mod-date of f112-pycdceilings-audit = sysdate
>         let last-mod-time of f112-pycdceilings-audit = systime / 10000
>         let last-mod-user-id of f112-pycdceilings-audit = trun(logonid) + '-d112a-A'
>         put f112-pycdceilings-audit
>         end
>    else
>    if changemode and deletedrecord of f112-pycdceilings
>    then begin
>         do createf112audit
>         let last-mod-flag of f112-pycdceilings-audit = 'D'
>         let last-mod-date of f112-pycdceilings-audit = sysdate
>         let last-mod-time of f112-pycdceilings-audit = systime / 10000
>         let last-mod-user-id of f112-pycdceilings-audit = trun(logonid) + '-d112a-D'
>         put f112-pycdceilings-audit
>         end
>    else
>    if changemode and alteredrecord of f112-pycdceilings
>    then begin
> ;      create before change audit record
>         do createf112audit
>         let last-mod-flag of f112-pycdceilings-audit = 'C'
>         let last-mod-date of f112-pycdceilings-audit = sysdate
>         let last-mod-time of f112-pycdceilings-audit = systime / 10000
>         let last-mod-user-id of f112-pycdceilings-audit = trun(logonid) + '-d112a-1'
>         put f112-pycdceilings-audit reset
> ;      create after  change audit record
>         do createf112audit_add
>         let last-mod-flag of f112-pycdceilings-audit = 'C'
>         let last-mod-date of f112-pycdceilings-audit = sysdate
>         let last-mod-time of f112-pycdceilings-audit = systime / 10000
>         let last-mod-user-id of f112-pycdceilings-audit = trun(logonid) + '-d112a-2'
>         put f112-pycdceilings-audit
>         end
>    end
> ; MC1 - end
> 
> end
> 
> build detail list
> PROCEDURE APPEND
>   BEGIN
>     ACCEPT EP-NBR OF F112-PYCDCEILINGS
>     DISPLAY ICONST-DATE-PERIOD-END OF F191-EARNINGS-PERIOD
>     ACCEPT DOC-PAY-CODE OF F112-PYCDCEILINGS
>     IF DOC-PAY-CODE OF F112-PYCDCEILINGS = "1" OR DOC-PAY-CODE OF &
>           F112-PYCDCEILINGS = "4"
>       THEN ACCEPT DOC-PAY-SUB-CODE OF F112-PYCDCEILINGS
>       ELSE DISPLAY DOC-PAY-SUB-CODE OF F112-PYCDCEILINGS
>     ACCEPT DOC-YRLY-REQREV OF F112-PYCDCEILINGS
>     DISPLAY DOC-YRLY-REQREV-ADJUSTED OF F112-PYCDCEILINGS
>     ACCEPT RETRO-TO-EP-NBR-REQ OF F112-PYCDCEILINGS
>     ACCEPT DOC-YRLY-TARREV OF F112-PYCDCEILINGS
>     DISPLAY DOC-YRLY-TARREV-ADJUSTED OF F112-PYCDCEILINGS
>     ACCEPT RETRO-TO-EP-NBR-TAR OF F112-PYCDCEILINGS
>     EDIT T-SILENT-REVENUE
>     END
> PROCEDURE ENTRY
>   BEGIN
>     FOR F112-PYCDCEILINGS
>       BEGIN
>         PERFORM APPEND
>         END
>     END
> PROCEDURE PATH
>   BEGIN
>     LET PATH = 1
>     END
> PROCEDURE FIND
>   BEGIN
>     FOR MISSING F112-PYCDCEILINGS
>       BEGIN
>         GET F112-PYCDCEILINGS VIAINDEX PYCDCEILINGS USING W-DOC-NBR
>         END
>     END
> PROCEDURE UPDATE
>   BEGIN
>     FOR F112-PYCDCEILINGS
>       BEGIN
>         PUT F112-PYCDCEILINGS
>         END
>     PUT F020-DOCTOR-MSTR
>     END
> PROCEDURE DELETE
>   BEGIN
>     DELETE F112-PYCDCEILINGS
>     END
> ALLDONE
MODE:x ACTION:xxxxxxxxx  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
   E/P    BILLING   PAY     ---REVENUES----   RETRO     ---REVENUES----   RETRO
   Nbr      PED     CODE    REQUIRE/ORIGINL    TO       TARGET /ORIGINL    TO
01 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
02 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
03 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
04 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
05 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
06 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
07 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
08 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
09 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
10 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
11 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
12 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
13 xxxxxx xxxxxxxxxx xx     xxxxxxx xxxxxxx   xxxxxx    xxxxxxx xxxxxxx  xxxxxx
 
 
 
 
 
 
 
0 ERRORS  0 WARNINGS. Delete old screen /alpha/rmabill/rmabill101/obj/d112a.qkc?
> 
> 
Tue Aug 12 11:53:09 EDT 2014
